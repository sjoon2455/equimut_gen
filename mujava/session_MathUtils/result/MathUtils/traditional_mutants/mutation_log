AORB_5:31:int_addAndCheck(int,int):(long) x + (long) y => (long) x * (long) y
AORB_6:31:int_addAndCheck(int,int):(long) x + (long) y => (long) x / (long) y
AORB_7:31:int_addAndCheck(int,int):(long) x + (long) y => (long) x % (long) y
AORB_8:31:int_addAndCheck(int,int):(long) x + (long) y => (long) x - (long) y
AORB_9:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => Long.MIN_VALUE * b
AORB_10:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => Long.MIN_VALUE / b
AORB_11:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => Long.MIN_VALUE % b
AORB_12:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => Long.MIN_VALUE + b
AORB_13:52:long_addAndCheck(long,long,java.lang.String):a + b => a * b
AORB_14:52:long_addAndCheck(long,long,java.lang.String):a + b => a / b
AORB_15:52:long_addAndCheck(long,long,java.lang.String):a + b => a % b
AORB_16:52:long_addAndCheck(long,long,java.lang.String):a + b => a - b
AORB_17:57:long_addAndCheck(long,long,java.lang.String):a + b => a * b
AORB_18:57:long_addAndCheck(long,long,java.lang.String):a + b => a / b
AORB_19:57:long_addAndCheck(long,long,java.lang.String):a + b => a % b
AORB_20:57:long_addAndCheck(long,long,java.lang.String):a + b => a - b
AORB_21:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => Long.MAX_VALUE * b
AORB_22:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => Long.MAX_VALUE / b
AORB_23:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => Long.MAX_VALUE % b
AORB_24:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => Long.MAX_VALUE + b
AORB_25:61:long_addAndCheck(long,long,java.lang.String):a + b => a * b
AORB_26:61:long_addAndCheck(long,long,java.lang.String):a + b => a / b
AORB_27:61:long_addAndCheck(long,long,java.lang.String):a + b => a % b
AORB_28:61:long_addAndCheck(long,long,java.lang.String):a + b => a - b
AORB_29:81:long_binomialCoefficient(int,int):n - 1 => n * 1
AORB_30:81:long_binomialCoefficient(int,int):n - 1 => n / 1
AORB_31:81:long_binomialCoefficient(int,int):n - 1 => n % 1
AORB_32:81:long_binomialCoefficient(int,int):n - 1 => n + 1
AORB_33:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => Math.exp( binomialCoefficientLog( n, k ) ) * 0.5
AORB_34:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => Math.exp( binomialCoefficientLog( n, k ) ) / 0.5
AORB_35:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => Math.exp( binomialCoefficientLog( n, k ) ) % 0.5
AORB_36:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => Math.exp( binomialCoefficientLog( n, k ) ) - 0.5
AORB_37:107:double_binomialCoefficientLog(int,int):n - 1 => n * 1
AORB_38:107:double_binomialCoefficientLog(int,int):n - 1 => n / 1
AORB_39:107:double_binomialCoefficientLog(int,int):n - 1 => n % 1
AORB_40:107:double_binomialCoefficientLog(int,int):n - 1 => n + 1
AORB_41:111:double_binomialCoefficientLog(int,int):k + 1 => k * 1
AORB_42:111:double_binomialCoefficientLog(int,int):k + 1 => k / 1
AORB_43:111:double_binomialCoefficientLog(int,int):k + 1 => k % 1
AORB_44:111:double_binomialCoefficientLog(int,int):k + 1 => k - 1
AORB_45:114:double_binomialCoefficientLog(int,int):n - k => n * k
AORB_46:114:double_binomialCoefficientLog(int,int):n - k => n / k
AORB_47:114:double_binomialCoefficientLog(int,int):n - k => n % k
AORB_48:114:double_binomialCoefficientLog(int,int):n - k => n + k
AORB_49:122:double_cosh(double):Math.exp( x ) + Math.exp( -x ) => Math.exp( x ) * Math.exp( -x )
AORB_50:122:double_cosh(double):Math.exp( x ) + Math.exp( -x ) => Math.exp( x ) / Math.exp( -x )
AORB_51:122:double_cosh(double):Math.exp( x ) + Math.exp( -x ) => Math.exp( x ) % Math.exp( -x )
AORB_52:122:double_cosh(double):Math.exp( x ) + Math.exp( -x ) => Math.exp( x ) - Math.exp( -x )
AORB_53:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => (Math.exp( x ) + Math.exp( -x )) * 2.0
AORB_54:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => (Math.exp( x ) + Math.exp( -x )) % 2.0
AORB_55:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => Math.exp( x ) + Math.exp( -x ) + 2.0
AORB_56:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => Math.exp( x ) + Math.exp( -x ) - 2.0
AORB_57:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => Math.exp( factorialLog( n ) ) * 0.5
AORB_58:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => Math.exp( factorialLog( n ) ) / 0.5
AORB_59:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => Math.exp( factorialLog( n ) ) % 0.5
AORB_60:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => Math.exp( factorialLog( n ) ) - 0.5
AORB_61:177:int_gcd(int,int):u * v => u / v
AORB_62:177:int_gcd(int,int):u * v => u % v
AORB_63:177:int_gcd(int,int):u * v => u + v
AORB_64:177:int_gcd(int,int):u * v => u - v
AORB_65:178:int_gcd(int,int):Math.abs( u ) + Math.abs( v ) => Math.abs( u ) * Math.abs( v )
AORB_66:178:int_gcd(int,int):Math.abs( u ) + Math.abs( v ) => Math.abs( u ) / Math.abs( v )
AORB_67:178:int_gcd(int,int):Math.abs( u ) + Math.abs( v ) => Math.abs( u ) % Math.abs( v )
AORB_68:178:int_gcd(int,int):Math.abs( u ) + Math.abs( v ) => Math.abs( u ) - Math.abs( v )
AORB_69:195:int_gcd(int,int):u / 2 => u * 2
AORB_70:195:int_gcd(int,int):u / 2 => u % 2
AORB_71:195:int_gcd(int,int):u / 2 => u + 2
AORB_72:195:int_gcd(int,int):u / 2 => u - 2
AORB_73:205:int_gcd(int,int):v - u => v * u
AORB_74:205:int_gcd(int,int):v - u => v / u
AORB_75:205:int_gcd(int,int):v - u => v % u
AORB_76:205:int_gcd(int,int):v - u => v + u
AORB_77:205:int_gcd(int,int):(v - u) / 2 => (v - u) * 2
AORB_78:205:int_gcd(int,int):(v - u) / 2 => (v - u) % 2
AORB_79:205:int_gcd(int,int):(v - u) / 2 => v - u + 2
AORB_80:205:int_gcd(int,int):(v - u) / 2 => v - u - 2
AORB_81:207:int_gcd(int,int):-u * (1 << k) => -u / (1 << k)
AORB_82:207:int_gcd(int,int):-u * (1 << k) => -u % (1 << k)
AORB_83:207:int_gcd(int,int):-u * (1 << k) => -u + (1 << k)
AORB_84:207:int_gcd(int,int):-u * (1 << k) => -u - (1 << k)
AORB_85:248:int_lcm(int,int):a / gcd( a, b ) => a * gcd( a, b )
AORB_86:248:int_lcm(int,int):a / gcd( a, b ) => a % gcd( a, b )
AORB_87:248:int_lcm(int,int):a / gcd( a, b ) => a + gcd( a, b )
AORB_88:248:int_lcm(int,int):a / gcd( a, b ) => a - gcd( a, b )
AORB_89:253:double_log(double,double):Math.log( x ) / Math.log( base ) => Math.log( x ) * Math.log( base )
AORB_90:253:double_log(double,double):Math.log( x ) / Math.log( base ) => Math.log( x ) % Math.log( base )
AORB_91:253:double_log(double,double):Math.log( x ) / Math.log( base ) => Math.log( x ) + Math.log( base )
AORB_92:253:double_log(double,double):Math.log( x ) / Math.log( base ) => Math.log( x ) - Math.log( base )
AORB_93:258:int_mulAndCheck(int,int):(long) x * (long) y => (long) x / (long) y
AORB_94:258:int_mulAndCheck(int,int):(long) x * (long) y => (long) x % (long) y
AORB_95:258:int_mulAndCheck(int,int):(long) x * (long) y => (long) x + (long) y
AORB_96:258:int_mulAndCheck(int,int):(long) x * (long) y => (long) x - (long) y
AORB_97:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE * b
AORB_98:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE % b
AORB_99:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE + b
AORB_100:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE - b
AORB_101:275:long_mulAndCheck(long,long):a * b => a / b
AORB_102:275:long_mulAndCheck(long,long):a * b => a % b
AORB_103:275:long_mulAndCheck(long,long):a * b => a + b
AORB_104:275:long_mulAndCheck(long,long):a * b => a - b
AORB_105:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => Long.MIN_VALUE * b
AORB_106:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => Long.MIN_VALUE % b
AORB_107:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => Long.MIN_VALUE + b
AORB_108:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => Long.MIN_VALUE - b
AORB_109:282:long_mulAndCheck(long,long):a * b => a / b
AORB_110:282:long_mulAndCheck(long,long):a * b => a % b
AORB_111:282:long_mulAndCheck(long,long):a * b => a + b
AORB_112:282:long_mulAndCheck(long,long):a * b => a - b
AORB_113:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE * b
AORB_114:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE % b
AORB_115:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE + b
AORB_116:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE - b
AORB_117:293:long_mulAndCheck(long,long):a * b => a / b
AORB_118:293:long_mulAndCheck(long,long):a * b => a % b
AORB_119:293:long_mulAndCheck(long,long):a * b => a + b
AORB_120:293:long_mulAndCheck(long,long):a * b => a - b
AORB_121:318:double_nextAfter(double,double):direction - d => direction * d
AORB_122:318:double_nextAfter(double,double):direction - d => direction / d
AORB_123:318:double_nextAfter(double,double):direction - d => direction % d
AORB_124:318:double_nextAfter(double,double):direction - d => direction + d
AORB_125:318:double_nextAfter(double,double):d * (direction - d) => d / (direction - d)
AORB_126:318:double_nextAfter(double,double):d * (direction - d) => d % (direction - d)
AORB_127:318:double_nextAfter(double,double):d * (direction - d) => d + (direction - d)
AORB_128:318:double_nextAfter(double,double):d * (direction - d) => d - (direction - d)
AORB_129:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => exponent * 0x0010000000000000L
AORB_130:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => exponent / 0x0010000000000000L
AORB_131:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => exponent % 0x0010000000000000L
AORB_132:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => exponent - 0x0010000000000000L
AORB_133:322:double_nextAfter(double,double):mantissa + 1 => mantissa * 1
AORB_134:322:double_nextAfter(double,double):mantissa + 1 => mantissa / 1
AORB_135:322:double_nextAfter(double,double):mantissa + 1 => mantissa % 1
AORB_136:322:double_nextAfter(double,double):mantissa + 1 => mantissa - 1
AORB_137:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => exponent * 0x0010000000000000L
AORB_138:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => exponent / 0x0010000000000000L
AORB_139:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => exponent % 0x0010000000000000L
AORB_140:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => exponent + 0x0010000000000000L
AORB_141:328:double_nextAfter(double,double):mantissa - 1 => mantissa * 1
AORB_142:328:double_nextAfter(double,double):mantissa - 1 => mantissa / 1
AORB_143:328:double_nextAfter(double,double):mantissa - 1 => mantissa % 1
AORB_144:328:double_nextAfter(double,double):mantissa - 1 => mantissa + 1
AORB_145:335:double_normalizeAngle(double,double):a + Math.PI => a * Math.PI
AORB_146:335:double_normalizeAngle(double,double):a + Math.PI => a / Math.PI
AORB_147:335:double_normalizeAngle(double,double):a + Math.PI => a % Math.PI
AORB_148:335:double_normalizeAngle(double,double):a + Math.PI => a - Math.PI
AORB_149:335:double_normalizeAngle(double,double):a + Math.PI - center => (a + Math.PI) * center
AORB_150:335:double_normalizeAngle(double,double):a + Math.PI - center => (a + Math.PI) / center
AORB_151:335:double_normalizeAngle(double,double):a + Math.PI - center => (a + Math.PI) % center
AORB_152:335:double_normalizeAngle(double,double):a + Math.PI - center => a + Math.PI + center
AORB_153:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => (a + Math.PI - center) * TWO_PI
AORB_154:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => (a + Math.PI - center) % TWO_PI
AORB_155:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => a + Math.PI - center + TWO_PI
AORB_156:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => a + Math.PI - center - TWO_PI
AORB_157:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI / Math.floor( (a + Math.PI - center) / TWO_PI )
AORB_158:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI % Math.floor( (a + Math.PI - center) / TWO_PI )
AORB_159:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI + Math.floor( (a + Math.PI - center) / TWO_PI )
AORB_160:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI - Math.floor( (a + Math.PI - center) / TWO_PI )
AORB_161:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => a * (TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ))
AORB_162:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => a / (TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ))
AORB_163:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => a % (TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ))
AORB_164:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => a + TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI )
AORB_165:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => (float) Math.pow( 10.0f, scale ) / sign
AORB_166:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => (float) Math.pow( 10.0f, scale ) % sign
AORB_167:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => (float) Math.pow( 10.0f, scale ) + sign
AORB_168:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => (float) Math.pow( 10.0f, scale ) - sign
AORB_169:365:float_round(float,int,int):x * factor => x / factor
AORB_170:365:float_round(float,int,int):x * factor => x % factor
AORB_171:365:float_round(float,int,int):x * factor => x + factor
AORB_172:365:float_round(float,int,int):x * factor => x - factor
AORB_173:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => (float) roundUnscaled( x * factor, sign, roundingMethod ) * factor
AORB_174:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => (float) roundUnscaled( x * factor, sign, roundingMethod ) % factor
AORB_175:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => (float) roundUnscaled( x * factor, sign, roundingMethod ) + factor
AORB_176:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => (float) roundUnscaled( x * factor, sign, roundingMethod ) - factor
AORB_177:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled * Math.floor( unscaled )
AORB_178:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled / Math.floor( unscaled )
AORB_179:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled % Math.floor( unscaled )
AORB_180:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled + Math.floor( unscaled )
AORB_181:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled * Math.floor( unscaled )
AORB_182:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled / Math.floor( unscaled )
AORB_183:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled % Math.floor( unscaled )
AORB_184:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled + Math.floor( unscaled )
AORB_185:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) * 2.0
AORB_186:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) % 2.0
AORB_187:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) + 2.0
AORB_188:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) - 2.0
AORB_189:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) * 2.0
AORB_190:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) % 2.0
AORB_191:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) + 2.0
AORB_192:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled ) - 2.0
AORB_193:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled * Math.floor( unscaled )
AORB_194:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled / Math.floor( unscaled )
AORB_195:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled % Math.floor( unscaled )
AORB_196:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled + Math.floor( unscaled )
AORB_197:489:double_sinh(double):Math.exp( x ) - Math.exp( -x ) => Math.exp( x ) * Math.exp( -x )
AORB_198:489:double_sinh(double):Math.exp( x ) - Math.exp( -x ) => Math.exp( x ) / Math.exp( -x )
AORB_199:489:double_sinh(double):Math.exp( x ) - Math.exp( -x ) => Math.exp( x ) % Math.exp( -x )
AORB_200:489:double_sinh(double):Math.exp( x ) - Math.exp( -x ) => Math.exp( x ) + Math.exp( -x )
AORB_201:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => (Math.exp( x ) - Math.exp( -x )) * 2.0
AORB_202:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => (Math.exp( x ) - Math.exp( -x )) % 2.0
AORB_203:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => Math.exp( x ) - Math.exp( -x ) + 2.0
AORB_204:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => Math.exp( x ) - Math.exp( -x ) - 2.0
AORB_205:494:int_subAndCheck(int,int):(long) x - (long) y => (long) x * (long) y
AORB_206:494:int_subAndCheck(int,int):(long) x - (long) y => (long) x / (long) y
AORB_207:494:int_subAndCheck(int,int):(long) x - (long) y => (long) x % (long) y
AORB_208:494:int_subAndCheck(int,int):(long) x - (long) y => (long) x + (long) y
AORB_209:507:long_subAndCheck(long,long):a - b => a * b
AORB_210:507:long_subAndCheck(long,long):a - b => a / b
AORB_211:507:long_subAndCheck(long,long):a - b => a % b
AORB_212:507:long_subAndCheck(long,long):a - b => a + b
AORS_1:111:double_binomialCoefficientLog(int,int):i++ => i--
AORS_2:114:double_binomialCoefficientLog(int,int):i++ => i--
AORS_3:138:boolean_equals(double,double):++i => i--
AORS_4:169:double_factorialLog(int):i++ => i--
AORS_5:190:int_gcd(int,int):k++ => k--
AODU_3:181:int_gcd(int,int):-u => u
AODU_4:184:int_gcd(int,int):-v => v
AODU_5:195:int_gcd(int,int):-(u / 2) => u / 2
AODU_6:201:int_gcd(int,int):-t => t
AODU_7:220:double_indicator(double):-1.0 => 1.0
AODU_8:228:float_indicator(float):-1.0F => 1.0F
AODU_9:233:int_indicator(int):-1 => 1
AODU_10:238:long_indicator(long):-1L => 1L
AODU_11:311:double_nextAfter(double,double):-Double.MIN_VALUE => Double.MIN_VALUE
AODU_12:461:double_sign(double):-1.0 => 1.0
AODU_13:469:float_sign(float):-1.0F => 1.0F
AODU_14:474:int_sign(int):-1 => 1
AODU_15:479:long_sign(long):-1L => 1L
AODU_16:512:long_subAndCheck(long,long):-b => b
AODS_1:190:int_gcd(int,int):k++ => k
AOIU_2:31:int_addAndCheck(int,int):x => -x
AOIU_3:35:int_addAndCheck(int,int):s => -s
AOIU_4:40:long_addAndCheck(long,long):a => -a
AOIU_5:40:long_addAndCheck(long,long):b => -b
AOIU_6:46:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_7:46:long_addAndCheck(long,long,java.lang.String):b => -b
AOIU_8:47:long_addAndCheck(long,long,java.lang.String):b => -b
AOIU_9:47:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_10:49:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_11:50:long_addAndCheck(long,long,java.lang.String):b => -b
AOIU_12:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE => -Long.MIN_VALUE
AOIU_13:51:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_14:52:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_15:57:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_16:60:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_17:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE => -Long.MAX_VALUE
AOIU_18:61:long_addAndCheck(long,long,java.lang.String):a => -a
AOIU_19:67:long_addAndCheck(long,long,java.lang.String):ret => -ret
AOIU_20:72:long_binomialCoefficient(int,int):n => -n
AOIU_21:72:long_binomialCoefficient(int,int):k => -k
AOIU_22:75:long_binomialCoefficient(int,int):n => -n
AOIU_23:82:long_binomialCoefficient(int,int):n => -n
AOIU_24:84:long_binomialCoefficient(int,int):n => -n
AOIU_25:84:long_binomialCoefficient(int,int):k => -k
AOIU_26:85:long_binomialCoefficient(int,int):result => -result
AOIU_27:85:long_binomialCoefficient(int,int):Long.MAX_VALUE => -Long.MAX_VALUE
AOIU_28:88:long_binomialCoefficient(int,int):result => -result
AOIU_29:93:double_binomialCoefficientDouble(int,int):n => -n
AOIU_30:93:double_binomialCoefficientDouble(int,int):k => -k
AOIU_31:98:double_binomialCoefficientLog(int,int):n => -n
AOIU_32:98:double_binomialCoefficientLog(int,int):k => -k
AOIU_33:101:double_binomialCoefficientLog(int,int):n => -n
AOIU_34:108:double_binomialCoefficientLog(int,int):n => -n
AOIU_35:111:double_binomialCoefficientLog(int,int):k => -k
AOIU_36:111:double_binomialCoefficientLog(int,int):i => -i
AOIU_37:111:double_binomialCoefficientLog(int,int):n => -n
AOIU_38:112:double_binomialCoefficientLog(int,int):i => -i
AOIU_39:114:double_binomialCoefficientLog(int,int):i => -i
AOIU_40:114:double_binomialCoefficientLog(int,int):n => -n
AOIU_41:115:double_binomialCoefficientLog(int,int):i => -i
AOIU_42:117:double_binomialCoefficientLog(int,int):logSum => -logSum
AOIU_43:122:double_cosh(double):x => -x
AOIU_44:135:boolean_equals(double,double):x.length => -x.length
AOIU_45:135:boolean_equals(double,double):y.length => -y.length
AOIU_46:138:boolean_equals(double,double):i => -i
AOIU_47:138:boolean_equals(double,double):x.length => -x.length
AOIU_48:148:long_factorial(int):n => -n
AOIU_49:149:long_factorial(int):result => -result
AOIU_50:149:long_factorial(int):Long.MAX_VALUE => -Long.MAX_VALUE
AOIU_51:152:long_factorial(int):result => -result
AOIU_52:157:double_factorialDouble(int):n => -n
AOIU_53:160:double_factorialDouble(int):n => -n
AOIU_54:165:double_factorialLog(int):n => -n
AOIU_55:169:double_factorialLog(int):i => -i
AOIU_56:169:double_factorialLog(int):n => -n
AOIU_57:170:double_factorialLog(int):i => -i
AOIU_58:172:double_factorialLog(int):logSum => -logSum
AOIU_59:177:int_gcd(int,int):u => -u
AOIU_60:178:int_gcd(int,int):u => -u
AOIU_61:180:int_gcd(int,int):u => -u
AOIU_62:183:int_gcd(int,int):v => -v
AOIU_63:192:int_gcd(int,int):k => -k
AOIU_64:195:int_gcd(int,int):v => -v
AOIU_65:200:int_gcd(int,int):t => -t
AOIU_66:203:int_gcd(int,int):t => -t
AOIU_67:205:int_gcd(int,int):v => -v
AOIU_68:206:int_gcd(int,int):t => -t
AOIU_69:212:byte_indicator(byte):x => -x
AOIU_70:212:byte_indicator(byte):ZB => -ZB
AOIU_71:212:byte_indicator(byte):PB => -PB
AOIU_72:212:byte_indicator(byte):NB => -NB
AOIU_73:217:double_indicator(double):x => -x
AOIU_74:218:double_indicator(double):Double.NaN => -Double.NaN
AOIU_75:220:double_indicator(double):x => -x
AOIU_76:225:float_indicator(float):x => -x
AOIU_77:226:float_indicator(float):Float.NaN => -Float.NaN
AOIU_78:228:float_indicator(float):x => -x
AOIU_79:233:int_indicator(int):x => -x
AOIU_80:238:long_indicator(long):x => -x
AOIU_81:243:short_indicator(short):x => -x
AOIU_82:243:short_indicator(short):ZS => -ZS
AOIU_83:243:short_indicator(short):PS => -PS
AOIU_84:243:short_indicator(short):NS => -NS
AOIU_85:248:int_lcm(int,int):a => -a
AOIU_86:248:int_lcm(int,int):a => -a
AOIU_87:248:int_lcm(int,int):b => -b
AOIU_88:248:int_lcm(int,int):b => -b
AOIU_89:253:double_log(double,double):x => -x
AOIU_90:253:double_log(double,double):base => -base
AOIU_91:258:int_mulAndCheck(int,int):x => -x
AOIU_92:258:int_mulAndCheck(int,int):y => -y
AOIU_93:262:int_mulAndCheck(int,int):m => -m
AOIU_94:269:long_mulAndCheck(long,long):a => -a
AOIU_95:269:long_mulAndCheck(long,long):b => -b
AOIU_96:270:long_mulAndCheck(long,long):b => -b
AOIU_97:270:long_mulAndCheck(long,long):a => -a
AOIU_98:272:long_mulAndCheck(long,long):a => -a
AOIU_99:273:long_mulAndCheck(long,long):b => -b
AOIU_100:274:long_mulAndCheck(long,long):a => -a
AOIU_101:274:long_mulAndCheck(long,long):Long.MAX_VALUE => -Long.MAX_VALUE
AOIU_102:275:long_mulAndCheck(long,long):a => -a
AOIU_103:280:long_mulAndCheck(long,long):b => -b
AOIU_104:281:long_mulAndCheck(long,long):Long.MIN_VALUE => -Long.MIN_VALUE
AOIU_105:281:long_mulAndCheck(long,long):a => -a
AOIU_106:282:long_mulAndCheck(long,long):a => -a
AOIU_107:291:long_mulAndCheck(long,long):a => -a
AOIU_108:292:long_mulAndCheck(long,long):a => -a
AOIU_109:292:long_mulAndCheck(long,long):Long.MAX_VALUE => -Long.MAX_VALUE
AOIU_110:293:long_mulAndCheck(long,long):a => -a
AOIU_111:302:long_mulAndCheck(long,long):ret => -ret
AOIU_112:308:double_nextAfter(double,double):d => -d
AOIU_113:310:double_nextAfter(double,double):d => -d
AOIU_114:311:double_nextAfter(double,double):direction => -direction
AOIU_115:311:double_nextAfter(double,double):Double.MIN_VALUE => -Double.MIN_VALUE
AOIU_116:314:double_nextAfter(double,double):d => -d
AOIU_117:318:double_nextAfter(double,double):d => -d
AOIU_118:318:double_nextAfter(double,double):direction => -direction
AOIU_119:319:double_nextAfter(double,double):mantissa => -mantissa
AOIU_120:325:double_nextAfter(double,double):mantissa => -mantissa
AOIU_121:335:double_normalizeAngle(double,double):a => -a
AOIU_122:340:double_round(double,int):x => -x
AOIU_123:340:double_round(double,int):scale => -scale
AOIU_124:340:double_round(double,int):BigDecimal.ROUND_HALF_UP => -BigDecimal.ROUND_HALF_UP
AOIU_125:346:double_round(double,int,int):x => -x
AOIU_126:346:double_round(double,int,int):scale => -scale
AOIU_127:346:double_round(double,int,int):roundingMethod => -roundingMethod
AOIU_128:348:double_round(double,int,int):x => -x
AOIU_129:349:double_round(double,int,int):x => -x
AOIU_130:351:double_round(double,int,int):Double.NaN => -Double.NaN
AOIU_131:358:float_round(float,int):x => -x
AOIU_132:358:float_round(float,int):scale => -scale
AOIU_133:358:float_round(float,int):BigDecimal.ROUND_HALF_UP => -BigDecimal.ROUND_HALF_UP
AOIU_134:363:float_round(float,int,int):x => -x
AOIU_135:364:float_round(float,int,int):scale => -scale
AOIU_136:364:float_round(float,int,int):sign => -sign
AOIU_137:365:float_round(float,int,int):x => -x
AOIU_138:365:float_round(float,int,int):sign => -sign
AOIU_139:365:float_round(float,int,int):roundingMethod => -roundingMethod
AOIU_140:365:float_round(float,int,int):factor => -factor
AOIU_141:370:double_roundUnscaled(double,double,int):roundingMethod => -roundingMethod
AOIU_142:371:double_roundUnscaled(double,double,int):BigDecimal.ROUND_CEILING => -BigDecimal.ROUND_CEILING
AOIU_143:372:double_roundUnscaled(double,double,int):sign => -sign
AOIU_144:373:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_145:373:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => -Double.NEGATIVE_INFINITY
AOIU_146:375:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_147:375:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => -Double.POSITIVE_INFINITY
AOIU_148:379:double_roundUnscaled(double,double,int):BigDecimal.ROUND_DOWN => -BigDecimal.ROUND_DOWN
AOIU_149:380:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_150:380:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => -Double.NEGATIVE_INFINITY
AOIU_151:383:double_roundUnscaled(double,double,int):BigDecimal.ROUND_FLOOR => -BigDecimal.ROUND_FLOOR
AOIU_152:384:double_roundUnscaled(double,double,int):sign => -sign
AOIU_153:385:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_154:385:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => -Double.POSITIVE_INFINITY
AOIU_155:387:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_156:387:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => -Double.NEGATIVE_INFINITY
AOIU_157:391:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_DOWN => -BigDecimal.ROUND_HALF_DOWN
AOIU_158:393:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_159:393:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => -Double.NEGATIVE_INFINITY
AOIU_160:394:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_161:395:double_roundUnscaled(double,double,int):fraction => -fraction
AOIU_162:396:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_163:398:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_164:403:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_EVEN => -BigDecimal.ROUND_HALF_EVEN
AOIU_165:405:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_166:406:double_roundUnscaled(double,double,int):fraction => -fraction
AOIU_167:407:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_168:409:double_roundUnscaled(double,double,int):fraction => -fraction
AOIU_169:410:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_170:412:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_171:412:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_172:413:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_173:415:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_174:422:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_UP => -BigDecimal.ROUND_HALF_UP
AOIU_175:424:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_176:424:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => -Double.POSITIVE_INFINITY
AOIU_177:425:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_178:426:double_roundUnscaled(double,double,int):fraction => -fraction
AOIU_179:427:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_180:429:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_181:434:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UNNECESSARY => -BigDecimal.ROUND_UNNECESSARY
AOIU_182:435:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_183:435:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_184:440:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UP => -BigDecimal.ROUND_UP
AOIU_185:441:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_186:441:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => -Double.POSITIVE_INFINITY
AOIU_187:448:double_roundUnscaled(double,double,int):unscaled => -unscaled
AOIU_188:453:byte_sign(byte):x => -x
AOIU_189:453:byte_sign(byte):ZB => -ZB
AOIU_190:453:byte_sign(byte):ZB => -ZB
AOIU_191:453:byte_sign(byte):x => -x
AOIU_192:453:byte_sign(byte):ZB => -ZB
AOIU_193:453:byte_sign(byte):PB => -PB
AOIU_194:453:byte_sign(byte):NB => -NB
AOIU_195:458:double_sign(double):x => -x
AOIU_196:459:double_sign(double):Double.NaN => -Double.NaN
AOIU_197:461:double_sign(double):x => -x
AOIU_198:461:double_sign(double):x => -x
AOIU_199:466:float_sign(float):x => -x
AOIU_200:467:float_sign(float):Float.NaN => -Float.NaN
AOIU_201:469:float_sign(float):x => -x
AOIU_202:469:float_sign(float):x => -x
AOIU_203:474:int_sign(int):x => -x
AOIU_204:474:int_sign(int):x => -x
AOIU_205:479:long_sign(long):x => -x
AOIU_206:479:long_sign(long):x => -x
AOIU_207:484:short_sign(short):x => -x
AOIU_208:484:short_sign(short):ZS => -ZS
AOIU_209:484:short_sign(short):ZS => -ZS
AOIU_210:484:short_sign(short):x => -x
AOIU_211:484:short_sign(short):ZS => -ZS
AOIU_212:484:short_sign(short):PS => -PS
AOIU_213:484:short_sign(short):NS => -NS
AOIU_214:489:double_sinh(double):x => -x
AOIU_215:494:int_subAndCheck(int,int):x => -x
AOIU_216:498:int_subAndCheck(int,int):s => -s
AOIU_217:505:long_subAndCheck(long,long):b => -b
AOIU_218:505:long_subAndCheck(long,long):Long.MIN_VALUE => -Long.MIN_VALUE
AOIU_219:506:long_subAndCheck(long,long):a => -a
AOIU_220:507:long_subAndCheck(long,long):a => -a
AOIU_221:512:long_subAndCheck(long,long):a => -a
AOIU_222:514:long_subAndCheck(long,long):ret => -ret
AOIS_5:31:int_addAndCheck(int,int):x => ++x
AOIS_6:31:int_addAndCheck(int,int):x => --x
AOIS_7:31:int_addAndCheck(int,int):x => x++
AOIS_8:31:int_addAndCheck(int,int):x => x--
AOIS_9:31:int_addAndCheck(int,int):y => ++y
AOIS_10:31:int_addAndCheck(int,int):y => --y
AOIS_11:31:int_addAndCheck(int,int):y => y++
AOIS_12:31:int_addAndCheck(int,int):y => y--
AOIS_13:32:int_addAndCheck(int,int):s => ++s
AOIS_14:32:int_addAndCheck(int,int):s => --s
AOIS_15:32:int_addAndCheck(int,int):s => s++
AOIS_16:32:int_addAndCheck(int,int):s => s--
AOIS_17:32:int_addAndCheck(int,int):Integer.MIN_VALUE => ++Integer.MIN_VALUE
AOIS_18:32:int_addAndCheck(int,int):Integer.MIN_VALUE => --Integer.MIN_VALUE
AOIS_19:32:int_addAndCheck(int,int):Integer.MIN_VALUE => Integer.MIN_VALUE++
AOIS_20:32:int_addAndCheck(int,int):Integer.MIN_VALUE => Integer.MIN_VALUE--
AOIS_21:32:int_addAndCheck(int,int):s => ++s
AOIS_22:32:int_addAndCheck(int,int):s => --s
AOIS_23:32:int_addAndCheck(int,int):s => s++
AOIS_24:32:int_addAndCheck(int,int):s => s--
AOIS_25:32:int_addAndCheck(int,int):Integer.MAX_VALUE => ++Integer.MAX_VALUE
AOIS_26:32:int_addAndCheck(int,int):Integer.MAX_VALUE => --Integer.MAX_VALUE
AOIS_27:32:int_addAndCheck(int,int):Integer.MAX_VALUE => Integer.MAX_VALUE++
AOIS_28:32:int_addAndCheck(int,int):Integer.MAX_VALUE => Integer.MAX_VALUE--
AOIS_29:35:int_addAndCheck(int,int):s => s++
AOIS_30:35:int_addAndCheck(int,int):s => s--
AOIS_31:40:long_addAndCheck(long,long):a => a++
AOIS_32:40:long_addAndCheck(long,long):a => a--
AOIS_33:40:long_addAndCheck(long,long):b => b++
AOIS_34:40:long_addAndCheck(long,long):b => b--
AOIS_35:46:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_36:46:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_37:46:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_38:46:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_39:46:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_40:46:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_41:46:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_42:46:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_43:47:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_44:47:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_45:47:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_46:47:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_47:47:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_48:47:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_49:47:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_50:47:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_51:49:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_52:49:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_53:49:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_54:49:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_55:50:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_56:50:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_57:50:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_58:50:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_59:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE => ++Long.MIN_VALUE
AOIS_60:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE => --Long.MIN_VALUE
AOIS_61:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE => Long.MIN_VALUE++
AOIS_62:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE => Long.MIN_VALUE--
AOIS_63:51:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_64:51:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_65:51:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_66:51:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_67:51:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_68:51:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_69:52:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_70:52:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_71:52:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_72:52:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_73:52:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_74:52:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_75:52:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_76:52:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_77:57:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_78:57:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_79:57:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_80:57:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_81:57:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_82:57:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_83:57:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_84:57:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_85:60:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_86:60:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_87:60:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_88:60:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_89:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE => ++Long.MAX_VALUE
AOIS_90:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE => --Long.MAX_VALUE
AOIS_91:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE => Long.MAX_VALUE++
AOIS_92:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE => Long.MAX_VALUE--
AOIS_93:60:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_94:60:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_95:60:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_96:60:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_97:61:long_addAndCheck(long,long,java.lang.String):a => ++a
AOIS_98:61:long_addAndCheck(long,long,java.lang.String):a => --a
AOIS_99:61:long_addAndCheck(long,long,java.lang.String):a => a++
AOIS_100:61:long_addAndCheck(long,long,java.lang.String):a => a--
AOIS_101:61:long_addAndCheck(long,long,java.lang.String):b => ++b
AOIS_102:61:long_addAndCheck(long,long,java.lang.String):b => --b
AOIS_103:61:long_addAndCheck(long,long,java.lang.String):b => b++
AOIS_104:61:long_addAndCheck(long,long,java.lang.String):b => b--
AOIS_105:67:long_addAndCheck(long,long,java.lang.String):ret => ret++
AOIS_106:67:long_addAndCheck(long,long,java.lang.String):ret => ret--
AOIS_107:72:long_binomialCoefficient(int,int):n => ++n
AOIS_108:72:long_binomialCoefficient(int,int):n => --n
AOIS_109:72:long_binomialCoefficient(int,int):n => n++
AOIS_110:72:long_binomialCoefficient(int,int):n => n--
AOIS_111:72:long_binomialCoefficient(int,int):k => ++k
AOIS_112:72:long_binomialCoefficient(int,int):k => --k
AOIS_113:72:long_binomialCoefficient(int,int):k => k++
AOIS_114:72:long_binomialCoefficient(int,int):k => k--
AOIS_115:75:long_binomialCoefficient(int,int):n => ++n
AOIS_116:75:long_binomialCoefficient(int,int):n => --n
AOIS_117:75:long_binomialCoefficient(int,int):n => n++
AOIS_118:75:long_binomialCoefficient(int,int):n => n--
AOIS_119:78:long_binomialCoefficient(int,int):n => ++n
AOIS_120:78:long_binomialCoefficient(int,int):n => --n
AOIS_121:78:long_binomialCoefficient(int,int):n => n++
AOIS_122:78:long_binomialCoefficient(int,int):n => n--
AOIS_123:78:long_binomialCoefficient(int,int):k => ++k
AOIS_124:78:long_binomialCoefficient(int,int):k => --k
AOIS_125:78:long_binomialCoefficient(int,int):k => k++
AOIS_126:78:long_binomialCoefficient(int,int):k => k--
AOIS_127:78:long_binomialCoefficient(int,int):k => ++k
AOIS_128:78:long_binomialCoefficient(int,int):k => --k
AOIS_129:78:long_binomialCoefficient(int,int):k => k++
AOIS_130:78:long_binomialCoefficient(int,int):k => k--
AOIS_131:81:long_binomialCoefficient(int,int):k => ++k
AOIS_132:81:long_binomialCoefficient(int,int):k => --k
AOIS_133:81:long_binomialCoefficient(int,int):k => k++
AOIS_134:81:long_binomialCoefficient(int,int):k => k--
AOIS_135:81:long_binomialCoefficient(int,int):k => ++k
AOIS_136:81:long_binomialCoefficient(int,int):k => --k
AOIS_137:81:long_binomialCoefficient(int,int):k => k++
AOIS_138:81:long_binomialCoefficient(int,int):k => k--
AOIS_139:81:long_binomialCoefficient(int,int):n => ++n
AOIS_140:81:long_binomialCoefficient(int,int):n => --n
AOIS_141:81:long_binomialCoefficient(int,int):n => n++
AOIS_142:81:long_binomialCoefficient(int,int):n => n--
AOIS_143:82:long_binomialCoefficient(int,int):n => n++
AOIS_144:82:long_binomialCoefficient(int,int):n => n--
AOIS_145:84:long_binomialCoefficient(int,int):n => n++
AOIS_146:84:long_binomialCoefficient(int,int):n => n--
AOIS_147:84:long_binomialCoefficient(int,int):k => k++
AOIS_148:84:long_binomialCoefficient(int,int):k => k--
AOIS_149:85:long_binomialCoefficient(int,int):result => ++result
AOIS_150:85:long_binomialCoefficient(int,int):result => --result
AOIS_151:85:long_binomialCoefficient(int,int):result => result++
AOIS_152:85:long_binomialCoefficient(int,int):result => result--
AOIS_153:85:long_binomialCoefficient(int,int):Long.MAX_VALUE => ++Long.MAX_VALUE
AOIS_154:85:long_binomialCoefficient(int,int):Long.MAX_VALUE => --Long.MAX_VALUE
AOIS_155:85:long_binomialCoefficient(int,int):Long.MAX_VALUE => Long.MAX_VALUE++
AOIS_156:85:long_binomialCoefficient(int,int):Long.MAX_VALUE => Long.MAX_VALUE--
AOIS_157:88:long_binomialCoefficient(int,int):result => result++
AOIS_158:88:long_binomialCoefficient(int,int):result => result--
AOIS_159:93:double_binomialCoefficientDouble(int,int):n => ++n
AOIS_160:93:double_binomialCoefficientDouble(int,int):n => --n
AOIS_161:93:double_binomialCoefficientDouble(int,int):n => n++
AOIS_162:93:double_binomialCoefficientDouble(int,int):n => n--
AOIS_163:93:double_binomialCoefficientDouble(int,int):k => ++k
AOIS_164:93:double_binomialCoefficientDouble(int,int):k => --k
AOIS_165:93:double_binomialCoefficientDouble(int,int):k => k++
AOIS_166:93:double_binomialCoefficientDouble(int,int):k => k--
AOIS_167:98:double_binomialCoefficientLog(int,int):n => ++n
AOIS_168:98:double_binomialCoefficientLog(int,int):n => --n
AOIS_169:98:double_binomialCoefficientLog(int,int):n => n++
AOIS_170:98:double_binomialCoefficientLog(int,int):n => n--
AOIS_171:98:double_binomialCoefficientLog(int,int):k => ++k
AOIS_172:98:double_binomialCoefficientLog(int,int):k => --k
AOIS_173:98:double_binomialCoefficientLog(int,int):k => k++
AOIS_174:98:double_binomialCoefficientLog(int,int):k => k--
AOIS_175:101:double_binomialCoefficientLog(int,int):n => ++n
AOIS_176:101:double_binomialCoefficientLog(int,int):n => --n
AOIS_177:101:double_binomialCoefficientLog(int,int):n => n++
AOIS_178:101:double_binomialCoefficientLog(int,int):n => n--
AOIS_179:104:double_binomialCoefficientLog(int,int):n => ++n
AOIS_180:104:double_binomialCoefficientLog(int,int):n => --n
AOIS_181:104:double_binomialCoefficientLog(int,int):n => n++
AOIS_182:104:double_binomialCoefficientLog(int,int):n => n--
AOIS_183:104:double_binomialCoefficientLog(int,int):k => ++k
AOIS_184:104:double_binomialCoefficientLog(int,int):k => --k
AOIS_185:104:double_binomialCoefficientLog(int,int):k => k++
AOIS_186:104:double_binomialCoefficientLog(int,int):k => k--
AOIS_187:104:double_binomialCoefficientLog(int,int):k => ++k
AOIS_188:104:double_binomialCoefficientLog(int,int):k => --k
AOIS_189:104:double_binomialCoefficientLog(int,int):k => k++
AOIS_190:104:double_binomialCoefficientLog(int,int):k => k--
AOIS_191:107:double_binomialCoefficientLog(int,int):k => ++k
AOIS_192:107:double_binomialCoefficientLog(int,int):k => --k
AOIS_193:107:double_binomialCoefficientLog(int,int):k => k++
AOIS_194:107:double_binomialCoefficientLog(int,int):k => k--
AOIS_195:107:double_binomialCoefficientLog(int,int):k => ++k
AOIS_196:107:double_binomialCoefficientLog(int,int):k => --k
AOIS_197:107:double_binomialCoefficientLog(int,int):k => k++
AOIS_198:107:double_binomialCoefficientLog(int,int):k => k--
AOIS_199:107:double_binomialCoefficientLog(int,int):n => ++n
AOIS_200:107:double_binomialCoefficientLog(int,int):n => --n
AOIS_201:107:double_binomialCoefficientLog(int,int):n => n++
AOIS_202:107:double_binomialCoefficientLog(int,int):n => n--
AOIS_203:108:double_binomialCoefficientLog(int,int):n => n++
AOIS_204:108:double_binomialCoefficientLog(int,int):n => n--
AOIS_205:111:double_binomialCoefficientLog(int,int):k => ++k
AOIS_206:111:double_binomialCoefficientLog(int,int):k => --k
AOIS_207:111:double_binomialCoefficientLog(int,int):k => k++
AOIS_208:111:double_binomialCoefficientLog(int,int):k => k--
AOIS_209:111:double_binomialCoefficientLog(int,int):i => ++i
AOIS_210:111:double_binomialCoefficientLog(int,int):i => --i
AOIS_211:111:double_binomialCoefficientLog(int,int):i => i++
AOIS_212:111:double_binomialCoefficientLog(int,int):i => i--
AOIS_213:111:double_binomialCoefficientLog(int,int):n => ++n
AOIS_214:111:double_binomialCoefficientLog(int,int):n => --n
AOIS_215:111:double_binomialCoefficientLog(int,int):n => n++
AOIS_216:111:double_binomialCoefficientLog(int,int):n => n--
AOIS_217:112:double_binomialCoefficientLog(int,int):i => ++i
AOIS_218:112:double_binomialCoefficientLog(int,int):i => --i
AOIS_219:112:double_binomialCoefficientLog(int,int):i => i++
AOIS_220:112:double_binomialCoefficientLog(int,int):i => i--
AOIS_221:114:double_binomialCoefficientLog(int,int):i => ++i
AOIS_222:114:double_binomialCoefficientLog(int,int):i => --i
AOIS_223:114:double_binomialCoefficientLog(int,int):i => i++
AOIS_224:114:double_binomialCoefficientLog(int,int):i => i--
AOIS_225:114:double_binomialCoefficientLog(int,int):n => ++n
AOIS_226:114:double_binomialCoefficientLog(int,int):n => --n
AOIS_227:114:double_binomialCoefficientLog(int,int):n => n++
AOIS_228:114:double_binomialCoefficientLog(int,int):n => n--
AOIS_229:114:double_binomialCoefficientLog(int,int):k => ++k
AOIS_230:114:double_binomialCoefficientLog(int,int):k => --k
AOIS_231:114:double_binomialCoefficientLog(int,int):k => k++
AOIS_232:114:double_binomialCoefficientLog(int,int):k => k--
AOIS_233:115:double_binomialCoefficientLog(int,int):i => ++i
AOIS_234:115:double_binomialCoefficientLog(int,int):i => --i
AOIS_235:115:double_binomialCoefficientLog(int,int):i => i++
AOIS_236:115:double_binomialCoefficientLog(int,int):i => i--
AOIS_237:117:double_binomialCoefficientLog(int,int):logSum => logSum++
AOIS_238:117:double_binomialCoefficientLog(int,int):logSum => logSum--
AOIS_239:122:double_cosh(double):x => ++x
AOIS_240:122:double_cosh(double):x => --x
AOIS_241:122:double_cosh(double):x => x++
AOIS_242:122:double_cosh(double):x => x--
AOIS_243:127:boolean_equals(double,double):x => ++x
AOIS_244:127:boolean_equals(double,double):x => --x
AOIS_245:127:boolean_equals(double,double):x => x++
AOIS_246:127:boolean_equals(double,double):x => x--
AOIS_247:127:boolean_equals(double,double):y => ++y
AOIS_248:127:boolean_equals(double,double):y => --y
AOIS_249:127:boolean_equals(double,double):y => y++
AOIS_250:127:boolean_equals(double,double):y => y--
AOIS_251:127:boolean_equals(double,double):x => ++x
AOIS_252:127:boolean_equals(double,double):x => --x
AOIS_253:127:boolean_equals(double,double):x => x++
AOIS_254:127:boolean_equals(double,double):x => x--
AOIS_255:127:boolean_equals(double,double):y => ++y
AOIS_256:127:boolean_equals(double,double):y => --y
AOIS_257:127:boolean_equals(double,double):y => y++
AOIS_258:127:boolean_equals(double,double):y => y--
AOIS_259:135:boolean_equals(double,double):x.length => ++x.length
AOIS_260:135:boolean_equals(double,double):x.length => --x.length
AOIS_261:135:boolean_equals(double,double):x.length => x.length++
AOIS_262:135:boolean_equals(double,double):x.length => x.length--
AOIS_263:135:boolean_equals(double,double):y.length => ++y.length
AOIS_264:135:boolean_equals(double,double):y.length => --y.length
AOIS_265:135:boolean_equals(double,double):y.length => y.length++
AOIS_266:135:boolean_equals(double,double):y.length => y.length--
AOIS_267:138:boolean_equals(double,double):i => ++i
AOIS_268:138:boolean_equals(double,double):i => --i
AOIS_269:138:boolean_equals(double,double):i => i++
AOIS_270:138:boolean_equals(double,double):i => i--
AOIS_271:138:boolean_equals(double,double):x.length => ++x.length
AOIS_272:138:boolean_equals(double,double):x.length => --x.length
AOIS_273:138:boolean_equals(double,double):x.length => x.length++
AOIS_274:138:boolean_equals(double,double):x.length => x.length--
AOIS_275:148:long_factorial(int):n => n++
AOIS_276:148:long_factorial(int):n => n--
AOIS_277:149:long_factorial(int):result => ++result
AOIS_278:149:long_factorial(int):result => --result
AOIS_279:149:long_factorial(int):result => result++
AOIS_280:149:long_factorial(int):result => result--
AOIS_281:149:long_factorial(int):Long.MAX_VALUE => ++Long.MAX_VALUE
AOIS_282:149:long_factorial(int):Long.MAX_VALUE => --Long.MAX_VALUE
AOIS_283:149:long_factorial(int):Long.MAX_VALUE => Long.MAX_VALUE++
AOIS_284:149:long_factorial(int):Long.MAX_VALUE => Long.MAX_VALUE--
AOIS_285:152:long_factorial(int):result => result++
AOIS_286:152:long_factorial(int):result => result--
AOIS_287:157:double_factorialDouble(int):n => ++n
AOIS_288:157:double_factorialDouble(int):n => --n
AOIS_289:157:double_factorialDouble(int):n => n++
AOIS_290:157:double_factorialDouble(int):n => n--
AOIS_291:160:double_factorialDouble(int):n => ++n
AOIS_292:160:double_factorialDouble(int):n => --n
AOIS_293:160:double_factorialDouble(int):n => n++
AOIS_294:160:double_factorialDouble(int):n => n--
AOIS_295:165:double_factorialLog(int):n => ++n
AOIS_296:165:double_factorialLog(int):n => --n
AOIS_297:165:double_factorialLog(int):n => n++
AOIS_298:165:double_factorialLog(int):n => n--
AOIS_299:169:double_factorialLog(int):i => ++i
AOIS_300:169:double_factorialLog(int):i => --i
AOIS_301:169:double_factorialLog(int):i => i++
AOIS_302:169:double_factorialLog(int):i => i--
AOIS_303:169:double_factorialLog(int):n => ++n
AOIS_304:169:double_factorialLog(int):n => --n
AOIS_305:169:double_factorialLog(int):n => n++
AOIS_306:169:double_factorialLog(int):n => n--
AOIS_307:170:double_factorialLog(int):i => ++i
AOIS_308:170:double_factorialLog(int):i => --i
AOIS_309:170:double_factorialLog(int):i => i++
AOIS_310:170:double_factorialLog(int):i => i--
AOIS_311:172:double_factorialLog(int):logSum => logSum++
AOIS_312:172:double_factorialLog(int):logSum => logSum--
AOIS_313:177:int_gcd(int,int):u => ++u
AOIS_314:177:int_gcd(int,int):u => --u
AOIS_315:177:int_gcd(int,int):u => u++
AOIS_316:177:int_gcd(int,int):u => u--
AOIS_317:177:int_gcd(int,int):v => ++v
AOIS_318:177:int_gcd(int,int):v => --v
AOIS_319:177:int_gcd(int,int):v => v++
AOIS_320:177:int_gcd(int,int):v => v--
AOIS_321:178:int_gcd(int,int):u => ++u
AOIS_322:178:int_gcd(int,int):u => --u
AOIS_323:178:int_gcd(int,int):u => u++
AOIS_324:178:int_gcd(int,int):u => u--
AOIS_325:178:int_gcd(int,int):v => ++v
AOIS_326:178:int_gcd(int,int):v => --v
AOIS_327:178:int_gcd(int,int):v => v++
AOIS_328:178:int_gcd(int,int):v => v--
AOIS_329:180:int_gcd(int,int):u => ++u
AOIS_330:180:int_gcd(int,int):u => --u
AOIS_331:180:int_gcd(int,int):u => u++
AOIS_332:180:int_gcd(int,int):u => u--
AOIS_333:183:int_gcd(int,int):v => ++v
AOIS_334:183:int_gcd(int,int):v => --v
AOIS_335:183:int_gcd(int,int):v => v++
AOIS_336:183:int_gcd(int,int):v => v--
AOIS_337:187:int_gcd(int,int):u => ++u
AOIS_338:187:int_gcd(int,int):u => --u
AOIS_339:187:int_gcd(int,int):u => u++
AOIS_340:187:int_gcd(int,int):u => u--
AOIS_341:187:int_gcd(int,int):v => ++v
AOIS_342:187:int_gcd(int,int):v => --v
AOIS_343:187:int_gcd(int,int):v => v++
AOIS_344:187:int_gcd(int,int):v => v--
AOIS_345:187:int_gcd(int,int):k => ++k
AOIS_346:187:int_gcd(int,int):k => --k
AOIS_347:187:int_gcd(int,int):k => k++
AOIS_348:187:int_gcd(int,int):k => k--
AOIS_349:192:int_gcd(int,int):k => ++k
AOIS_350:192:int_gcd(int,int):k => --k
AOIS_351:192:int_gcd(int,int):k => k++
AOIS_352:192:int_gcd(int,int):k => k--
AOIS_353:195:int_gcd(int,int):u => ++u
AOIS_354:195:int_gcd(int,int):u => --u
AOIS_355:195:int_gcd(int,int):u => u++
AOIS_356:195:int_gcd(int,int):u => u--
AOIS_357:195:int_gcd(int,int):v => v++
AOIS_358:195:int_gcd(int,int):v => v--
AOIS_359:197:int_gcd(int,int):t => ++t
AOIS_360:197:int_gcd(int,int):t => --t
AOIS_361:197:int_gcd(int,int):t => t++
AOIS_362:197:int_gcd(int,int):t => t--
AOIS_363:200:int_gcd(int,int):t => ++t
AOIS_364:200:int_gcd(int,int):t => --t
AOIS_365:200:int_gcd(int,int):t => t++
AOIS_366:200:int_gcd(int,int):t => t--
AOIS_367:203:int_gcd(int,int):t => ++t
AOIS_368:203:int_gcd(int,int):t => --t
AOIS_369:203:int_gcd(int,int):t => t++
AOIS_370:203:int_gcd(int,int):t => t--
AOIS_371:205:int_gcd(int,int):v => ++v
AOIS_372:205:int_gcd(int,int):v => --v
AOIS_373:205:int_gcd(int,int):v => v++
AOIS_374:205:int_gcd(int,int):v => v--
AOIS_375:205:int_gcd(int,int):u => ++u
AOIS_376:205:int_gcd(int,int):u => --u
AOIS_377:205:int_gcd(int,int):u => u++
AOIS_378:205:int_gcd(int,int):u => u--
AOIS_379:206:int_gcd(int,int):t => ++t
AOIS_380:206:int_gcd(int,int):t => --t
AOIS_381:206:int_gcd(int,int):t => t++
AOIS_382:206:int_gcd(int,int):t => t--
AOIS_383:207:int_gcd(int,int):k => ++k
AOIS_384:207:int_gcd(int,int):k => --k
AOIS_385:207:int_gcd(int,int):k => k++
AOIS_386:207:int_gcd(int,int):k => k--
AOIS_387:212:byte_indicator(byte):x => ++x
AOIS_388:212:byte_indicator(byte):x => --x
AOIS_389:212:byte_indicator(byte):x => x++
AOIS_390:212:byte_indicator(byte):x => x--
AOIS_391:212:byte_indicator(byte):ZB => ++ZB
AOIS_392:212:byte_indicator(byte):ZB => --ZB
AOIS_393:212:byte_indicator(byte):ZB => ZB++
AOIS_394:212:byte_indicator(byte):ZB => ZB--
AOIS_395:212:byte_indicator(byte):PB => PB++
AOIS_396:212:byte_indicator(byte):PB => PB--
AOIS_397:212:byte_indicator(byte):NB => NB++
AOIS_398:212:byte_indicator(byte):NB => NB--
AOIS_399:217:double_indicator(double):x => x++
AOIS_400:217:double_indicator(double):x => x--
AOIS_401:218:double_indicator(double):Double.NaN => Double.NaN++
AOIS_402:218:double_indicator(double):Double.NaN => Double.NaN--
AOIS_403:220:double_indicator(double):x => ++x
AOIS_404:220:double_indicator(double):x => --x
AOIS_405:220:double_indicator(double):x => x++
AOIS_406:220:double_indicator(double):x => x--
AOIS_407:225:float_indicator(float):x => x++
AOIS_408:225:float_indicator(float):x => x--
AOIS_409:226:float_indicator(float):Float.NaN => Float.NaN++
AOIS_410:226:float_indicator(float):Float.NaN => Float.NaN--
AOIS_411:228:float_indicator(float):x => ++x
AOIS_412:228:float_indicator(float):x => --x
AOIS_413:228:float_indicator(float):x => x++
AOIS_414:228:float_indicator(float):x => x--
AOIS_415:233:int_indicator(int):x => ++x
AOIS_416:233:int_indicator(int):x => --x
AOIS_417:233:int_indicator(int):x => x++
AOIS_418:233:int_indicator(int):x => x--
AOIS_419:238:long_indicator(long):x => ++x
AOIS_420:238:long_indicator(long):x => --x
AOIS_421:238:long_indicator(long):x => x++
AOIS_422:238:long_indicator(long):x => x--
AOIS_423:243:short_indicator(short):x => ++x
AOIS_424:243:short_indicator(short):x => --x
AOIS_425:243:short_indicator(short):x => x++
AOIS_426:243:short_indicator(short):x => x--
AOIS_427:243:short_indicator(short):ZS => ++ZS
AOIS_428:243:short_indicator(short):ZS => --ZS
AOIS_429:243:short_indicator(short):ZS => ZS++
AOIS_430:243:short_indicator(short):ZS => ZS--
AOIS_431:243:short_indicator(short):PS => PS++
AOIS_432:243:short_indicator(short):PS => PS--
AOIS_433:243:short_indicator(short):NS => NS++
AOIS_434:243:short_indicator(short):NS => NS--
AOIS_435:248:int_lcm(int,int):a => ++a
AOIS_436:248:int_lcm(int,int):a => --a
AOIS_437:248:int_lcm(int,int):a => a++
AOIS_438:248:int_lcm(int,int):a => a--
AOIS_439:248:int_lcm(int,int):a => ++a
AOIS_440:248:int_lcm(int,int):a => --a
AOIS_441:248:int_lcm(int,int):a => a++
AOIS_442:248:int_lcm(int,int):a => a--
AOIS_443:248:int_lcm(int,int):b => ++b
AOIS_444:248:int_lcm(int,int):b => --b
AOIS_445:248:int_lcm(int,int):b => b++
AOIS_446:248:int_lcm(int,int):b => b--
AOIS_447:248:int_lcm(int,int):b => b++
AOIS_448:248:int_lcm(int,int):b => b--
AOIS_449:253:double_log(double,double):x => ++x
AOIS_450:253:double_log(double,double):x => --x
AOIS_451:253:double_log(double,double):x => x++
AOIS_452:253:double_log(double,double):x => x--
AOIS_453:253:double_log(double,double):base => ++base
AOIS_454:253:double_log(double,double):base => --base
AOIS_455:253:double_log(double,double):base => base++
AOIS_456:253:double_log(double,double):base => base--
AOIS_457:258:int_mulAndCheck(int,int):x => ++x
AOIS_458:258:int_mulAndCheck(int,int):x => --x
AOIS_459:258:int_mulAndCheck(int,int):x => x++
AOIS_460:258:int_mulAndCheck(int,int):x => x--
AOIS_461:258:int_mulAndCheck(int,int):y => ++y
AOIS_462:258:int_mulAndCheck(int,int):y => --y
AOIS_463:258:int_mulAndCheck(int,int):y => y++
AOIS_464:258:int_mulAndCheck(int,int):y => y--
AOIS_465:259:int_mulAndCheck(int,int):m => ++m
AOIS_466:259:int_mulAndCheck(int,int):m => --m
AOIS_467:259:int_mulAndCheck(int,int):m => m++
AOIS_468:259:int_mulAndCheck(int,int):m => m--
AOIS_469:259:int_mulAndCheck(int,int):Integer.MIN_VALUE => ++Integer.MIN_VALUE
AOIS_470:259:int_mulAndCheck(int,int):Integer.MIN_VALUE => --Integer.MIN_VALUE
AOIS_471:259:int_mulAndCheck(int,int):Integer.MIN_VALUE => Integer.MIN_VALUE++
AOIS_472:259:int_mulAndCheck(int,int):Integer.MIN_VALUE => Integer.MIN_VALUE--
AOIS_473:259:int_mulAndCheck(int,int):m => ++m
AOIS_474:259:int_mulAndCheck(int,int):m => --m
AOIS_475:259:int_mulAndCheck(int,int):m => m++
AOIS_476:259:int_mulAndCheck(int,int):m => m--
AOIS_477:259:int_mulAndCheck(int,int):Integer.MAX_VALUE => ++Integer.MAX_VALUE
AOIS_478:259:int_mulAndCheck(int,int):Integer.MAX_VALUE => --Integer.MAX_VALUE
AOIS_479:259:int_mulAndCheck(int,int):Integer.MAX_VALUE => Integer.MAX_VALUE++
AOIS_480:259:int_mulAndCheck(int,int):Integer.MAX_VALUE => Integer.MAX_VALUE--
AOIS_481:262:int_mulAndCheck(int,int):m => m++
AOIS_482:262:int_mulAndCheck(int,int):m => m--
AOIS_483:269:long_mulAndCheck(long,long):a => ++a
AOIS_484:269:long_mulAndCheck(long,long):a => --a
AOIS_485:269:long_mulAndCheck(long,long):a => a++
AOIS_486:269:long_mulAndCheck(long,long):a => a--
AOIS_487:269:long_mulAndCheck(long,long):b => ++b
AOIS_488:269:long_mulAndCheck(long,long):b => --b
AOIS_489:269:long_mulAndCheck(long,long):b => b++
AOIS_490:269:long_mulAndCheck(long,long):b => b--
AOIS_491:270:long_mulAndCheck(long,long):b => ++b
AOIS_492:270:long_mulAndCheck(long,long):b => --b
AOIS_493:270:long_mulAndCheck(long,long):b => b++
AOIS_494:270:long_mulAndCheck(long,long):b => b--
AOIS_495:270:long_mulAndCheck(long,long):a => ++a
AOIS_496:270:long_mulAndCheck(long,long):a => --a
AOIS_497:270:long_mulAndCheck(long,long):a => a++
AOIS_498:270:long_mulAndCheck(long,long):a => a--
AOIS_499:272:long_mulAndCheck(long,long):a => ++a
AOIS_500:272:long_mulAndCheck(long,long):a => --a
AOIS_501:272:long_mulAndCheck(long,long):a => a++
AOIS_502:272:long_mulAndCheck(long,long):a => a--
AOIS_503:273:long_mulAndCheck(long,long):b => ++b
AOIS_504:273:long_mulAndCheck(long,long):b => --b
AOIS_505:273:long_mulAndCheck(long,long):b => b++
AOIS_506:273:long_mulAndCheck(long,long):b => b--
AOIS_507:274:long_mulAndCheck(long,long):a => ++a
AOIS_508:274:long_mulAndCheck(long,long):a => --a
AOIS_509:274:long_mulAndCheck(long,long):a => a++
AOIS_510:274:long_mulAndCheck(long,long):a => a--
AOIS_511:274:long_mulAndCheck(long,long):Long.MAX_VALUE => ++Long.MAX_VALUE
AOIS_512:274:long_mulAndCheck(long,long):Long.MAX_VALUE => --Long.MAX_VALUE
AOIS_513:274:long_mulAndCheck(long,long):Long.MAX_VALUE => Long.MAX_VALUE++
AOIS_514:274:long_mulAndCheck(long,long):Long.MAX_VALUE => Long.MAX_VALUE--
AOIS_515:274:long_mulAndCheck(long,long):b => ++b
AOIS_516:274:long_mulAndCheck(long,long):b => --b
AOIS_517:274:long_mulAndCheck(long,long):b => b++
AOIS_518:274:long_mulAndCheck(long,long):b => b--
AOIS_519:275:long_mulAndCheck(long,long):a => ++a
AOIS_520:275:long_mulAndCheck(long,long):a => --a
AOIS_521:275:long_mulAndCheck(long,long):a => a++
AOIS_522:275:long_mulAndCheck(long,long):a => a--
AOIS_523:275:long_mulAndCheck(long,long):b => ++b
AOIS_524:275:long_mulAndCheck(long,long):b => --b
AOIS_525:275:long_mulAndCheck(long,long):b => b++
AOIS_526:275:long_mulAndCheck(long,long):b => b--
AOIS_527:280:long_mulAndCheck(long,long):b => ++b
AOIS_528:280:long_mulAndCheck(long,long):b => --b
AOIS_529:280:long_mulAndCheck(long,long):b => b++
AOIS_530:280:long_mulAndCheck(long,long):b => b--
AOIS_531:281:long_mulAndCheck(long,long):Long.MIN_VALUE => ++Long.MIN_VALUE
AOIS_532:281:long_mulAndCheck(long,long):Long.MIN_VALUE => --Long.MIN_VALUE
AOIS_533:281:long_mulAndCheck(long,long):Long.MIN_VALUE => Long.MIN_VALUE++
AOIS_534:281:long_mulAndCheck(long,long):Long.MIN_VALUE => Long.MIN_VALUE--
AOIS_535:281:long_mulAndCheck(long,long):b => ++b
AOIS_536:281:long_mulAndCheck(long,long):b => --b
AOIS_537:281:long_mulAndCheck(long,long):b => b++
AOIS_538:281:long_mulAndCheck(long,long):b => b--
AOIS_539:281:long_mulAndCheck(long,long):a => a++
AOIS_540:281:long_mulAndCheck(long,long):a => a--
AOIS_541:282:long_mulAndCheck(long,long):a => ++a
AOIS_542:282:long_mulAndCheck(long,long):a => --a
AOIS_543:282:long_mulAndCheck(long,long):a => a++
AOIS_544:282:long_mulAndCheck(long,long):a => a--
AOIS_545:282:long_mulAndCheck(long,long):b => ++b
AOIS_546:282:long_mulAndCheck(long,long):b => --b
AOIS_547:282:long_mulAndCheck(long,long):b => b++
AOIS_548:282:long_mulAndCheck(long,long):b => b--
AOIS_549:291:long_mulAndCheck(long,long):a => ++a
AOIS_550:291:long_mulAndCheck(long,long):a => --a
AOIS_551:291:long_mulAndCheck(long,long):a => a++
AOIS_552:291:long_mulAndCheck(long,long):a => a--
AOIS_553:292:long_mulAndCheck(long,long):a => ++a
AOIS_554:292:long_mulAndCheck(long,long):a => --a
AOIS_555:292:long_mulAndCheck(long,long):a => a++
AOIS_556:292:long_mulAndCheck(long,long):a => a--
AOIS_557:292:long_mulAndCheck(long,long):Long.MAX_VALUE => ++Long.MAX_VALUE
AOIS_558:292:long_mulAndCheck(long,long):Long.MAX_VALUE => --Long.MAX_VALUE
AOIS_559:292:long_mulAndCheck(long,long):Long.MAX_VALUE => Long.MAX_VALUE++
AOIS_560:292:long_mulAndCheck(long,long):Long.MAX_VALUE => Long.MAX_VALUE--
AOIS_561:292:long_mulAndCheck(long,long):b => ++b
AOIS_562:292:long_mulAndCheck(long,long):b => --b
AOIS_563:292:long_mulAndCheck(long,long):b => b++
AOIS_564:292:long_mulAndCheck(long,long):b => b--
AOIS_565:293:long_mulAndCheck(long,long):a => ++a
AOIS_566:293:long_mulAndCheck(long,long):a => --a
AOIS_567:293:long_mulAndCheck(long,long):a => a++
AOIS_568:293:long_mulAndCheck(long,long):a => a--
AOIS_569:293:long_mulAndCheck(long,long):b => ++b
AOIS_570:293:long_mulAndCheck(long,long):b => --b
AOIS_571:293:long_mulAndCheck(long,long):b => b++
AOIS_572:293:long_mulAndCheck(long,long):b => b--
AOIS_573:302:long_mulAndCheck(long,long):ret => ret++
AOIS_574:302:long_mulAndCheck(long,long):ret => ret--
AOIS_575:307:double_nextAfter(double,double):d => ++d
AOIS_576:307:double_nextAfter(double,double):d => --d
AOIS_577:307:double_nextAfter(double,double):d => d++
AOIS_578:307:double_nextAfter(double,double):d => d--
AOIS_579:307:double_nextAfter(double,double):d => ++d
AOIS_580:307:double_nextAfter(double,double):d => --d
AOIS_581:307:double_nextAfter(double,double):d => d++
AOIS_582:307:double_nextAfter(double,double):d => d--
AOIS_583:308:double_nextAfter(double,double):d => d++
AOIS_584:308:double_nextAfter(double,double):d => d--
AOIS_585:310:double_nextAfter(double,double):d => ++d
AOIS_586:310:double_nextAfter(double,double):d => --d
AOIS_587:310:double_nextAfter(double,double):d => d++
AOIS_588:310:double_nextAfter(double,double):d => d--
AOIS_589:311:double_nextAfter(double,double):direction => ++direction
AOIS_590:311:double_nextAfter(double,double):direction => --direction
AOIS_591:311:double_nextAfter(double,double):direction => direction++
AOIS_592:311:double_nextAfter(double,double):direction => direction--
AOIS_593:311:double_nextAfter(double,double):Double.MIN_VALUE => Double.MIN_VALUE++
AOIS_594:311:double_nextAfter(double,double):Double.MIN_VALUE => Double.MIN_VALUE--
AOIS_595:314:double_nextAfter(double,double):d => d++
AOIS_596:314:double_nextAfter(double,double):d => d--
AOIS_597:315:double_nextAfter(double,double):bits => ++bits
AOIS_598:315:double_nextAfter(double,double):bits => --bits
AOIS_599:315:double_nextAfter(double,double):bits => bits++
AOIS_600:315:double_nextAfter(double,double):bits => bits--
AOIS_601:316:double_nextAfter(double,double):bits => ++bits
AOIS_602:316:double_nextAfter(double,double):bits => --bits
AOIS_603:316:double_nextAfter(double,double):bits => bits++
AOIS_604:316:double_nextAfter(double,double):bits => bits--
AOIS_605:317:double_nextAfter(double,double):bits => ++bits
AOIS_606:317:double_nextAfter(double,double):bits => --bits
AOIS_607:317:double_nextAfter(double,double):bits => bits++
AOIS_608:317:double_nextAfter(double,double):bits => bits--
AOIS_609:318:double_nextAfter(double,double):d => ++d
AOIS_610:318:double_nextAfter(double,double):d => --d
AOIS_611:318:double_nextAfter(double,double):d => d++
AOIS_612:318:double_nextAfter(double,double):d => d--
AOIS_613:318:double_nextAfter(double,double):direction => ++direction
AOIS_614:318:double_nextAfter(double,double):direction => --direction
AOIS_615:318:double_nextAfter(double,double):direction => direction++
AOIS_616:318:double_nextAfter(double,double):direction => direction--
AOIS_617:318:double_nextAfter(double,double):d => ++d
AOIS_618:318:double_nextAfter(double,double):d => --d
AOIS_619:318:double_nextAfter(double,double):d => d++
AOIS_620:318:double_nextAfter(double,double):d => d--
AOIS_621:319:double_nextAfter(double,double):mantissa => ++mantissa
AOIS_622:319:double_nextAfter(double,double):mantissa => --mantissa
AOIS_623:319:double_nextAfter(double,double):mantissa => mantissa++
AOIS_624:319:double_nextAfter(double,double):mantissa => mantissa--
AOIS_625:320:double_nextAfter(double,double):sign => ++sign
AOIS_626:320:double_nextAfter(double,double):sign => --sign
AOIS_627:320:double_nextAfter(double,double):sign => sign++
AOIS_628:320:double_nextAfter(double,double):sign => sign--
AOIS_629:320:double_nextAfter(double,double):exponent => ++exponent
AOIS_630:320:double_nextAfter(double,double):exponent => --exponent
AOIS_631:320:double_nextAfter(double,double):exponent => exponent++
AOIS_632:320:double_nextAfter(double,double):exponent => exponent--
AOIS_633:322:double_nextAfter(double,double):sign => ++sign
AOIS_634:322:double_nextAfter(double,double):sign => --sign
AOIS_635:322:double_nextAfter(double,double):sign => sign++
AOIS_636:322:double_nextAfter(double,double):sign => sign--
AOIS_637:322:double_nextAfter(double,double):exponent => ++exponent
AOIS_638:322:double_nextAfter(double,double):exponent => --exponent
AOIS_639:322:double_nextAfter(double,double):exponent => exponent++
AOIS_640:322:double_nextAfter(double,double):exponent => exponent--
AOIS_641:322:double_nextAfter(double,double):mantissa => ++mantissa
AOIS_642:322:double_nextAfter(double,double):mantissa => --mantissa
AOIS_643:322:double_nextAfter(double,double):mantissa => mantissa++
AOIS_644:322:double_nextAfter(double,double):mantissa => mantissa--
AOIS_645:325:double_nextAfter(double,double):mantissa => ++mantissa
AOIS_646:325:double_nextAfter(double,double):mantissa => --mantissa
AOIS_647:325:double_nextAfter(double,double):mantissa => mantissa++
AOIS_648:325:double_nextAfter(double,double):mantissa => mantissa--
AOIS_649:326:double_nextAfter(double,double):sign => ++sign
AOIS_650:326:double_nextAfter(double,double):sign => --sign
AOIS_651:326:double_nextAfter(double,double):sign => sign++
AOIS_652:326:double_nextAfter(double,double):sign => sign--
AOIS_653:326:double_nextAfter(double,double):exponent => ++exponent
AOIS_654:326:double_nextAfter(double,double):exponent => --exponent
AOIS_655:326:double_nextAfter(double,double):exponent => exponent++
AOIS_656:326:double_nextAfter(double,double):exponent => exponent--
AOIS_657:328:double_nextAfter(double,double):sign => ++sign
AOIS_658:328:double_nextAfter(double,double):sign => --sign
AOIS_659:328:double_nextAfter(double,double):sign => sign++
AOIS_660:328:double_nextAfter(double,double):sign => sign--
AOIS_661:328:double_nextAfter(double,double):exponent => ++exponent
AOIS_662:328:double_nextAfter(double,double):exponent => --exponent
AOIS_663:328:double_nextAfter(double,double):exponent => exponent++
AOIS_664:328:double_nextAfter(double,double):exponent => exponent--
AOIS_665:328:double_nextAfter(double,double):mantissa => ++mantissa
AOIS_666:328:double_nextAfter(double,double):mantissa => --mantissa
AOIS_667:328:double_nextAfter(double,double):mantissa => mantissa++
AOIS_668:328:double_nextAfter(double,double):mantissa => mantissa--
AOIS_669:335:double_normalizeAngle(double,double):a => ++a
AOIS_670:335:double_normalizeAngle(double,double):a => --a
AOIS_671:335:double_normalizeAngle(double,double):a => a++
AOIS_672:335:double_normalizeAngle(double,double):a => a--
AOIS_673:335:double_normalizeAngle(double,double):TWO_PI => ++TWO_PI
AOIS_674:335:double_normalizeAngle(double,double):TWO_PI => --TWO_PI
AOIS_675:335:double_normalizeAngle(double,double):TWO_PI => TWO_PI++
AOIS_676:335:double_normalizeAngle(double,double):TWO_PI => TWO_PI--
AOIS_677:335:double_normalizeAngle(double,double):a => ++a
AOIS_678:335:double_normalizeAngle(double,double):a => --a
AOIS_679:335:double_normalizeAngle(double,double):a => a++
AOIS_680:335:double_normalizeAngle(double,double):a => a--
AOIS_681:335:double_normalizeAngle(double,double):Math.PI => ++Math.PI
AOIS_682:335:double_normalizeAngle(double,double):Math.PI => --Math.PI
AOIS_683:335:double_normalizeAngle(double,double):Math.PI => Math.PI++
AOIS_684:335:double_normalizeAngle(double,double):Math.PI => Math.PI--
AOIS_685:335:double_normalizeAngle(double,double):center => center++
AOIS_686:335:double_normalizeAngle(double,double):center => center--
AOIS_687:335:double_normalizeAngle(double,double):TWO_PI => TWO_PI++
AOIS_688:335:double_normalizeAngle(double,double):TWO_PI => TWO_PI--
AOIS_689:340:double_round(double,int):x => x++
AOIS_690:340:double_round(double,int):x => x--
AOIS_691:340:double_round(double,int):scale => scale++
AOIS_692:340:double_round(double,int):scale => scale--
AOIS_693:340:double_round(double,int):BigDecimal.ROUND_HALF_UP => BigDecimal.ROUND_HALF_UP++
AOIS_694:340:double_round(double,int):BigDecimal.ROUND_HALF_UP => BigDecimal.ROUND_HALF_UP--
AOIS_695:346:double_round(double,int,int):x => x++
AOIS_696:346:double_round(double,int,int):x => x--
AOIS_697:346:double_round(double,int,int):scale => scale++
AOIS_698:346:double_round(double,int,int):scale => scale--
AOIS_699:346:double_round(double,int,int):roundingMethod => roundingMethod++
AOIS_700:346:double_round(double,int,int):roundingMethod => roundingMethod--
AOIS_701:348:double_round(double,int,int):x => x++
AOIS_702:348:double_round(double,int,int):x => x--
AOIS_703:349:double_round(double,int,int):x => x++
AOIS_704:349:double_round(double,int,int):x => x--
AOIS_705:351:double_round(double,int,int):Double.NaN => Double.NaN++
AOIS_706:351:double_round(double,int,int):Double.NaN => Double.NaN--
AOIS_707:358:float_round(float,int):x => x++
AOIS_708:358:float_round(float,int):x => x--
AOIS_709:358:float_round(float,int):scale => scale++
AOIS_710:358:float_round(float,int):scale => scale--
AOIS_711:358:float_round(float,int):BigDecimal.ROUND_HALF_UP => BigDecimal.ROUND_HALF_UP++
AOIS_712:358:float_round(float,int):BigDecimal.ROUND_HALF_UP => BigDecimal.ROUND_HALF_UP--
AOIS_713:363:float_round(float,int,int):x => x++
AOIS_714:363:float_round(float,int,int):x => x--
AOIS_715:364:float_round(float,int,int):scale => ++scale
AOIS_716:364:float_round(float,int,int):scale => --scale
AOIS_717:364:float_round(float,int,int):scale => scale++
AOIS_718:364:float_round(float,int,int):scale => scale--
AOIS_719:364:float_round(float,int,int):sign => ++sign
AOIS_720:364:float_round(float,int,int):sign => --sign
AOIS_721:364:float_round(float,int,int):sign => sign++
AOIS_722:364:float_round(float,int,int):sign => sign--
AOIS_723:365:float_round(float,int,int):x => ++x
AOIS_724:365:float_round(float,int,int):x => --x
AOIS_725:365:float_round(float,int,int):x => x++
AOIS_726:365:float_round(float,int,int):x => x--
AOIS_727:365:float_round(float,int,int):factor => ++factor
AOIS_728:365:float_round(float,int,int):factor => --factor
AOIS_729:365:float_round(float,int,int):factor => factor++
AOIS_730:365:float_round(float,int,int):factor => factor--
AOIS_731:365:float_round(float,int,int):sign => sign++
AOIS_732:365:float_round(float,int,int):sign => sign--
AOIS_733:365:float_round(float,int,int):roundingMethod => roundingMethod++
AOIS_734:365:float_round(float,int,int):roundingMethod => roundingMethod--
AOIS_735:365:float_round(float,int,int):factor => factor++
AOIS_736:365:float_round(float,int,int):factor => factor--
AOIS_737:370:double_roundUnscaled(double,double,int):roundingMethod => roundingMethod++
AOIS_738:370:double_roundUnscaled(double,double,int):roundingMethod => roundingMethod--
AOIS_739:371:double_roundUnscaled(double,double,int):BigDecimal.ROUND_CEILING => BigDecimal.ROUND_CEILING++
AOIS_740:371:double_roundUnscaled(double,double,int):BigDecimal.ROUND_CEILING => BigDecimal.ROUND_CEILING--
AOIS_741:372:double_roundUnscaled(double,double,int):sign => ++sign
AOIS_742:372:double_roundUnscaled(double,double,int):sign => --sign
AOIS_743:372:double_roundUnscaled(double,double,int):sign => sign++
AOIS_744:372:double_roundUnscaled(double,double,int):sign => sign--
AOIS_745:373:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_746:373:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_747:373:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_748:373:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_749:373:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ++Double.NEGATIVE_INFINITY
AOIS_750:373:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => --Double.NEGATIVE_INFINITY
AOIS_751:373:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY++
AOIS_752:373:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY--
AOIS_753:375:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_754:375:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_755:375:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_756:375:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_757:375:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ++Double.POSITIVE_INFINITY
AOIS_758:375:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => --Double.POSITIVE_INFINITY
AOIS_759:375:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY++
AOIS_760:375:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY--
AOIS_761:379:double_roundUnscaled(double,double,int):BigDecimal.ROUND_DOWN => BigDecimal.ROUND_DOWN++
AOIS_762:379:double_roundUnscaled(double,double,int):BigDecimal.ROUND_DOWN => BigDecimal.ROUND_DOWN--
AOIS_763:380:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_764:380:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_765:380:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_766:380:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_767:380:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ++Double.NEGATIVE_INFINITY
AOIS_768:380:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => --Double.NEGATIVE_INFINITY
AOIS_769:380:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY++
AOIS_770:380:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY--
AOIS_771:383:double_roundUnscaled(double,double,int):BigDecimal.ROUND_FLOOR => BigDecimal.ROUND_FLOOR++
AOIS_772:383:double_roundUnscaled(double,double,int):BigDecimal.ROUND_FLOOR => BigDecimal.ROUND_FLOOR--
AOIS_773:384:double_roundUnscaled(double,double,int):sign => ++sign
AOIS_774:384:double_roundUnscaled(double,double,int):sign => --sign
AOIS_775:384:double_roundUnscaled(double,double,int):sign => sign++
AOIS_776:384:double_roundUnscaled(double,double,int):sign => sign--
AOIS_777:385:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_778:385:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_779:385:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_780:385:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_781:385:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ++Double.POSITIVE_INFINITY
AOIS_782:385:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => --Double.POSITIVE_INFINITY
AOIS_783:385:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY++
AOIS_784:385:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY--
AOIS_785:387:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_786:387:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_787:387:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_788:387:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_789:387:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ++Double.NEGATIVE_INFINITY
AOIS_790:387:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => --Double.NEGATIVE_INFINITY
AOIS_791:387:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY++
AOIS_792:387:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY--
AOIS_793:391:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_DOWN => BigDecimal.ROUND_HALF_DOWN++
AOIS_794:391:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_DOWN => BigDecimal.ROUND_HALF_DOWN--
AOIS_795:393:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_796:393:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_797:393:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_798:393:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_799:393:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ++Double.NEGATIVE_INFINITY
AOIS_800:393:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => --Double.NEGATIVE_INFINITY
AOIS_801:393:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY++
AOIS_802:393:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => Double.NEGATIVE_INFINITY--
AOIS_803:394:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_804:394:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_805:394:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_806:394:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_807:394:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_808:394:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_809:394:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_810:394:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_811:395:double_roundUnscaled(double,double,int):fraction => ++fraction
AOIS_812:395:double_roundUnscaled(double,double,int):fraction => --fraction
AOIS_813:395:double_roundUnscaled(double,double,int):fraction => fraction++
AOIS_814:395:double_roundUnscaled(double,double,int):fraction => fraction--
AOIS_815:396:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_816:396:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_817:396:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_818:396:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_819:398:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_820:398:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_821:398:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_822:398:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_823:403:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_EVEN => BigDecimal.ROUND_HALF_EVEN++
AOIS_824:403:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_EVEN => BigDecimal.ROUND_HALF_EVEN--
AOIS_825:405:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_826:405:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_827:405:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_828:405:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_829:405:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_830:405:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_831:405:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_832:405:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_833:406:double_roundUnscaled(double,double,int):fraction => ++fraction
AOIS_834:406:double_roundUnscaled(double,double,int):fraction => --fraction
AOIS_835:406:double_roundUnscaled(double,double,int):fraction => fraction++
AOIS_836:406:double_roundUnscaled(double,double,int):fraction => fraction--
AOIS_837:407:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_838:407:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_839:407:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_840:407:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_841:409:double_roundUnscaled(double,double,int):fraction => ++fraction
AOIS_842:409:double_roundUnscaled(double,double,int):fraction => --fraction
AOIS_843:409:double_roundUnscaled(double,double,int):fraction => fraction++
AOIS_844:409:double_roundUnscaled(double,double,int):fraction => fraction--
AOIS_845:410:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_846:410:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_847:410:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_848:410:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_849:412:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_850:412:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_851:412:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_852:412:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_853:412:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_854:412:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_855:412:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_856:412:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_857:413:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_858:413:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_859:413:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_860:413:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_861:415:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_862:415:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_863:415:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_864:415:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_865:422:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_UP => BigDecimal.ROUND_HALF_UP++
AOIS_866:422:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_UP => BigDecimal.ROUND_HALF_UP--
AOIS_867:424:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_868:424:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_869:424:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_870:424:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_871:424:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ++Double.POSITIVE_INFINITY
AOIS_872:424:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => --Double.POSITIVE_INFINITY
AOIS_873:424:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY++
AOIS_874:424:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY--
AOIS_875:425:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_876:425:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_877:425:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_878:425:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_879:425:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_880:425:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_881:425:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_882:425:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_883:426:double_roundUnscaled(double,double,int):fraction => ++fraction
AOIS_884:426:double_roundUnscaled(double,double,int):fraction => --fraction
AOIS_885:426:double_roundUnscaled(double,double,int):fraction => fraction++
AOIS_886:426:double_roundUnscaled(double,double,int):fraction => fraction--
AOIS_887:427:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_888:427:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_889:427:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_890:427:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_891:429:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_892:429:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_893:429:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_894:429:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_895:434:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UNNECESSARY => BigDecimal.ROUND_UNNECESSARY++
AOIS_896:434:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UNNECESSARY => BigDecimal.ROUND_UNNECESSARY--
AOIS_897:435:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_898:435:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_899:435:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_900:435:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_901:435:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_902:435:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_903:435:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_904:435:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_905:440:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UP => BigDecimal.ROUND_UP++
AOIS_906:440:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UP => BigDecimal.ROUND_UP--
AOIS_907:441:double_roundUnscaled(double,double,int):unscaled => ++unscaled
AOIS_908:441:double_roundUnscaled(double,double,int):unscaled => --unscaled
AOIS_909:441:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_910:441:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_911:441:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ++Double.POSITIVE_INFINITY
AOIS_912:441:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => --Double.POSITIVE_INFINITY
AOIS_913:441:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY++
AOIS_914:441:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => Double.POSITIVE_INFINITY--
AOIS_915:448:double_roundUnscaled(double,double,int):unscaled => unscaled++
AOIS_916:448:double_roundUnscaled(double,double,int):unscaled => unscaled--
AOIS_917:453:byte_sign(byte):x => ++x
AOIS_918:453:byte_sign(byte):x => --x
AOIS_919:453:byte_sign(byte):x => x++
AOIS_920:453:byte_sign(byte):x => x--
AOIS_921:453:byte_sign(byte):ZB => ++ZB
AOIS_922:453:byte_sign(byte):ZB => --ZB
AOIS_923:453:byte_sign(byte):ZB => ZB++
AOIS_924:453:byte_sign(byte):ZB => ZB--
AOIS_925:453:byte_sign(byte):ZB => ZB++
AOIS_926:453:byte_sign(byte):ZB => ZB--
AOIS_927:453:byte_sign(byte):x => ++x
AOIS_928:453:byte_sign(byte):x => --x
AOIS_929:453:byte_sign(byte):x => x++
AOIS_930:453:byte_sign(byte):x => x--
AOIS_931:453:byte_sign(byte):ZB => ++ZB
AOIS_932:453:byte_sign(byte):ZB => --ZB
AOIS_933:453:byte_sign(byte):ZB => ZB++
AOIS_934:453:byte_sign(byte):ZB => ZB--
AOIS_935:453:byte_sign(byte):PB => PB++
AOIS_936:453:byte_sign(byte):PB => PB--
AOIS_937:453:byte_sign(byte):NB => NB++
AOIS_938:453:byte_sign(byte):NB => NB--
AOIS_939:458:double_sign(double):x => x++
AOIS_940:458:double_sign(double):x => x--
AOIS_941:459:double_sign(double):Double.NaN => Double.NaN++
AOIS_942:459:double_sign(double):Double.NaN => Double.NaN--
AOIS_943:461:double_sign(double):x => ++x
AOIS_944:461:double_sign(double):x => --x
AOIS_945:461:double_sign(double):x => x++
AOIS_946:461:double_sign(double):x => x--
AOIS_947:461:double_sign(double):x => ++x
AOIS_948:461:double_sign(double):x => --x
AOIS_949:461:double_sign(double):x => x++
AOIS_950:461:double_sign(double):x => x--
AOIS_951:466:float_sign(float):x => x++
AOIS_952:466:float_sign(float):x => x--
AOIS_953:467:float_sign(float):Float.NaN => Float.NaN++
AOIS_954:467:float_sign(float):Float.NaN => Float.NaN--
AOIS_955:469:float_sign(float):x => ++x
AOIS_956:469:float_sign(float):x => --x
AOIS_957:469:float_sign(float):x => x++
AOIS_958:469:float_sign(float):x => x--
AOIS_959:469:float_sign(float):x => ++x
AOIS_960:469:float_sign(float):x => --x
AOIS_961:469:float_sign(float):x => x++
AOIS_962:469:float_sign(float):x => x--
AOIS_963:474:int_sign(int):x => ++x
AOIS_964:474:int_sign(int):x => --x
AOIS_965:474:int_sign(int):x => x++
AOIS_966:474:int_sign(int):x => x--
AOIS_967:474:int_sign(int):x => ++x
AOIS_968:474:int_sign(int):x => --x
AOIS_969:474:int_sign(int):x => x++
AOIS_970:474:int_sign(int):x => x--
AOIS_971:479:long_sign(long):x => ++x
AOIS_972:479:long_sign(long):x => --x
AOIS_973:479:long_sign(long):x => x++
AOIS_974:479:long_sign(long):x => x--
AOIS_975:479:long_sign(long):x => ++x
AOIS_976:479:long_sign(long):x => --x
AOIS_977:479:long_sign(long):x => x++
AOIS_978:479:long_sign(long):x => x--
AOIS_979:484:short_sign(short):x => ++x
AOIS_980:484:short_sign(short):x => --x
AOIS_981:484:short_sign(short):x => x++
AOIS_982:484:short_sign(short):x => x--
AOIS_983:484:short_sign(short):ZS => ++ZS
AOIS_984:484:short_sign(short):ZS => --ZS
AOIS_985:484:short_sign(short):ZS => ZS++
AOIS_986:484:short_sign(short):ZS => ZS--
AOIS_987:484:short_sign(short):ZS => ZS++
AOIS_988:484:short_sign(short):ZS => ZS--
AOIS_989:484:short_sign(short):x => ++x
AOIS_990:484:short_sign(short):x => --x
AOIS_991:484:short_sign(short):x => x++
AOIS_992:484:short_sign(short):x => x--
AOIS_993:484:short_sign(short):ZS => ++ZS
AOIS_994:484:short_sign(short):ZS => --ZS
AOIS_995:484:short_sign(short):ZS => ZS++
AOIS_996:484:short_sign(short):ZS => ZS--
AOIS_997:484:short_sign(short):PS => PS++
AOIS_998:484:short_sign(short):PS => PS--
AOIS_999:484:short_sign(short):NS => NS++
AOIS_1000:484:short_sign(short):NS => NS--
AOIS_1001:489:double_sinh(double):x => ++x
AOIS_1002:489:double_sinh(double):x => --x
AOIS_1003:489:double_sinh(double):x => x++
AOIS_1004:489:double_sinh(double):x => x--
AOIS_1005:494:int_subAndCheck(int,int):x => ++x
AOIS_1006:494:int_subAndCheck(int,int):x => --x
AOIS_1007:494:int_subAndCheck(int,int):x => x++
AOIS_1008:494:int_subAndCheck(int,int):x => x--
AOIS_1009:494:int_subAndCheck(int,int):y => ++y
AOIS_1010:494:int_subAndCheck(int,int):y => --y
AOIS_1011:494:int_subAndCheck(int,int):y => y++
AOIS_1012:494:int_subAndCheck(int,int):y => y--
AOIS_1013:495:int_subAndCheck(int,int):s => ++s
AOIS_1014:495:int_subAndCheck(int,int):s => --s
AOIS_1015:495:int_subAndCheck(int,int):s => s++
AOIS_1016:495:int_subAndCheck(int,int):s => s--
AOIS_1017:495:int_subAndCheck(int,int):Integer.MIN_VALUE => ++Integer.MIN_VALUE
AOIS_1018:495:int_subAndCheck(int,int):Integer.MIN_VALUE => --Integer.MIN_VALUE
AOIS_1019:495:int_subAndCheck(int,int):Integer.MIN_VALUE => Integer.MIN_VALUE++
AOIS_1020:495:int_subAndCheck(int,int):Integer.MIN_VALUE => Integer.MIN_VALUE--
AOIS_1021:495:int_subAndCheck(int,int):s => ++s
AOIS_1022:495:int_subAndCheck(int,int):s => --s
AOIS_1023:495:int_subAndCheck(int,int):s => s++
AOIS_1024:495:int_subAndCheck(int,int):s => s--
AOIS_1025:495:int_subAndCheck(int,int):Integer.MAX_VALUE => ++Integer.MAX_VALUE
AOIS_1026:495:int_subAndCheck(int,int):Integer.MAX_VALUE => --Integer.MAX_VALUE
AOIS_1027:495:int_subAndCheck(int,int):Integer.MAX_VALUE => Integer.MAX_VALUE++
AOIS_1028:495:int_subAndCheck(int,int):Integer.MAX_VALUE => Integer.MAX_VALUE--
AOIS_1029:498:int_subAndCheck(int,int):s => s++
AOIS_1030:498:int_subAndCheck(int,int):s => s--
AOIS_1031:505:long_subAndCheck(long,long):b => ++b
AOIS_1032:505:long_subAndCheck(long,long):b => --b
AOIS_1033:505:long_subAndCheck(long,long):b => b++
AOIS_1034:505:long_subAndCheck(long,long):b => b--
AOIS_1035:505:long_subAndCheck(long,long):Long.MIN_VALUE => ++Long.MIN_VALUE
AOIS_1036:505:long_subAndCheck(long,long):Long.MIN_VALUE => --Long.MIN_VALUE
AOIS_1037:505:long_subAndCheck(long,long):Long.MIN_VALUE => Long.MIN_VALUE++
AOIS_1038:505:long_subAndCheck(long,long):Long.MIN_VALUE => Long.MIN_VALUE--
AOIS_1039:506:long_subAndCheck(long,long):a => ++a
AOIS_1040:506:long_subAndCheck(long,long):a => --a
AOIS_1041:506:long_subAndCheck(long,long):a => a++
AOIS_1042:506:long_subAndCheck(long,long):a => a--
AOIS_1043:507:long_subAndCheck(long,long):a => ++a
AOIS_1044:507:long_subAndCheck(long,long):a => --a
AOIS_1045:507:long_subAndCheck(long,long):a => a++
AOIS_1046:507:long_subAndCheck(long,long):a => a--
AOIS_1047:507:long_subAndCheck(long,long):b => ++b
AOIS_1048:507:long_subAndCheck(long,long):b => --b
AOIS_1049:507:long_subAndCheck(long,long):b => b++
AOIS_1050:507:long_subAndCheck(long,long):b => b--
AOIS_1051:512:long_subAndCheck(long,long):a => ++a
AOIS_1052:512:long_subAndCheck(long,long):a => --a
AOIS_1053:512:long_subAndCheck(long,long):a => a++
AOIS_1054:512:long_subAndCheck(long,long):a => a--
AOIS_1055:514:long_subAndCheck(long,long):ret => ret++
AOIS_1056:514:long_subAndCheck(long,long):ret => ret--
ROR_1:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   s > Integer.MIN_VALUE
ROR_2:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   s >= Integer.MIN_VALUE
ROR_3:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   s <= Integer.MIN_VALUE
ROR_4:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   s == Integer.MIN_VALUE
ROR_5:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   s != Integer.MIN_VALUE
ROR_6:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   true
ROR_7:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>   false
ROR_8:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   s >= Integer.MAX_VALUE
ROR_9:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   s < Integer.MAX_VALUE
ROR_10:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   s <= Integer.MAX_VALUE
ROR_11:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   s == Integer.MAX_VALUE
ROR_12:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   s != Integer.MAX_VALUE
ROR_13:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   true
ROR_14:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>   false
ROR_15:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   a >= b
ROR_16:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   a < b
ROR_17:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   a <= b
ROR_18:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   a == b
ROR_19:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   a != b
ROR_20:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   true
ROR_21:46:long_addAndCheck(long,long,java.lang.String): a > b  =>   false
ROR_22:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   a > 0
ROR_23:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   a >= 0
ROR_24:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   a <= 0
ROR_25:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   a == 0
ROR_26:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   a != 0
ROR_27:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   true
ROR_28:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>   false
ROR_29:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   b > 0
ROR_30:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   b >= 0
ROR_31:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   b <= 0
ROR_32:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   b == 0
ROR_33:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   b != 0
ROR_34:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   true
ROR_35:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>   false
ROR_36:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   Long.MIN_VALUE - b > a
ROR_37:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   Long.MIN_VALUE - b >= a
ROR_38:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   Long.MIN_VALUE - b < a
ROR_39:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   Long.MIN_VALUE - b == a
ROR_40:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   Long.MIN_VALUE - b != a
ROR_41:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   true
ROR_42:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>   false
ROR_43:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   a > Long.MAX_VALUE - b
ROR_44:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   a >= Long.MAX_VALUE - b
ROR_45:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   a < Long.MAX_VALUE - b
ROR_46:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   a == Long.MAX_VALUE - b
ROR_47:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   a != Long.MAX_VALUE - b
ROR_48:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   true
ROR_49:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>   false
ROR_50:72:long_binomialCoefficient(int,int): n < k  =>   n > k
ROR_51:72:long_binomialCoefficient(int,int): n < k  =>   n >= k
ROR_52:72:long_binomialCoefficient(int,int): n < k  =>   n <= k
ROR_53:72:long_binomialCoefficient(int,int): n < k  =>   n == k
ROR_54:72:long_binomialCoefficient(int,int): n < k  =>   n != k
ROR_55:72:long_binomialCoefficient(int,int): n < k  =>   true
ROR_56:72:long_binomialCoefficient(int,int): n < k  =>   false
ROR_57:75:long_binomialCoefficient(int,int): n < 0  =>   n > 0
ROR_58:75:long_binomialCoefficient(int,int): n < 0  =>   n >= 0
ROR_59:75:long_binomialCoefficient(int,int): n < 0  =>   n <= 0
ROR_60:75:long_binomialCoefficient(int,int): n < 0  =>   n == 0
ROR_61:75:long_binomialCoefficient(int,int): n < 0  =>   n != 0
ROR_62:75:long_binomialCoefficient(int,int): n < 0  =>   true
ROR_63:75:long_binomialCoefficient(int,int): n < 0  =>   false
ROR_64:78:long_binomialCoefficient(int,int): n == k  =>   n > k
ROR_65:78:long_binomialCoefficient(int,int): n == k  =>   n >= k
ROR_66:78:long_binomialCoefficient(int,int): n == k  =>   n < k
ROR_67:78:long_binomialCoefficient(int,int): n == k  =>   n <= k
ROR_68:78:long_binomialCoefficient(int,int): n == k  =>   n != k
ROR_69:78:long_binomialCoefficient(int,int): n == k  =>   true
ROR_70:78:long_binomialCoefficient(int,int): n == k  =>   false
ROR_71:78:long_binomialCoefficient(int,int): k == 0  =>   k > 0
ROR_72:78:long_binomialCoefficient(int,int): k == 0  =>   k >= 0
ROR_73:78:long_binomialCoefficient(int,int): k == 0  =>   k < 0
ROR_74:78:long_binomialCoefficient(int,int): k == 0  =>   k <= 0
ROR_75:78:long_binomialCoefficient(int,int): k == 0  =>   k != 0
ROR_76:78:long_binomialCoefficient(int,int): k == 0  =>   true
ROR_77:78:long_binomialCoefficient(int,int): k == 0  =>   false
ROR_78:81:long_binomialCoefficient(int,int): k == 1  =>   k > 1
ROR_79:81:long_binomialCoefficient(int,int): k == 1  =>   k >= 1
ROR_80:81:long_binomialCoefficient(int,int): k == 1  =>   k < 1
ROR_81:81:long_binomialCoefficient(int,int): k == 1  =>   k <= 1
ROR_82:81:long_binomialCoefficient(int,int): k == 1  =>   k != 1
ROR_83:81:long_binomialCoefficient(int,int): k == 1  =>   true
ROR_84:81:long_binomialCoefficient(int,int): k == 1  =>   false
ROR_85:81:long_binomialCoefficient(int,int): k == n - 1  =>   k > n - 1
ROR_86:81:long_binomialCoefficient(int,int): k == n - 1  =>   k >= n - 1
ROR_87:81:long_binomialCoefficient(int,int): k == n - 1  =>   k < n - 1
ROR_88:81:long_binomialCoefficient(int,int): k == n - 1  =>   k <= n - 1
ROR_89:81:long_binomialCoefficient(int,int): k == n - 1  =>   k != n - 1
ROR_90:81:long_binomialCoefficient(int,int): k == n - 1  =>   true
ROR_91:81:long_binomialCoefficient(int,int): k == n - 1  =>   false
ROR_92:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   result > Long.MAX_VALUE
ROR_93:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   result >= Long.MAX_VALUE
ROR_94:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   result < Long.MAX_VALUE
ROR_95:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   result <= Long.MAX_VALUE
ROR_96:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   result != Long.MAX_VALUE
ROR_97:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   true
ROR_98:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>   false
ROR_99:98:double_binomialCoefficientLog(int,int): n < k  =>   n > k
ROR_100:98:double_binomialCoefficientLog(int,int): n < k  =>   n >= k
ROR_101:98:double_binomialCoefficientLog(int,int): n < k  =>   n <= k
ROR_102:98:double_binomialCoefficientLog(int,int): n < k  =>   n == k
ROR_103:98:double_binomialCoefficientLog(int,int): n < k  =>   n != k
ROR_104:98:double_binomialCoefficientLog(int,int): n < k  =>   true
ROR_105:98:double_binomialCoefficientLog(int,int): n < k  =>   false
ROR_106:101:double_binomialCoefficientLog(int,int): n < 0  =>   n > 0
ROR_107:101:double_binomialCoefficientLog(int,int): n < 0  =>   n >= 0
ROR_108:101:double_binomialCoefficientLog(int,int): n < 0  =>   n <= 0
ROR_109:101:double_binomialCoefficientLog(int,int): n < 0  =>   n == 0
ROR_110:101:double_binomialCoefficientLog(int,int): n < 0  =>   n != 0
ROR_111:101:double_binomialCoefficientLog(int,int): n < 0  =>   true
ROR_112:101:double_binomialCoefficientLog(int,int): n < 0  =>   false
ROR_113:104:double_binomialCoefficientLog(int,int): n == k  =>   n > k
ROR_114:104:double_binomialCoefficientLog(int,int): n == k  =>   n >= k
ROR_115:104:double_binomialCoefficientLog(int,int): n == k  =>   n < k
ROR_116:104:double_binomialCoefficientLog(int,int): n == k  =>   n <= k
ROR_117:104:double_binomialCoefficientLog(int,int): n == k  =>   n != k
ROR_118:104:double_binomialCoefficientLog(int,int): n == k  =>   true
ROR_119:104:double_binomialCoefficientLog(int,int): n == k  =>   false
ROR_120:104:double_binomialCoefficientLog(int,int): k == 0  =>   k > 0
ROR_121:104:double_binomialCoefficientLog(int,int): k == 0  =>   k >= 0
ROR_122:104:double_binomialCoefficientLog(int,int): k == 0  =>   k < 0
ROR_123:104:double_binomialCoefficientLog(int,int): k == 0  =>   k <= 0
ROR_124:104:double_binomialCoefficientLog(int,int): k == 0  =>   k != 0
ROR_125:104:double_binomialCoefficientLog(int,int): k == 0  =>   true
ROR_126:104:double_binomialCoefficientLog(int,int): k == 0  =>   false
ROR_127:107:double_binomialCoefficientLog(int,int): k == 1  =>   k > 1
ROR_128:107:double_binomialCoefficientLog(int,int): k == 1  =>   k >= 1
ROR_129:107:double_binomialCoefficientLog(int,int): k == 1  =>   k < 1
ROR_130:107:double_binomialCoefficientLog(int,int): k == 1  =>   k <= 1
ROR_131:107:double_binomialCoefficientLog(int,int): k == 1  =>   k != 1
ROR_132:107:double_binomialCoefficientLog(int,int): k == 1  =>   true
ROR_133:107:double_binomialCoefficientLog(int,int): k == 1  =>   false
ROR_134:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   k > n - 1
ROR_135:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   k >= n - 1
ROR_136:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   k < n - 1
ROR_137:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   k <= n - 1
ROR_138:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   k != n - 1
ROR_139:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   true
ROR_140:107:double_binomialCoefficientLog(int,int): k == n - 1  =>   false
ROR_141:111:double_binomialCoefficientLog(int,int): i <= n  =>   i > n
ROR_142:111:double_binomialCoefficientLog(int,int): i <= n  =>   i >= n
ROR_143:111:double_binomialCoefficientLog(int,int): i <= n  =>   i < n
ROR_144:111:double_binomialCoefficientLog(int,int): i <= n  =>   i == n
ROR_145:111:double_binomialCoefficientLog(int,int): i <= n  =>   i != n
ROR_146:111:double_binomialCoefficientLog(int,int): i <= n  =>   true
ROR_147:111:double_binomialCoefficientLog(int,int): i <= n  =>   false
ROR_148:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   i > n - k
ROR_149:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   i >= n - k
ROR_150:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   i < n - k
ROR_151:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   i == n - k
ROR_152:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   i != n - k
ROR_153:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   true
ROR_154:114:double_binomialCoefficientLog(int,int): i <= n - k  =>   false
ROR_155:127:boolean_equals(double,double): x == y  =>   x > y
ROR_156:127:boolean_equals(double,double): x == y  =>   x >= y
ROR_157:127:boolean_equals(double,double): x == y  =>   x < y
ROR_158:127:boolean_equals(double,double): x == y  =>   x <= y
ROR_159:127:boolean_equals(double,double): x == y  =>   x != y
ROR_160:127:boolean_equals(double,double): x == y  =>   true
ROR_161:127:boolean_equals(double,double): x == y  =>   false
ROR_162:132:boolean_equals(double,double): x == null  =>   x != null
ROR_163:132:boolean_equals(double,double): y == null  =>   y != null
ROR_164:133:boolean_equals(double,double): x == null  =>   x != null
ROR_165:133:boolean_equals(double,double): y == null  =>   y != null
ROR_166:135:boolean_equals(double,double): x.length != y.length  =>   x.length > y.length
ROR_167:135:boolean_equals(double,double): x.length != y.length  =>   x.length >= y.length
ROR_168:135:boolean_equals(double,double): x.length != y.length  =>   x.length < y.length
ROR_169:135:boolean_equals(double,double): x.length != y.length  =>   x.length <= y.length
ROR_170:135:boolean_equals(double,double): x.length != y.length  =>   x.length == y.length
ROR_171:135:boolean_equals(double,double): x.length != y.length  =>   true
ROR_172:135:boolean_equals(double,double): x.length != y.length  =>   false
ROR_173:138:boolean_equals(double,double): i < x.length  =>   i > x.length
ROR_174:138:boolean_equals(double,double): i < x.length  =>   i >= x.length
ROR_175:138:boolean_equals(double,double): i < x.length  =>   i <= x.length
ROR_176:138:boolean_equals(double,double): i < x.length  =>   i == x.length
ROR_177:138:boolean_equals(double,double): i < x.length  =>   i != x.length
ROR_178:138:boolean_equals(double,double): i < x.length  =>   true
ROR_179:138:boolean_equals(double,double): i < x.length  =>   false
ROR_180:149:long_factorial(int): result == Long.MAX_VALUE  =>   result > Long.MAX_VALUE
ROR_181:149:long_factorial(int): result == Long.MAX_VALUE  =>   result >= Long.MAX_VALUE
ROR_182:149:long_factorial(int): result == Long.MAX_VALUE  =>   result < Long.MAX_VALUE
ROR_183:149:long_factorial(int): result == Long.MAX_VALUE  =>   result <= Long.MAX_VALUE
ROR_184:149:long_factorial(int): result == Long.MAX_VALUE  =>   result != Long.MAX_VALUE
ROR_185:149:long_factorial(int): result == Long.MAX_VALUE  =>   true
ROR_186:149:long_factorial(int): result == Long.MAX_VALUE  =>   false
ROR_187:157:double_factorialDouble(int): n < 0  =>   n > 0
ROR_188:157:double_factorialDouble(int): n < 0  =>   n >= 0
ROR_189:157:double_factorialDouble(int): n < 0  =>   n <= 0
ROR_190:157:double_factorialDouble(int): n < 0  =>   n == 0
ROR_191:157:double_factorialDouble(int): n < 0  =>   n != 0
ROR_192:157:double_factorialDouble(int): n < 0  =>   true
ROR_193:157:double_factorialDouble(int): n < 0  =>   false
ROR_194:165:double_factorialLog(int): n < 0  =>   n > 0
ROR_195:165:double_factorialLog(int): n < 0  =>   n >= 0
ROR_196:165:double_factorialLog(int): n < 0  =>   n <= 0
ROR_197:165:double_factorialLog(int): n < 0  =>   n == 0
ROR_198:165:double_factorialLog(int): n < 0  =>   n != 0
ROR_199:165:double_factorialLog(int): n < 0  =>   true
ROR_200:165:double_factorialLog(int): n < 0  =>   false
ROR_201:169:double_factorialLog(int): i <= n  =>   i > n
ROR_202:169:double_factorialLog(int): i <= n  =>   i >= n
ROR_203:169:double_factorialLog(int): i <= n  =>   i < n
ROR_204:169:double_factorialLog(int): i <= n  =>   i == n
ROR_205:169:double_factorialLog(int): i <= n  =>   i != n
ROR_206:169:double_factorialLog(int): i <= n  =>   true
ROR_207:169:double_factorialLog(int): i <= n  =>   false
ROR_208:177:int_gcd(int,int): u * v == 0  =>   u * v > 0
ROR_209:177:int_gcd(int,int): u * v == 0  =>   u * v >= 0
ROR_210:177:int_gcd(int,int): u * v == 0  =>   u * v < 0
ROR_211:177:int_gcd(int,int): u * v == 0  =>   u * v <= 0
ROR_212:177:int_gcd(int,int): u * v == 0  =>   u * v != 0
ROR_213:177:int_gcd(int,int): u * v == 0  =>   true
ROR_214:177:int_gcd(int,int): u * v == 0  =>   false
ROR_215:180:int_gcd(int,int): u > 0  =>   u >= 0
ROR_216:180:int_gcd(int,int): u > 0  =>   u < 0
ROR_217:180:int_gcd(int,int): u > 0  =>   u <= 0
ROR_218:180:int_gcd(int,int): u > 0  =>   u == 0
ROR_219:180:int_gcd(int,int): u > 0  =>   u != 0
ROR_220:180:int_gcd(int,int): u > 0  =>   true
ROR_221:180:int_gcd(int,int): u > 0  =>   false
ROR_222:183:int_gcd(int,int): v > 0  =>   v >= 0
ROR_223:183:int_gcd(int,int): v > 0  =>   v < 0
ROR_224:183:int_gcd(int,int): v > 0  =>   v <= 0
ROR_225:183:int_gcd(int,int): v > 0  =>   v == 0
ROR_226:183:int_gcd(int,int): v > 0  =>   v != 0
ROR_227:183:int_gcd(int,int): v > 0  =>   true
ROR_228:183:int_gcd(int,int): v > 0  =>   false
ROR_229:187:int_gcd(int,int): (u & 1) == 0  =>   (u & 1) > 0
ROR_230:187:int_gcd(int,int): (u & 1) == 0  =>   (u & 1) >= 0
ROR_231:187:int_gcd(int,int): (u & 1) == 0  =>   (u & 1) < 0
ROR_232:187:int_gcd(int,int): (u & 1) == 0  =>   (u & 1) <= 0
ROR_233:187:int_gcd(int,int): (u & 1) == 0  =>   (u & 1) != 0
ROR_234:187:int_gcd(int,int): (u & 1) == 0  =>   true
ROR_235:187:int_gcd(int,int): (u & 1) == 0  =>   false
ROR_236:187:int_gcd(int,int): (v & 1) == 0  =>   (v & 1) > 0
ROR_237:187:int_gcd(int,int): (v & 1) == 0  =>   (v & 1) >= 0
ROR_238:187:int_gcd(int,int): (v & 1) == 0  =>   (v & 1) < 0
ROR_239:187:int_gcd(int,int): (v & 1) == 0  =>   (v & 1) <= 0
ROR_240:187:int_gcd(int,int): (v & 1) == 0  =>   (v & 1) != 0
ROR_241:187:int_gcd(int,int): (v & 1) == 0  =>   true
ROR_242:187:int_gcd(int,int): (v & 1) == 0  =>   false
ROR_243:187:int_gcd(int,int): k < 31  =>   k > 31
ROR_244:187:int_gcd(int,int): k < 31  =>   k >= 31
ROR_245:187:int_gcd(int,int): k < 31  =>   k <= 31
ROR_246:187:int_gcd(int,int): k < 31  =>   k == 31
ROR_247:187:int_gcd(int,int): k < 31  =>   k != 31
ROR_248:187:int_gcd(int,int): k < 31  =>   true
ROR_249:187:int_gcd(int,int): k < 31  =>   false
ROR_250:192:int_gcd(int,int): k == 31  =>   k > 31
ROR_251:192:int_gcd(int,int): k == 31  =>   k >= 31
ROR_252:192:int_gcd(int,int): k == 31  =>   k < 31
ROR_253:192:int_gcd(int,int): k == 31  =>   k <= 31
ROR_254:192:int_gcd(int,int): k == 31  =>   k != 31
ROR_255:192:int_gcd(int,int): k == 31  =>   true
ROR_256:192:int_gcd(int,int): k == 31  =>   false
ROR_257:195:int_gcd(int,int): (u & 1) == 1  =>   (u & 1) > 1
ROR_258:195:int_gcd(int,int): (u & 1) == 1  =>   (u & 1) >= 1
ROR_259:195:int_gcd(int,int): (u & 1) == 1  =>   (u & 1) < 1
ROR_260:195:int_gcd(int,int): (u & 1) == 1  =>   (u & 1) <= 1
ROR_261:195:int_gcd(int,int): (u & 1) == 1  =>   (u & 1) != 1
ROR_262:195:int_gcd(int,int): (u & 1) == 1  =>   true
ROR_263:195:int_gcd(int,int): (u & 1) == 1  =>   false
ROR_264:197:int_gcd(int,int): (t & 1) == 0  =>   (t & 1) > 0
ROR_265:197:int_gcd(int,int): (t & 1) == 0  =>   (t & 1) >= 0
ROR_266:197:int_gcd(int,int): (t & 1) == 0  =>   (t & 1) < 0
ROR_267:197:int_gcd(int,int): (t & 1) == 0  =>   (t & 1) <= 0
ROR_268:197:int_gcd(int,int): (t & 1) == 0  =>   (t & 1) != 0
ROR_269:197:int_gcd(int,int): (t & 1) == 0  =>   true
ROR_270:197:int_gcd(int,int): (t & 1) == 0  =>   false
ROR_271:200:int_gcd(int,int): t > 0  =>   t >= 0
ROR_272:200:int_gcd(int,int): t > 0  =>   t < 0
ROR_273:200:int_gcd(int,int): t > 0  =>   t <= 0
ROR_274:200:int_gcd(int,int): t > 0  =>   t == 0
ROR_275:200:int_gcd(int,int): t > 0  =>   t != 0
ROR_276:200:int_gcd(int,int): t > 0  =>   true
ROR_277:200:int_gcd(int,int): t > 0  =>   false
ROR_278:206:int_gcd(int,int): t != 0  =>   t > 0
ROR_279:206:int_gcd(int,int): t != 0  =>   t >= 0
ROR_280:206:int_gcd(int,int): t != 0  =>   t < 0
ROR_281:206:int_gcd(int,int): t != 0  =>   t <= 0
ROR_282:206:int_gcd(int,int): t != 0  =>   t == 0
ROR_283:206:int_gcd(int,int): t != 0  =>   true
ROR_284:206:int_gcd(int,int): t != 0  =>   false
ROR_285:212:byte_indicator(byte): x >= ZB  =>   x > ZB
ROR_286:212:byte_indicator(byte): x >= ZB  =>   x < ZB
ROR_287:212:byte_indicator(byte): x >= ZB  =>   x <= ZB
ROR_288:212:byte_indicator(byte): x >= ZB  =>   x == ZB
ROR_289:212:byte_indicator(byte): x >= ZB  =>   x != ZB
ROR_290:212:byte_indicator(byte): x >= ZB  =>   true
ROR_291:212:byte_indicator(byte): x >= ZB  =>   false
ROR_292:220:double_indicator(double): x >= 0.0  =>   x > 0.0
ROR_293:220:double_indicator(double): x >= 0.0  =>   x < 0.0
ROR_294:220:double_indicator(double): x >= 0.0  =>   x <= 0.0
ROR_295:220:double_indicator(double): x >= 0.0  =>   x == 0.0
ROR_296:220:double_indicator(double): x >= 0.0  =>   x != 0.0
ROR_297:220:double_indicator(double): x >= 0.0  =>   true
ROR_298:220:double_indicator(double): x >= 0.0  =>   false
ROR_299:228:float_indicator(float): x >= 0.0F  =>   x > 0.0F
ROR_300:228:float_indicator(float): x >= 0.0F  =>   x < 0.0F
ROR_301:228:float_indicator(float): x >= 0.0F  =>   x <= 0.0F
ROR_302:228:float_indicator(float): x >= 0.0F  =>   x == 0.0F
ROR_303:228:float_indicator(float): x >= 0.0F  =>   x != 0.0F
ROR_304:228:float_indicator(float): x >= 0.0F  =>   true
ROR_305:228:float_indicator(float): x >= 0.0F  =>   false
ROR_306:233:int_indicator(int): x >= 0  =>   x > 0
ROR_307:233:int_indicator(int): x >= 0  =>   x < 0
ROR_308:233:int_indicator(int): x >= 0  =>   x <= 0
ROR_309:233:int_indicator(int): x >= 0  =>   x == 0
ROR_310:233:int_indicator(int): x >= 0  =>   x != 0
ROR_311:233:int_indicator(int): x >= 0  =>   true
ROR_312:233:int_indicator(int): x >= 0  =>   false
ROR_313:238:long_indicator(long): x >= 0L  =>   x > 0L
ROR_314:238:long_indicator(long): x >= 0L  =>   x < 0L
ROR_315:238:long_indicator(long): x >= 0L  =>   x <= 0L
ROR_316:238:long_indicator(long): x >= 0L  =>   x == 0L
ROR_317:238:long_indicator(long): x >= 0L  =>   x != 0L
ROR_318:238:long_indicator(long): x >= 0L  =>   true
ROR_319:238:long_indicator(long): x >= 0L  =>   false
ROR_320:243:short_indicator(short): x >= ZS  =>   x > ZS
ROR_321:243:short_indicator(short): x >= ZS  =>   x < ZS
ROR_322:243:short_indicator(short): x >= ZS  =>   x <= ZS
ROR_323:243:short_indicator(short): x >= ZS  =>   x == ZS
ROR_324:243:short_indicator(short): x >= ZS  =>   x != ZS
ROR_325:243:short_indicator(short): x >= ZS  =>   true
ROR_326:243:short_indicator(short): x >= ZS  =>   false
ROR_327:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   m > Integer.MIN_VALUE
ROR_328:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   m >= Integer.MIN_VALUE
ROR_329:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   m <= Integer.MIN_VALUE
ROR_330:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   m == Integer.MIN_VALUE
ROR_331:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   m != Integer.MIN_VALUE
ROR_332:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   true
ROR_333:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>   false
ROR_334:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   m >= Integer.MAX_VALUE
ROR_335:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   m < Integer.MAX_VALUE
ROR_336:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   m <= Integer.MAX_VALUE
ROR_337:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   m == Integer.MAX_VALUE
ROR_338:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   m != Integer.MAX_VALUE
ROR_339:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   true
ROR_340:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>   false
ROR_341:269:long_mulAndCheck(long,long): a > b  =>   a >= b
ROR_342:269:long_mulAndCheck(long,long): a > b  =>   a < b
ROR_343:269:long_mulAndCheck(long,long): a > b  =>   a <= b
ROR_344:269:long_mulAndCheck(long,long): a > b  =>   a == b
ROR_345:269:long_mulAndCheck(long,long): a > b  =>   a != b
ROR_346:269:long_mulAndCheck(long,long): a > b  =>   true
ROR_347:269:long_mulAndCheck(long,long): a > b  =>   false
ROR_348:272:long_mulAndCheck(long,long): a < 0  =>   a > 0
ROR_349:272:long_mulAndCheck(long,long): a < 0  =>   a >= 0
ROR_350:272:long_mulAndCheck(long,long): a < 0  =>   a <= 0
ROR_351:272:long_mulAndCheck(long,long): a < 0  =>   a == 0
ROR_352:272:long_mulAndCheck(long,long): a < 0  =>   a != 0
ROR_353:272:long_mulAndCheck(long,long): a < 0  =>   true
ROR_354:272:long_mulAndCheck(long,long): a < 0  =>   false
ROR_355:273:long_mulAndCheck(long,long): b < 0  =>   b > 0
ROR_356:273:long_mulAndCheck(long,long): b < 0  =>   b >= 0
ROR_357:273:long_mulAndCheck(long,long): b < 0  =>   b <= 0
ROR_358:273:long_mulAndCheck(long,long): b < 0  =>   b == 0
ROR_359:273:long_mulAndCheck(long,long): b < 0  =>   b != 0
ROR_360:273:long_mulAndCheck(long,long): b < 0  =>   true
ROR_361:273:long_mulAndCheck(long,long): b < 0  =>   false
ROR_362:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   a > Long.MAX_VALUE / b
ROR_363:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   a < Long.MAX_VALUE / b
ROR_364:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   a <= Long.MAX_VALUE / b
ROR_365:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   a == Long.MAX_VALUE / b
ROR_366:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   a != Long.MAX_VALUE / b
ROR_367:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   true
ROR_368:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>   false
ROR_369:280:long_mulAndCheck(long,long): b > 0  =>   b >= 0
ROR_370:280:long_mulAndCheck(long,long): b > 0  =>   b < 0
ROR_371:280:long_mulAndCheck(long,long): b > 0  =>   b <= 0
ROR_372:280:long_mulAndCheck(long,long): b > 0  =>   b == 0
ROR_373:280:long_mulAndCheck(long,long): b > 0  =>   b != 0
ROR_374:280:long_mulAndCheck(long,long): b > 0  =>   true
ROR_375:280:long_mulAndCheck(long,long): b > 0  =>   false
ROR_376:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   Long.MIN_VALUE / b > a
ROR_377:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   Long.MIN_VALUE / b >= a
ROR_378:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   Long.MIN_VALUE / b < a
ROR_379:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   Long.MIN_VALUE / b == a
ROR_380:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   Long.MIN_VALUE / b != a
ROR_381:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   true
ROR_382:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>   false
ROR_383:291:long_mulAndCheck(long,long): a > 0  =>   a >= 0
ROR_384:291:long_mulAndCheck(long,long): a > 0  =>   a < 0
ROR_385:291:long_mulAndCheck(long,long): a > 0  =>   a <= 0
ROR_386:291:long_mulAndCheck(long,long): a > 0  =>   a == 0
ROR_387:291:long_mulAndCheck(long,long): a > 0  =>   a != 0
ROR_388:291:long_mulAndCheck(long,long): a > 0  =>   true
ROR_389:291:long_mulAndCheck(long,long): a > 0  =>   false
ROR_390:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   a > Long.MAX_VALUE / b
ROR_391:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   a >= Long.MAX_VALUE / b
ROR_392:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   a < Long.MAX_VALUE / b
ROR_393:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   a == Long.MAX_VALUE / b
ROR_394:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   a != Long.MAX_VALUE / b
ROR_395:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   true
ROR_396:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>   false
ROR_397:310:double_nextAfter(double,double): d == 0  =>   d > 0
ROR_398:310:double_nextAfter(double,double): d == 0  =>   d >= 0
ROR_399:310:double_nextAfter(double,double): d == 0  =>   d < 0
ROR_400:310:double_nextAfter(double,double): d == 0  =>   d <= 0
ROR_401:310:double_nextAfter(double,double): d == 0  =>   d != 0
ROR_402:310:double_nextAfter(double,double): d == 0  =>   true
ROR_403:310:double_nextAfter(double,double): d == 0  =>   false
ROR_404:311:double_nextAfter(double,double): direction < 0  =>   direction > 0
ROR_405:311:double_nextAfter(double,double): direction < 0  =>   direction >= 0
ROR_406:311:double_nextAfter(double,double): direction < 0  =>   direction <= 0
ROR_407:311:double_nextAfter(double,double): direction < 0  =>   direction == 0
ROR_408:311:double_nextAfter(double,double): direction < 0  =>   direction != 0
ROR_409:311:double_nextAfter(double,double): direction < 0  =>   true
ROR_410:311:double_nextAfter(double,double): direction < 0  =>   false
ROR_411:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   d * (direction - d) > 0
ROR_412:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   d * (direction - d) < 0
ROR_413:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   d * (direction - d) <= 0
ROR_414:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   d * (direction - d) == 0
ROR_415:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   d * (direction - d) != 0
ROR_416:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   true
ROR_417:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>   false
ROR_418:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   mantissa > 0x000fffffffffffffL
ROR_419:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   mantissa >= 0x000fffffffffffffL
ROR_420:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   mantissa < 0x000fffffffffffffL
ROR_421:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   mantissa <= 0x000fffffffffffffL
ROR_422:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   mantissa != 0x000fffffffffffffL
ROR_423:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   true
ROR_424:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>   false
ROR_425:325:double_nextAfter(double,double): mantissa == 0L  =>   mantissa > 0L
ROR_426:325:double_nextAfter(double,double): mantissa == 0L  =>   mantissa >= 0L
ROR_427:325:double_nextAfter(double,double): mantissa == 0L  =>   mantissa < 0L
ROR_428:325:double_nextAfter(double,double): mantissa == 0L  =>   mantissa <= 0L
ROR_429:325:double_nextAfter(double,double): mantissa == 0L  =>   mantissa != 0L
ROR_430:325:double_nextAfter(double,double): mantissa == 0L  =>   true
ROR_431:325:double_nextAfter(double,double): mantissa == 0L  =>   false
ROR_432:372:double_roundUnscaled(double,double,int): sign == -1  =>   sign > -1
ROR_433:372:double_roundUnscaled(double,double,int): sign == -1  =>   sign >= -1
ROR_434:372:double_roundUnscaled(double,double,int): sign == -1  =>   sign < -1
ROR_435:372:double_roundUnscaled(double,double,int): sign == -1  =>   sign <= -1
ROR_436:372:double_roundUnscaled(double,double,int): sign == -1  =>   sign != -1
ROR_437:372:double_roundUnscaled(double,double,int): sign == -1  =>   true
ROR_438:372:double_roundUnscaled(double,double,int): sign == -1  =>   false
ROR_439:384:double_roundUnscaled(double,double,int): sign == -1  =>   sign > -1
ROR_440:384:double_roundUnscaled(double,double,int): sign == -1  =>   sign >= -1
ROR_441:384:double_roundUnscaled(double,double,int): sign == -1  =>   sign < -1
ROR_442:384:double_roundUnscaled(double,double,int): sign == -1  =>   sign <= -1
ROR_443:384:double_roundUnscaled(double,double,int): sign == -1  =>   sign != -1
ROR_444:384:double_roundUnscaled(double,double,int): sign == -1  =>   true
ROR_445:384:double_roundUnscaled(double,double,int): sign == -1  =>   false
ROR_446:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction >= 0.5
ROR_447:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction < 0.5
ROR_448:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction <= 0.5
ROR_449:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction == 0.5
ROR_450:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction != 0.5
ROR_451:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   true
ROR_452:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>   false
ROR_453:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction >= 0.5
ROR_454:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction < 0.5
ROR_455:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction <= 0.5
ROR_456:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction == 0.5
ROR_457:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   fraction != 0.5
ROR_458:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   true
ROR_459:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>   false
ROR_460:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   fraction > 0.5
ROR_461:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   fraction >= 0.5
ROR_462:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   fraction <= 0.5
ROR_463:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   fraction == 0.5
ROR_464:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   fraction != 0.5
ROR_465:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   true
ROR_466:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>   false
ROR_467:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   Math.floor( unscaled ) / 2.0 > Math.floor( Math.floor( unscaled ) / 2.0 )
ROR_468:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   Math.floor( unscaled ) / 2.0 >= Math.floor( Math.floor( unscaled ) / 2.0 )
ROR_469:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   Math.floor( unscaled ) / 2.0 < Math.floor( Math.floor( unscaled ) / 2.0 )
ROR_470:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   Math.floor( unscaled ) / 2.0 <= Math.floor( Math.floor( unscaled ) / 2.0 )
ROR_471:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   Math.floor( unscaled ) / 2.0 != Math.floor( Math.floor( unscaled ) / 2.0 )
ROR_472:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   true
ROR_473:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>   false
ROR_474:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   fraction > 0.5
ROR_475:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   fraction < 0.5
ROR_476:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   fraction <= 0.5
ROR_477:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   fraction == 0.5
ROR_478:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   fraction != 0.5
ROR_479:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   true
ROR_480:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>   false
ROR_481:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   unscaled > Math.floor( unscaled )
ROR_482:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   unscaled >= Math.floor( unscaled )
ROR_483:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   unscaled < Math.floor( unscaled )
ROR_484:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   unscaled <= Math.floor( unscaled )
ROR_485:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   unscaled == Math.floor( unscaled )
ROR_486:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   true
ROR_487:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>   false
ROR_488:453:byte_sign(byte): x == ZB  =>   x > ZB
ROR_489:453:byte_sign(byte): x == ZB  =>   x >= ZB
ROR_490:453:byte_sign(byte): x == ZB  =>   x < ZB
ROR_491:453:byte_sign(byte): x == ZB  =>   x <= ZB
ROR_492:453:byte_sign(byte): x == ZB  =>   x != ZB
ROR_493:453:byte_sign(byte): x == ZB  =>   true
ROR_494:453:byte_sign(byte): x == ZB  =>   false
ROR_495:453:byte_sign(byte): x > ZB  =>   x >= ZB
ROR_496:453:byte_sign(byte): x > ZB  =>   x < ZB
ROR_497:453:byte_sign(byte): x > ZB  =>   x <= ZB
ROR_498:453:byte_sign(byte): x > ZB  =>   x == ZB
ROR_499:453:byte_sign(byte): x > ZB  =>   x != ZB
ROR_500:453:byte_sign(byte): x > ZB  =>   true
ROR_501:453:byte_sign(byte): x > ZB  =>   false
ROR_502:461:double_sign(double): x == 0.0  =>   x > 0.0
ROR_503:461:double_sign(double): x == 0.0  =>   x >= 0.0
ROR_504:461:double_sign(double): x == 0.0  =>   x < 0.0
ROR_505:461:double_sign(double): x == 0.0  =>   x <= 0.0
ROR_506:461:double_sign(double): x == 0.0  =>   x != 0.0
ROR_507:461:double_sign(double): x == 0.0  =>   true
ROR_508:461:double_sign(double): x == 0.0  =>   false
ROR_509:461:double_sign(double): x > 0.0  =>   x >= 0.0
ROR_510:461:double_sign(double): x > 0.0  =>   x < 0.0
ROR_511:461:double_sign(double): x > 0.0  =>   x <= 0.0
ROR_512:461:double_sign(double): x > 0.0  =>   x == 0.0
ROR_513:461:double_sign(double): x > 0.0  =>   x != 0.0
ROR_514:461:double_sign(double): x > 0.0  =>   true
ROR_515:461:double_sign(double): x > 0.0  =>   false
ROR_516:469:float_sign(float): x == 0.0F  =>   x > 0.0F
ROR_517:469:float_sign(float): x == 0.0F  =>   x >= 0.0F
ROR_518:469:float_sign(float): x == 0.0F  =>   x < 0.0F
ROR_519:469:float_sign(float): x == 0.0F  =>   x <= 0.0F
ROR_520:469:float_sign(float): x == 0.0F  =>   x != 0.0F
ROR_521:469:float_sign(float): x == 0.0F  =>   true
ROR_522:469:float_sign(float): x == 0.0F  =>   false
ROR_523:469:float_sign(float): x > 0.0F  =>   x >= 0.0F
ROR_524:469:float_sign(float): x > 0.0F  =>   x < 0.0F
ROR_525:469:float_sign(float): x > 0.0F  =>   x <= 0.0F
ROR_526:469:float_sign(float): x > 0.0F  =>   x == 0.0F
ROR_527:469:float_sign(float): x > 0.0F  =>   x != 0.0F
ROR_528:469:float_sign(float): x > 0.0F  =>   true
ROR_529:469:float_sign(float): x > 0.0F  =>   false
ROR_530:474:int_sign(int): x == 0  =>   x > 0
ROR_531:474:int_sign(int): x == 0  =>   x >= 0
ROR_532:474:int_sign(int): x == 0  =>   x < 0
ROR_533:474:int_sign(int): x == 0  =>   x <= 0
ROR_534:474:int_sign(int): x == 0  =>   x != 0
ROR_535:474:int_sign(int): x == 0  =>   true
ROR_536:474:int_sign(int): x == 0  =>   false
ROR_537:474:int_sign(int): x > 0  =>   x >= 0
ROR_538:474:int_sign(int): x > 0  =>   x < 0
ROR_539:474:int_sign(int): x > 0  =>   x <= 0
ROR_540:474:int_sign(int): x > 0  =>   x == 0
ROR_541:474:int_sign(int): x > 0  =>   x != 0
ROR_542:474:int_sign(int): x > 0  =>   true
ROR_543:474:int_sign(int): x > 0  =>   false
ROR_544:479:long_sign(long): x == 0L  =>   x > 0L
ROR_545:479:long_sign(long): x == 0L  =>   x >= 0L
ROR_546:479:long_sign(long): x == 0L  =>   x < 0L
ROR_547:479:long_sign(long): x == 0L  =>   x <= 0L
ROR_548:479:long_sign(long): x == 0L  =>   x != 0L
ROR_549:479:long_sign(long): x == 0L  =>   true
ROR_550:479:long_sign(long): x == 0L  =>   false
ROR_551:479:long_sign(long): x > 0L  =>   x >= 0L
ROR_552:479:long_sign(long): x > 0L  =>   x < 0L
ROR_553:479:long_sign(long): x > 0L  =>   x <= 0L
ROR_554:479:long_sign(long): x > 0L  =>   x == 0L
ROR_555:479:long_sign(long): x > 0L  =>   x != 0L
ROR_556:479:long_sign(long): x > 0L  =>   true
ROR_557:479:long_sign(long): x > 0L  =>   false
ROR_558:484:short_sign(short): x == ZS  =>   x > ZS
ROR_559:484:short_sign(short): x == ZS  =>   x >= ZS
ROR_560:484:short_sign(short): x == ZS  =>   x < ZS
ROR_561:484:short_sign(short): x == ZS  =>   x <= ZS
ROR_562:484:short_sign(short): x == ZS  =>   x != ZS
ROR_563:484:short_sign(short): x == ZS  =>   true
ROR_564:484:short_sign(short): x == ZS  =>   false
ROR_565:484:short_sign(short): x > ZS  =>   x >= ZS
ROR_566:484:short_sign(short): x > ZS  =>   x < ZS
ROR_567:484:short_sign(short): x > ZS  =>   x <= ZS
ROR_568:484:short_sign(short): x > ZS  =>   x == ZS
ROR_569:484:short_sign(short): x > ZS  =>   x != ZS
ROR_570:484:short_sign(short): x > ZS  =>   true
ROR_571:484:short_sign(short): x > ZS  =>   false
ROR_572:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   s > Integer.MIN_VALUE
ROR_573:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   s >= Integer.MIN_VALUE
ROR_574:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   s <= Integer.MIN_VALUE
ROR_575:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   s == Integer.MIN_VALUE
ROR_576:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   s != Integer.MIN_VALUE
ROR_577:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   true
ROR_578:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>   false
ROR_579:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   s >= Integer.MAX_VALUE
ROR_580:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   s < Integer.MAX_VALUE
ROR_581:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   s <= Integer.MAX_VALUE
ROR_582:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   s == Integer.MAX_VALUE
ROR_583:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   s != Integer.MAX_VALUE
ROR_584:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   true
ROR_585:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>   false
ROR_586:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   b > Long.MIN_VALUE
ROR_587:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   b >= Long.MIN_VALUE
ROR_588:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   b < Long.MIN_VALUE
ROR_589:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   b <= Long.MIN_VALUE
ROR_590:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   b != Long.MIN_VALUE
ROR_591:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   true
ROR_592:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>   false
ROR_593:506:long_subAndCheck(long,long): a < 0  =>   a > 0
ROR_594:506:long_subAndCheck(long,long): a < 0  =>   a >= 0
ROR_595:506:long_subAndCheck(long,long): a < 0  =>   a <= 0
ROR_596:506:long_subAndCheck(long,long): a < 0  =>   a == 0
ROR_597:506:long_subAndCheck(long,long): a < 0  =>   a != 0
ROR_598:506:long_subAndCheck(long,long): a < 0  =>   true
ROR_599:506:long_subAndCheck(long,long): a < 0  =>   false
COR_1:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE || s > Integer.MAX_VALUE  =>   s < Integer.MIN_VALUE && s > Integer.MAX_VALUE
COR_2:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE || s > Integer.MAX_VALUE  =>   s < Integer.MIN_VALUE ^ s > Integer.MAX_VALUE
COR_3:78:long_binomialCoefficient(int,int): n == k || k == 0  =>   n == k && k == 0
COR_4:78:long_binomialCoefficient(int,int): n == k || k == 0  =>   n == k ^ k == 0
COR_5:81:long_binomialCoefficient(int,int): k == 1 || k == n - 1  =>   k == 1 && k == n - 1
COR_6:81:long_binomialCoefficient(int,int): k == 1 || k == n - 1  =>   k == 1 ^ k == n - 1
COR_7:104:double_binomialCoefficientLog(int,int): n == k || k == 0  =>   n == k && k == 0
COR_8:104:double_binomialCoefficientLog(int,int): n == k || k == 0  =>   n == k ^ k == 0
COR_9:107:double_binomialCoefficientLog(int,int): k == 1 || k == n - 1  =>   k == 1 && k == n - 1
COR_10:107:double_binomialCoefficientLog(int,int): k == 1 || k == n - 1  =>   k == 1 ^ k == n - 1
COR_11:127:boolean_equals(double,double): Double.isNaN( x ) && Double.isNaN( y )  =>   Double.isNaN( x ) || Double.isNaN( y )
COR_12:127:boolean_equals(double,double): Double.isNaN( x ) && Double.isNaN( y )  =>   Double.isNaN( x ) ^ Double.isNaN( y )
COR_13:127:boolean_equals(double,double): Double.isNaN( x ) && Double.isNaN( y ) || x == y  =>   Double.isNaN( x ) && Double.isNaN( y ) && x == y
COR_14:127:boolean_equals(double,double): Double.isNaN( x ) && Double.isNaN( y ) || x == y  =>   (Double.isNaN( x ) && Double.isNaN( y )) ^ x == y
COR_15:132:boolean_equals(double,double): x == null || y == null  =>   x == null && y == null
COR_16:132:boolean_equals(double,double): x == null || y == null  =>   x == null ^ y == null
COR_17:133:boolean_equals(double,double): x == null ^ y == null  =>   x == null && y == null
COR_18:133:boolean_equals(double,double): x == null ^ y == null  =>   x == null || y == null
COR_19:187:int_gcd(int,int): (u & 1) == 0 && (v & 1) == 0  =>   (u & 1) == 0 || (v & 1) == 0
COR_20:187:int_gcd(int,int): (u & 1) == 0 && (v & 1) == 0  =>   (u & 1) == 0 ^ (v & 1) == 0
COR_21:187:int_gcd(int,int): (u & 1) == 0 && (v & 1) == 0 && k < 31  =>   (u & 1) == 0 && (v & 1) == 0 || k < 31
COR_22:187:int_gcd(int,int): (u & 1) == 0 && (v & 1) == 0 && k < 31  =>   ((u & 1) == 0 && (v & 1) == 0) ^ k < 31
COR_23:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE || m > Integer.MAX_VALUE  =>   m < Integer.MIN_VALUE && m > Integer.MAX_VALUE
COR_24:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE || m > Integer.MAX_VALUE  =>   m < Integer.MIN_VALUE ^ m > Integer.MAX_VALUE
COR_25:307:double_nextAfter(double,double): Double.isNaN( d ) || Double.isInfinite( d )  =>   Double.isNaN( d ) && Double.isInfinite( d )
COR_26:307:double_nextAfter(double,double): Double.isNaN( d ) || Double.isInfinite( d )  =>   Double.isNaN( d ) ^ Double.isInfinite( d )
COR_27:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE || s > Integer.MAX_VALUE  =>   s < Integer.MIN_VALUE && s > Integer.MAX_VALUE
COR_28:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE || s > Integer.MAX_VALUE  =>   s < Integer.MIN_VALUE ^ s > Integer.MAX_VALUE
COD_1:133:boolean_equals(double,double):!(x == null ^ y == null) => x == null ^ y == null
COD_2:139:boolean_equals(double,double):!equals( x[i], y[i] ) => equals( x[i], y[i] )
COI_1:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE  =>  !(s < Integer.MIN_VALUE)
COI_2:32:int_addAndCheck(int,int): s > Integer.MAX_VALUE  =>  !(s > Integer.MAX_VALUE)
COI_3:32:int_addAndCheck(int,int): s < Integer.MIN_VALUE || s > Integer.MAX_VALUE  =>  !(s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)
COI_4:46:long_addAndCheck(long,long,java.lang.String): a > b  =>  !(a > b)
COI_5:49:long_addAndCheck(long,long,java.lang.String): a < 0  =>  !(a < 0)
COI_6:50:long_addAndCheck(long,long,java.lang.String): b < 0  =>  !(b < 0)
COI_7:51:long_addAndCheck(long,long,java.lang.String): Long.MIN_VALUE - b <= a  =>  !(Long.MIN_VALUE - b <= a)
COI_8:60:long_addAndCheck(long,long,java.lang.String): a <= Long.MAX_VALUE - b  =>  !(a <= Long.MAX_VALUE - b)
COI_9:72:long_binomialCoefficient(int,int): n < k  =>  !(n < k)
COI_10:75:long_binomialCoefficient(int,int): n < 0  =>  !(n < 0)
COI_11:78:long_binomialCoefficient(int,int): n == k  =>  !(n == k)
COI_12:78:long_binomialCoefficient(int,int): k == 0  =>  !(k == 0)
COI_13:78:long_binomialCoefficient(int,int): n == k || k == 0  =>  !(n == k || k == 0)
COI_14:81:long_binomialCoefficient(int,int): k == 1  =>  !(k == 1)
COI_15:81:long_binomialCoefficient(int,int): k == n - 1  =>  !(k == n - 1)
COI_16:81:long_binomialCoefficient(int,int): k == 1 || k == n - 1  =>  !(k == 1 || k == n - 1)
COI_17:85:long_binomialCoefficient(int,int): result == Long.MAX_VALUE  =>  !(result == Long.MAX_VALUE)
COI_18:98:double_binomialCoefficientLog(int,int): n < k  =>  !(n < k)
COI_19:101:double_binomialCoefficientLog(int,int): n < 0  =>  !(n < 0)
COI_20:104:double_binomialCoefficientLog(int,int): n == k  =>  !(n == k)
COI_21:104:double_binomialCoefficientLog(int,int): k == 0  =>  !(k == 0)
COI_22:104:double_binomialCoefficientLog(int,int): n == k || k == 0  =>  !(n == k || k == 0)
COI_23:107:double_binomialCoefficientLog(int,int): k == 1  =>  !(k == 1)
COI_24:107:double_binomialCoefficientLog(int,int): k == n - 1  =>  !(k == n - 1)
COI_25:107:double_binomialCoefficientLog(int,int): k == 1 || k == n - 1  =>  !(k == 1 || k == n - 1)
COI_26:111:double_binomialCoefficientLog(int,int): i <= n  =>  !(i <= n)
COI_27:114:double_binomialCoefficientLog(int,int): i <= n - k  =>  !(i <= n - k)
COI_28:127:boolean_equals(double,double): Double.isNaN( x ) && Double.isNaN( y )  =>  !(Double.isNaN( x ) && Double.isNaN( y ))
COI_29:127:boolean_equals(double,double): x == y  =>  !(x == y)
COI_30:127:boolean_equals(double,double): Double.isNaN( x ) && Double.isNaN( y ) || x == y  =>  !(Double.isNaN( x ) && Double.isNaN( y ) || x == y)
COI_31:132:boolean_equals(double,double): x == null  =>  !(x == null)
COI_32:132:boolean_equals(double,double): y == null  =>  !(y == null)
COI_33:132:boolean_equals(double,double): x == null || y == null  =>  !(x == null || y == null)
COI_34:135:boolean_equals(double,double): x.length != y.length  =>  !(x.length != y.length)
COI_35:138:boolean_equals(double,double): i < x.length  =>  !(i < x.length)
COI_36:149:long_factorial(int): result == Long.MAX_VALUE  =>  !(result == Long.MAX_VALUE)
COI_37:157:double_factorialDouble(int): n < 0  =>  !(n < 0)
COI_38:165:double_factorialLog(int): n < 0  =>  !(n < 0)
COI_39:169:double_factorialLog(int): i <= n  =>  !(i <= n)
COI_40:177:int_gcd(int,int): u * v == 0  =>  !(u * v == 0)
COI_41:180:int_gcd(int,int): u > 0  =>  !(u > 0)
COI_42:183:int_gcd(int,int): v > 0  =>  !(v > 0)
COI_43:187:int_gcd(int,int): (u & 1) == 0  =>  !((u & 1) == 0)
COI_44:187:int_gcd(int,int): (v & 1) == 0  =>  !((v & 1) == 0)
COI_45:187:int_gcd(int,int): (u & 1) == 0 && (v & 1) == 0  =>  !((u & 1) == 0 && (v & 1) == 0)
COI_46:187:int_gcd(int,int): k < 31  =>  !(k < 31)
COI_47:187:int_gcd(int,int): (u & 1) == 0 && (v & 1) == 0 && k < 31  =>  !((u & 1) == 0 && (v & 1) == 0 && k < 31)
COI_48:192:int_gcd(int,int): k == 31  =>  !(k == 31)
COI_49:195:int_gcd(int,int): (u & 1) == 1  =>  !((u & 1) == 1)
COI_50:197:int_gcd(int,int): (t & 1) == 0  =>  !((t & 1) == 0)
COI_51:200:int_gcd(int,int): t > 0  =>  !(t > 0)
COI_52:206:int_gcd(int,int): t != 0  =>  !(t != 0)
COI_53:212:byte_indicator(byte): x >= ZB  =>  !(x >= ZB)
COI_54:220:double_indicator(double): x >= 0.0  =>  !(x >= 0.0)
COI_55:228:float_indicator(float): x >= 0.0F  =>  !(x >= 0.0F)
COI_56:233:int_indicator(int): x >= 0  =>  !(x >= 0)
COI_57:238:long_indicator(long): x >= 0L  =>  !(x >= 0L)
COI_58:243:short_indicator(short): x >= ZS  =>  !(x >= ZS)
COI_59:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE  =>  !(m < Integer.MIN_VALUE)
COI_60:259:int_mulAndCheck(int,int): m > Integer.MAX_VALUE  =>  !(m > Integer.MAX_VALUE)
COI_61:259:int_mulAndCheck(int,int): m < Integer.MIN_VALUE || m > Integer.MAX_VALUE  =>  !(m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)
COI_62:269:long_mulAndCheck(long,long): a > b  =>  !(a > b)
COI_63:272:long_mulAndCheck(long,long): a < 0  =>  !(a < 0)
COI_64:273:long_mulAndCheck(long,long): b < 0  =>  !(b < 0)
COI_65:274:long_mulAndCheck(long,long): a >= Long.MAX_VALUE / b  =>  !(a >= Long.MAX_VALUE / b)
COI_66:280:long_mulAndCheck(long,long): b > 0  =>  !(b > 0)
COI_67:281:long_mulAndCheck(long,long): Long.MIN_VALUE / b <= a  =>  !(Long.MIN_VALUE / b <= a)
COI_68:291:long_mulAndCheck(long,long): a > 0  =>  !(a > 0)
COI_69:292:long_mulAndCheck(long,long): a <= Long.MAX_VALUE / b  =>  !(a <= Long.MAX_VALUE / b)
COI_70:307:double_nextAfter(double,double): Double.isNaN( d ) || Double.isInfinite( d )  =>  !(Double.isNaN( d ) || Double.isInfinite( d ))
COI_71:310:double_nextAfter(double,double): d == 0  =>  !(d == 0)
COI_72:311:double_nextAfter(double,double): direction < 0  =>  !(direction < 0)
COI_73:318:double_nextAfter(double,double): d * (direction - d) >= 0  =>  !(d * (direction - d) >= 0)
COI_74:319:double_nextAfter(double,double): mantissa == 0x000fffffffffffffL  =>  !(mantissa == 0x000fffffffffffffL)
COI_75:325:double_nextAfter(double,double): mantissa == 0L  =>  !(mantissa == 0L)
COI_76:372:double_roundUnscaled(double,double,int): sign == -1  =>  !(sign == -1)
COI_77:384:double_roundUnscaled(double,double,int): sign == -1  =>  !(sign == -1)
COI_78:395:double_roundUnscaled(double,double,int): fraction > 0.5  =>  !(fraction > 0.5)
COI_79:406:double_roundUnscaled(double,double,int): fraction > 0.5  =>  !(fraction > 0.5)
COI_80:409:double_roundUnscaled(double,double,int): fraction < 0.5  =>  !(fraction < 0.5)
COI_81:412:double_roundUnscaled(double,double,int): Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )  =>  !(Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 ))
COI_82:426:double_roundUnscaled(double,double,int): fraction >= 0.5  =>  !(fraction >= 0.5)
COI_83:435:double_roundUnscaled(double,double,int): unscaled != Math.floor( unscaled )  =>  !(unscaled != Math.floor( unscaled ))
COI_84:453:byte_sign(byte): x == ZB  =>  !(x == ZB)
COI_85:453:byte_sign(byte): x > ZB  =>  !(x > ZB)
COI_86:461:double_sign(double): x == 0.0  =>  !(x == 0.0)
COI_87:461:double_sign(double): x > 0.0  =>  !(x > 0.0)
COI_88:469:float_sign(float): x == 0.0F  =>  !(x == 0.0F)
COI_89:469:float_sign(float): x > 0.0F  =>  !(x > 0.0F)
COI_90:474:int_sign(int): x == 0  =>  !(x == 0)
COI_91:474:int_sign(int): x > 0  =>  !(x > 0)
COI_92:479:long_sign(long): x == 0L  =>  !(x == 0L)
COI_93:479:long_sign(long): x > 0L  =>  !(x > 0L)
COI_94:484:short_sign(short): x == ZS  =>  !(x == ZS)
COI_95:484:short_sign(short): x > ZS  =>  !(x > ZS)
COI_96:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE  =>  !(s < Integer.MIN_VALUE)
COI_97:495:int_subAndCheck(int,int): s > Integer.MAX_VALUE  =>  !(s > Integer.MAX_VALUE)
COI_98:495:int_subAndCheck(int,int): s < Integer.MIN_VALUE || s > Integer.MAX_VALUE  =>  !(s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)
COI_99:505:long_subAndCheck(long,long): b == Long.MIN_VALUE  =>  !(b == Long.MIN_VALUE)
COI_100:506:long_subAndCheck(long,long): a < 0  =>  !(a < 0)
SOR_1:207:int_gcd(int,int): 1 << k  =>   1 >> k
SOR_2:207:int_gcd(int,int): 1 << k  =>   1 >>> k
LOR_1:187:int_gcd(int,int): u & 1  =>   u | 1
LOR_2:187:int_gcd(int,int): u & 1  =>   u ^ 1
LOR_3:187:int_gcd(int,int): v & 1  =>   v | 1
LOR_4:187:int_gcd(int,int): v & 1  =>   v ^ 1
LOR_5:195:int_gcd(int,int): u & 1  =>   u | 1
LOR_6:195:int_gcd(int,int): u & 1  =>   u ^ 1
LOR_7:197:int_gcd(int,int): t & 1  =>   t | 1
LOR_8:197:int_gcd(int,int): t & 1  =>   t ^ 1
LOR_9:315:double_nextAfter(double,double): bits & 0x8000000000000000L  =>   bits | 0x8000000000000000L
LOR_10:315:double_nextAfter(double,double): bits & 0x8000000000000000L  =>   bits ^ 0x8000000000000000L
LOR_11:316:double_nextAfter(double,double): bits & 0x7ff0000000000000L  =>   bits | 0x7ff0000000000000L
LOR_12:316:double_nextAfter(double,double): bits & 0x7ff0000000000000L  =>   bits ^ 0x7ff0000000000000L
LOR_13:317:double_nextAfter(double,double): bits & 0x000fffffffffffffL  =>   bits | 0x000fffffffffffffL
LOR_14:317:double_nextAfter(double,double): bits & 0x000fffffffffffffL  =>   bits ^ 0x000fffffffffffffL
LOR_15:320:double_nextAfter(double,double): sign | exponent + 0x0010000000000000L  =>   sign & exponent + 0x0010000000000000L
LOR_16:320:double_nextAfter(double,double): sign | exponent + 0x0010000000000000L  =>   sign ^ exponent + 0x0010000000000000L
LOR_17:322:double_nextAfter(double,double): sign | exponent  =>   sign & exponent
LOR_18:322:double_nextAfter(double,double): sign | exponent  =>   sign ^ exponent
LOR_19:322:double_nextAfter(double,double): sign | exponent | mantissa + 1  =>   (sign | exponent) & mantissa + 1
LOR_20:322:double_nextAfter(double,double): sign | exponent | mantissa + 1  =>   (sign | exponent) ^ mantissa + 1
LOR_21:326:double_nextAfter(double,double): sign | exponent - 0x0010000000000000L  =>   sign & exponent - 0x0010000000000000L
LOR_22:326:double_nextAfter(double,double): sign | exponent - 0x0010000000000000L  =>   sign ^ exponent - 0x0010000000000000L
LOR_23:326:double_nextAfter(double,double): sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL  =>   (sign | exponent - 0x0010000000000000L) & 0x000fffffffffffffL
LOR_24:326:double_nextAfter(double,double): sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL  =>   (sign | exponent - 0x0010000000000000L) ^ 0x000fffffffffffffL
LOR_25:328:double_nextAfter(double,double): sign | exponent  =>   sign & exponent
LOR_26:328:double_nextAfter(double,double): sign | exponent  =>   sign ^ exponent
LOR_27:328:double_nextAfter(double,double): sign | exponent | mantissa - 1  =>   (sign | exponent) & mantissa - 1
LOR_28:328:double_nextAfter(double,double): sign | exponent | mantissa - 1  =>   (sign | exponent) ^ mantissa - 1
LOI_2:31:int_addAndCheck(int,int):x => ~x
LOI_3:31:int_addAndCheck(int,int):y => ~y
LOI_4:32:int_addAndCheck(int,int):s => ~s
LOI_5:32:int_addAndCheck(int,int):Integer.MIN_VALUE => ~Integer.MIN_VALUE
LOI_6:32:int_addAndCheck(int,int):s => ~s
LOI_7:32:int_addAndCheck(int,int):Integer.MAX_VALUE => ~Integer.MAX_VALUE
LOI_8:35:int_addAndCheck(int,int):s => ~s
LOI_9:40:long_addAndCheck(long,long):a => ~a
LOI_10:40:long_addAndCheck(long,long):b => ~b
LOI_11:46:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_12:46:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_13:47:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_14:47:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_15:49:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_16:50:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_17:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE => ~Long.MIN_VALUE
LOI_18:51:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_19:51:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_20:52:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_21:52:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_22:57:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_23:57:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_24:60:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_25:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE => ~Long.MAX_VALUE
LOI_26:60:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_27:61:long_addAndCheck(long,long,java.lang.String):a => ~a
LOI_28:61:long_addAndCheck(long,long,java.lang.String):b => ~b
LOI_29:67:long_addAndCheck(long,long,java.lang.String):ret => ~ret
LOI_30:72:long_binomialCoefficient(int,int):n => ~n
LOI_31:72:long_binomialCoefficient(int,int):k => ~k
LOI_32:75:long_binomialCoefficient(int,int):n => ~n
LOI_33:78:long_binomialCoefficient(int,int):n => ~n
LOI_34:78:long_binomialCoefficient(int,int):k => ~k
LOI_35:78:long_binomialCoefficient(int,int):k => ~k
LOI_36:81:long_binomialCoefficient(int,int):k => ~k
LOI_37:81:long_binomialCoefficient(int,int):k => ~k
LOI_38:81:long_binomialCoefficient(int,int):n => ~n
LOI_39:82:long_binomialCoefficient(int,int):n => ~n
LOI_40:84:long_binomialCoefficient(int,int):n => ~n
LOI_41:84:long_binomialCoefficient(int,int):k => ~k
LOI_42:85:long_binomialCoefficient(int,int):result => ~result
LOI_43:85:long_binomialCoefficient(int,int):Long.MAX_VALUE => ~Long.MAX_VALUE
LOI_44:88:long_binomialCoefficient(int,int):result => ~result
LOI_45:93:double_binomialCoefficientDouble(int,int):n => ~n
LOI_46:93:double_binomialCoefficientDouble(int,int):k => ~k
LOI_47:98:double_binomialCoefficientLog(int,int):n => ~n
LOI_48:98:double_binomialCoefficientLog(int,int):k => ~k
LOI_49:101:double_binomialCoefficientLog(int,int):n => ~n
LOI_50:104:double_binomialCoefficientLog(int,int):n => ~n
LOI_51:104:double_binomialCoefficientLog(int,int):k => ~k
LOI_52:104:double_binomialCoefficientLog(int,int):k => ~k
LOI_53:107:double_binomialCoefficientLog(int,int):k => ~k
LOI_54:107:double_binomialCoefficientLog(int,int):k => ~k
LOI_55:107:double_binomialCoefficientLog(int,int):n => ~n
LOI_56:108:double_binomialCoefficientLog(int,int):n => ~n
LOI_57:111:double_binomialCoefficientLog(int,int):k => ~k
LOI_58:111:double_binomialCoefficientLog(int,int):i => ~i
LOI_59:111:double_binomialCoefficientLog(int,int):n => ~n
LOI_60:111:double_binomialCoefficientLog(int,int):i => ~i
LOI_61:112:double_binomialCoefficientLog(int,int):i => ~i
LOI_62:114:double_binomialCoefficientLog(int,int):i => ~i
LOI_63:114:double_binomialCoefficientLog(int,int):n => ~n
LOI_64:114:double_binomialCoefficientLog(int,int):k => ~k
LOI_65:114:double_binomialCoefficientLog(int,int):i => ~i
LOI_66:115:double_binomialCoefficientLog(int,int):i => ~i
LOI_67:117:double_binomialCoefficientLog(int,int):logSum => ~logSum
LOI_68:122:double_cosh(double):x => ~x
LOI_69:122:double_cosh(double):x => ~x
LOI_70:127:boolean_equals(double,double):x => ~x
LOI_71:127:boolean_equals(double,double):y => ~y
LOI_72:127:boolean_equals(double,double):x => ~x
LOI_73:127:boolean_equals(double,double):y => ~y
LOI_74:135:boolean_equals(double,double):x.length => ~x.length
LOI_75:135:boolean_equals(double,double):y.length => ~y.length
LOI_76:138:boolean_equals(double,double):i => ~i
LOI_77:138:boolean_equals(double,double):x.length => ~x.length
LOI_78:138:boolean_equals(double,double):i => ~i
LOI_79:139:boolean_equals(double,double):i => ~i
LOI_80:139:boolean_equals(double,double):i => ~i
LOI_81:148:long_factorial(int):n => ~n
LOI_82:149:long_factorial(int):result => ~result
LOI_83:149:long_factorial(int):Long.MAX_VALUE => ~Long.MAX_VALUE
LOI_84:152:long_factorial(int):result => ~result
LOI_85:157:double_factorialDouble(int):n => ~n
LOI_86:160:double_factorialDouble(int):n => ~n
LOI_87:165:double_factorialLog(int):n => ~n
LOI_88:169:double_factorialLog(int):i => ~i
LOI_89:169:double_factorialLog(int):n => ~n
LOI_90:169:double_factorialLog(int):i => ~i
LOI_91:170:double_factorialLog(int):i => ~i
LOI_92:172:double_factorialLog(int):logSum => ~logSum
LOI_93:177:int_gcd(int,int):u => ~u
LOI_94:177:int_gcd(int,int):v => ~v
LOI_95:178:int_gcd(int,int):u => ~u
LOI_96:178:int_gcd(int,int):v => ~v
LOI_97:180:int_gcd(int,int):u => ~u
LOI_98:181:int_gcd(int,int):u => ~u
LOI_99:183:int_gcd(int,int):v => ~v
LOI_100:184:int_gcd(int,int):v => ~v
LOI_101:187:int_gcd(int,int):u => ~u
LOI_102:187:int_gcd(int,int):v => ~v
LOI_103:187:int_gcd(int,int):k => ~k
LOI_104:190:int_gcd(int,int):k => ~k
LOI_105:192:int_gcd(int,int):k => ~k
LOI_106:195:int_gcd(int,int):u => ~u
LOI_107:195:int_gcd(int,int):v => ~v
LOI_108:195:int_gcd(int,int):u => ~u
LOI_109:197:int_gcd(int,int):t => ~t
LOI_110:200:int_gcd(int,int):t => ~t
LOI_111:201:int_gcd(int,int):t => ~t
LOI_112:203:int_gcd(int,int):t => ~t
LOI_113:205:int_gcd(int,int):v => ~v
LOI_114:205:int_gcd(int,int):u => ~u
LOI_115:206:int_gcd(int,int):t => ~t
LOI_116:207:int_gcd(int,int):u => ~u
LOI_117:207:int_gcd(int,int):k => ~k
LOI_118:212:byte_indicator(byte):x => ~x
LOI_119:212:byte_indicator(byte):ZB => ~ZB
LOI_120:212:byte_indicator(byte):PB => ~PB
LOI_121:212:byte_indicator(byte):NB => ~NB
LOI_122:217:double_indicator(double):x => ~x
LOI_123:218:double_indicator(double):Double.NaN => ~Double.NaN
LOI_124:220:double_indicator(double):x => ~x
LOI_125:225:float_indicator(float):x => ~x
LOI_126:226:float_indicator(float):Float.NaN => ~Float.NaN
LOI_127:228:float_indicator(float):x => ~x
LOI_128:233:int_indicator(int):x => ~x
LOI_129:238:long_indicator(long):x => ~x
LOI_130:243:short_indicator(short):x => ~x
LOI_131:243:short_indicator(short):ZS => ~ZS
LOI_132:243:short_indicator(short):PS => ~PS
LOI_133:243:short_indicator(short):NS => ~NS
LOI_134:248:int_lcm(int,int):a => ~a
LOI_135:248:int_lcm(int,int):a => ~a
LOI_136:248:int_lcm(int,int):b => ~b
LOI_137:248:int_lcm(int,int):b => ~b
LOI_138:253:double_log(double,double):x => ~x
LOI_139:253:double_log(double,double):base => ~base
LOI_140:258:int_mulAndCheck(int,int):x => ~x
LOI_141:258:int_mulAndCheck(int,int):y => ~y
LOI_142:259:int_mulAndCheck(int,int):m => ~m
LOI_143:259:int_mulAndCheck(int,int):Integer.MIN_VALUE => ~Integer.MIN_VALUE
LOI_144:259:int_mulAndCheck(int,int):m => ~m
LOI_145:259:int_mulAndCheck(int,int):Integer.MAX_VALUE => ~Integer.MAX_VALUE
LOI_146:262:int_mulAndCheck(int,int):m => ~m
LOI_147:269:long_mulAndCheck(long,long):a => ~a
LOI_148:269:long_mulAndCheck(long,long):b => ~b
LOI_149:270:long_mulAndCheck(long,long):b => ~b
LOI_150:270:long_mulAndCheck(long,long):a => ~a
LOI_151:272:long_mulAndCheck(long,long):a => ~a
LOI_152:273:long_mulAndCheck(long,long):b => ~b
LOI_153:274:long_mulAndCheck(long,long):a => ~a
LOI_154:274:long_mulAndCheck(long,long):Long.MAX_VALUE => ~Long.MAX_VALUE
LOI_155:274:long_mulAndCheck(long,long):b => ~b
LOI_156:275:long_mulAndCheck(long,long):a => ~a
LOI_157:275:long_mulAndCheck(long,long):b => ~b
LOI_158:280:long_mulAndCheck(long,long):b => ~b
LOI_159:281:long_mulAndCheck(long,long):Long.MIN_VALUE => ~Long.MIN_VALUE
LOI_160:281:long_mulAndCheck(long,long):b => ~b
LOI_161:281:long_mulAndCheck(long,long):a => ~a
LOI_162:282:long_mulAndCheck(long,long):a => ~a
LOI_163:282:long_mulAndCheck(long,long):b => ~b
LOI_164:291:long_mulAndCheck(long,long):a => ~a
LOI_165:292:long_mulAndCheck(long,long):a => ~a
LOI_166:292:long_mulAndCheck(long,long):Long.MAX_VALUE => ~Long.MAX_VALUE
LOI_167:292:long_mulAndCheck(long,long):b => ~b
LOI_168:293:long_mulAndCheck(long,long):a => ~a
LOI_169:293:long_mulAndCheck(long,long):b => ~b
LOI_170:302:long_mulAndCheck(long,long):ret => ~ret
LOI_171:307:double_nextAfter(double,double):d => ~d
LOI_172:307:double_nextAfter(double,double):d => ~d
LOI_173:308:double_nextAfter(double,double):d => ~d
LOI_174:310:double_nextAfter(double,double):d => ~d
LOI_175:311:double_nextAfter(double,double):direction => ~direction
LOI_176:311:double_nextAfter(double,double):Double.MIN_VALUE => ~Double.MIN_VALUE
LOI_177:311:double_nextAfter(double,double):Double.MIN_VALUE => ~Double.MIN_VALUE
LOI_178:314:double_nextAfter(double,double):d => ~d
LOI_179:315:double_nextAfter(double,double):bits => ~bits
LOI_180:316:double_nextAfter(double,double):bits => ~bits
LOI_181:317:double_nextAfter(double,double):bits => ~bits
LOI_182:318:double_nextAfter(double,double):d => ~d
LOI_183:318:double_nextAfter(double,double):direction => ~direction
LOI_184:318:double_nextAfter(double,double):d => ~d
LOI_185:319:double_nextAfter(double,double):mantissa => ~mantissa
LOI_186:320:double_nextAfter(double,double):sign => ~sign
LOI_187:320:double_nextAfter(double,double):exponent => ~exponent
LOI_188:322:double_nextAfter(double,double):sign => ~sign
LOI_189:322:double_nextAfter(double,double):exponent => ~exponent
LOI_190:322:double_nextAfter(double,double):mantissa => ~mantissa
LOI_191:325:double_nextAfter(double,double):mantissa => ~mantissa
LOI_192:326:double_nextAfter(double,double):sign => ~sign
LOI_193:326:double_nextAfter(double,double):exponent => ~exponent
LOI_194:328:double_nextAfter(double,double):sign => ~sign
LOI_195:328:double_nextAfter(double,double):exponent => ~exponent
LOI_196:328:double_nextAfter(double,double):mantissa => ~mantissa
LOI_197:335:double_normalizeAngle(double,double):a => ~a
LOI_198:335:double_normalizeAngle(double,double):TWO_PI => ~TWO_PI
LOI_199:335:double_normalizeAngle(double,double):a => ~a
LOI_200:335:double_normalizeAngle(double,double):Math.PI => ~Math.PI
LOI_201:335:double_normalizeAngle(double,double):center => ~center
LOI_202:335:double_normalizeAngle(double,double):TWO_PI => ~TWO_PI
LOI_203:340:double_round(double,int):x => ~x
LOI_204:340:double_round(double,int):scale => ~scale
LOI_205:340:double_round(double,int):BigDecimal.ROUND_HALF_UP => ~BigDecimal.ROUND_HALF_UP
LOI_206:346:double_round(double,int,int):x => ~x
LOI_207:346:double_round(double,int,int):scale => ~scale
LOI_208:346:double_round(double,int,int):roundingMethod => ~roundingMethod
LOI_209:348:double_round(double,int,int):x => ~x
LOI_210:349:double_round(double,int,int):x => ~x
LOI_211:351:double_round(double,int,int):Double.NaN => ~Double.NaN
LOI_212:358:float_round(float,int):x => ~x
LOI_213:358:float_round(float,int):scale => ~scale
LOI_214:358:float_round(float,int):BigDecimal.ROUND_HALF_UP => ~BigDecimal.ROUND_HALF_UP
LOI_215:363:float_round(float,int,int):x => ~x
LOI_216:364:float_round(float,int,int):scale => ~scale
LOI_217:364:float_round(float,int,int):sign => ~sign
LOI_218:365:float_round(float,int,int):x => ~x
LOI_219:365:float_round(float,int,int):factor => ~factor
LOI_220:365:float_round(float,int,int):sign => ~sign
LOI_221:365:float_round(float,int,int):roundingMethod => ~roundingMethod
LOI_222:365:float_round(float,int,int):factor => ~factor
LOI_223:370:double_roundUnscaled(double,double,int):roundingMethod => ~roundingMethod
LOI_224:371:double_roundUnscaled(double,double,int):BigDecimal.ROUND_CEILING => ~BigDecimal.ROUND_CEILING
LOI_225:372:double_roundUnscaled(double,double,int):sign => ~sign
LOI_226:373:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_227:373:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ~Double.NEGATIVE_INFINITY
LOI_228:375:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_229:375:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ~Double.POSITIVE_INFINITY
LOI_230:379:double_roundUnscaled(double,double,int):BigDecimal.ROUND_DOWN => ~BigDecimal.ROUND_DOWN
LOI_231:380:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_232:380:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ~Double.NEGATIVE_INFINITY
LOI_233:383:double_roundUnscaled(double,double,int):BigDecimal.ROUND_FLOOR => ~BigDecimal.ROUND_FLOOR
LOI_234:384:double_roundUnscaled(double,double,int):sign => ~sign
LOI_235:385:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_236:385:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ~Double.POSITIVE_INFINITY
LOI_237:387:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_238:387:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ~Double.NEGATIVE_INFINITY
LOI_239:391:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_DOWN => ~BigDecimal.ROUND_HALF_DOWN
LOI_240:393:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_241:393:double_roundUnscaled(double,double,int):Double.NEGATIVE_INFINITY => ~Double.NEGATIVE_INFINITY
LOI_242:394:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_243:394:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_244:395:double_roundUnscaled(double,double,int):fraction => ~fraction
LOI_245:396:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_246:398:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_247:403:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_EVEN => ~BigDecimal.ROUND_HALF_EVEN
LOI_248:405:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_249:405:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_250:406:double_roundUnscaled(double,double,int):fraction => ~fraction
LOI_251:407:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_252:409:double_roundUnscaled(double,double,int):fraction => ~fraction
LOI_253:410:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_254:412:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_255:412:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_256:413:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_257:415:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_258:422:double_roundUnscaled(double,double,int):BigDecimal.ROUND_HALF_UP => ~BigDecimal.ROUND_HALF_UP
LOI_259:424:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_260:424:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ~Double.POSITIVE_INFINITY
LOI_261:425:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_262:425:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_263:426:double_roundUnscaled(double,double,int):fraction => ~fraction
LOI_264:427:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_265:429:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_266:434:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UNNECESSARY => ~BigDecimal.ROUND_UNNECESSARY
LOI_267:435:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_268:435:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_269:440:double_roundUnscaled(double,double,int):BigDecimal.ROUND_UP => ~BigDecimal.ROUND_UP
LOI_270:441:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_271:441:double_roundUnscaled(double,double,int):Double.POSITIVE_INFINITY => ~Double.POSITIVE_INFINITY
LOI_272:448:double_roundUnscaled(double,double,int):unscaled => ~unscaled
LOI_273:453:byte_sign(byte):x => ~x
LOI_274:453:byte_sign(byte):ZB => ~ZB
LOI_275:453:byte_sign(byte):ZB => ~ZB
LOI_276:453:byte_sign(byte):x => ~x
LOI_277:453:byte_sign(byte):ZB => ~ZB
LOI_278:453:byte_sign(byte):PB => ~PB
LOI_279:453:byte_sign(byte):NB => ~NB
LOI_280:458:double_sign(double):x => ~x
LOI_281:459:double_sign(double):Double.NaN => ~Double.NaN
LOI_282:461:double_sign(double):x => ~x
LOI_283:461:double_sign(double):x => ~x
LOI_284:466:float_sign(float):x => ~x
LOI_285:467:float_sign(float):Float.NaN => ~Float.NaN
LOI_286:469:float_sign(float):x => ~x
LOI_287:469:float_sign(float):x => ~x
LOI_288:474:int_sign(int):x => ~x
LOI_289:474:int_sign(int):x => ~x
LOI_290:479:long_sign(long):x => ~x
LOI_291:479:long_sign(long):x => ~x
LOI_292:484:short_sign(short):x => ~x
LOI_293:484:short_sign(short):ZS => ~ZS
LOI_294:484:short_sign(short):ZS => ~ZS
LOI_295:484:short_sign(short):x => ~x
LOI_296:484:short_sign(short):ZS => ~ZS
LOI_297:484:short_sign(short):PS => ~PS
LOI_298:484:short_sign(short):NS => ~NS
LOI_299:489:double_sinh(double):x => ~x
LOI_300:489:double_sinh(double):x => ~x
LOI_301:494:int_subAndCheck(int,int):x => ~x
LOI_302:494:int_subAndCheck(int,int):y => ~y
LOI_303:495:int_subAndCheck(int,int):s => ~s
LOI_304:495:int_subAndCheck(int,int):Integer.MIN_VALUE => ~Integer.MIN_VALUE
LOI_305:495:int_subAndCheck(int,int):s => ~s
LOI_306:495:int_subAndCheck(int,int):Integer.MAX_VALUE => ~Integer.MAX_VALUE
LOI_307:498:int_subAndCheck(int,int):s => ~s
LOI_308:505:long_subAndCheck(long,long):b => ~b
LOI_309:505:long_subAndCheck(long,long):Long.MIN_VALUE => ~Long.MIN_VALUE
LOI_310:506:long_subAndCheck(long,long):a => ~a
LOI_311:507:long_subAndCheck(long,long):a => ~a
LOI_312:507:long_subAndCheck(long,long):b => ~b
LOI_313:512:long_subAndCheck(long,long):a => ~a
LOI_314:512:long_subAndCheck(long,long):b => ~b
LOI_315:514:long_subAndCheck(long,long):ret => ~ret
ASRS_1:112:double_binomialCoefficientLog(int,int):logSum += Math.log( (double) i ) => logSum /= Math.log( (double) i )
ASRS_2:112:double_binomialCoefficientLog(int,int):logSum += Math.log( (double) i ) => logSum *= Math.log( (double) i )
ASRS_3:112:double_binomialCoefficientLog(int,int):logSum += Math.log( (double) i ) => logSum -= Math.log( (double) i )
ASRS_4:112:double_binomialCoefficientLog(int,int):logSum += Math.log( (double) i ) => logSum %= Math.log( (double) i )
ASRS_5:115:double_binomialCoefficientLog(int,int):logSum -= Math.log( (double) i ) => logSum += Math.log( (double) i )
ASRS_6:115:double_binomialCoefficientLog(int,int):logSum -= Math.log( (double) i ) => logSum /= Math.log( (double) i )
ASRS_7:115:double_binomialCoefficientLog(int,int):logSum -= Math.log( (double) i ) => logSum *= Math.log( (double) i )
ASRS_8:115:double_binomialCoefficientLog(int,int):logSum -= Math.log( (double) i ) => logSum %= Math.log( (double) i )
ASRS_9:170:double_factorialLog(int):logSum += Math.log( (double) i ) => logSum /= Math.log( (double) i )
ASRS_10:170:double_factorialLog(int):logSum += Math.log( (double) i ) => logSum *= Math.log( (double) i )
ASRS_11:170:double_factorialLog(int):logSum += Math.log( (double) i ) => logSum -= Math.log( (double) i )
ASRS_12:170:double_factorialLog(int):logSum += Math.log( (double) i ) => logSum %= Math.log( (double) i )
ASRS_13:188:int_gcd(int,int):u /= 2 => u += 2
ASRS_14:188:int_gcd(int,int):u /= 2 => u *= 2
ASRS_15:188:int_gcd(int,int):u /= 2 => u -= 2
ASRS_16:188:int_gcd(int,int):u /= 2 => u %= 2
ASRS_17:189:int_gcd(int,int):v /= 2 => v += 2
ASRS_18:189:int_gcd(int,int):v /= 2 => v *= 2
ASRS_19:189:int_gcd(int,int):v /= 2 => v -= 2
ASRS_20:189:int_gcd(int,int):v /= 2 => v %= 2
ASRS_21:198:int_gcd(int,int):t /= 2 => t += 2
ASRS_22:198:int_gcd(int,int):t /= 2 => t *= 2
ASRS_23:198:int_gcd(int,int):t /= 2 => t -= 2
ASRS_24:198:int_gcd(int,int):t /= 2 => t %= 2
SDL_1:33:int_addAndCheck(int,int): long s = (long) x + (long) y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"overflow: add\" ); } return (int) s;  =>   long s = (long) x + (long) y; return (int) s;
SDL_2:33:int_addAndCheck(int,int): throw new java.lang.ArithmeticException( \"overflow: add\" );  =>  
SDL_3:35:int_addAndCheck(int,int): if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"overflow: add\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"overflow: add\" ); }
SDL_4:36:int_addAndCheck(int,int): return (int) s;  =>   return 0;
SDL_5:41:long_addAndCheck(long,long): return addAndCheck( a, b, \"overflow: add\" );  =>   return 0;
SDL_6:47:long_addAndCheck(long,long,java.lang.String): long ret; if (a > b) {     ret = addAndCheck( b, a, msg ); } else {     if (a < 0) {         if (b < 0) {             if (Long.MIN_VALUE - b <= a) {                 ret = a + b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = a + b;         }     } else {         if (a <= Long.MAX_VALUE - b) {             ret = a + b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } } return ret;  =>   long ret; return ret;
SDL_7:47:long_addAndCheck(long,long,java.lang.String): ret = addAndCheck( b, a, msg );  =>  
SDL_8:67:long_addAndCheck(long,long,java.lang.String): if (a > b) {     ret = addAndCheck( b, a, msg ); } else {     if (a < 0) {         if (b < 0) {             if (Long.MIN_VALUE - b <= a) {                 ret = a + b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = a + b;         }     } else {         if (a <= Long.MAX_VALUE - b) {             ret = a + b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } }  =>   if (true) {     ret = addAndCheck( b, a, msg ); } else {     if (a < 0) {         if (b < 0) {             if (Long.MIN_VALUE - b <= a) {                 ret = a + b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = a + b;         }     } else {         if (a <= Long.MAX_VALUE - b) {             ret = a + b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } }
SDL_9:49:long_addAndCheck(long,long,java.lang.String): if (a < 0) {     if (b < 0) {         if (Long.MIN_VALUE - b <= a) {             ret = a + b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = a + b;     } } else {     if (a <= Long.MAX_VALUE - b) {         ret = a + b;     } else {         throw new java.lang.ArithmeticException( msg );     } }  =>  
SDL_10:50:long_addAndCheck(long,long,java.lang.String): if (b < 0) {     if (Long.MIN_VALUE - b <= a) {         ret = a + b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = a + b; }  =>  
SDL_11:66:long_addAndCheck(long,long,java.lang.String): if (a < 0) {     if (b < 0) {         if (Long.MIN_VALUE - b <= a) {             ret = a + b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = a + b;     } } else {     if (a <= Long.MAX_VALUE - b) {         ret = a + b;     } else {         throw new java.lang.ArithmeticException( msg );     } }  =>   if (true) {     if (b < 0) {         if (Long.MIN_VALUE - b <= a) {             ret = a + b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = a + b;     } } else {     if (a <= Long.MAX_VALUE - b) {         ret = a + b;     } else {         throw new java.lang.ArithmeticException( msg );     } }
SDL_12:60:long_addAndCheck(long,long,java.lang.String): if (a <= Long.MAX_VALUE - b) {     ret = a + b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>  
SDL_13:51:long_addAndCheck(long,long,java.lang.String): if (Long.MIN_VALUE - b <= a) {     ret = a + b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>  
SDL_14:59:long_addAndCheck(long,long,java.lang.String): if (b < 0) {     if (Long.MIN_VALUE - b <= a) {         ret = a + b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = a + b; }  =>   if (true) {     if (Long.MIN_VALUE - b <= a) {         ret = a + b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = a + b; }
SDL_15:57:long_addAndCheck(long,long,java.lang.String): ret = a + b;  =>  
SDL_16:52:long_addAndCheck(long,long,java.lang.String): ret = a + b;  =>  
SDL_17:56:long_addAndCheck(long,long,java.lang.String): if (Long.MIN_VALUE - b <= a) {     ret = a + b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>   if (true) {     ret = a + b; } else {     throw new java.lang.ArithmeticException( msg ); }
SDL_18:54:long_addAndCheck(long,long,java.lang.String): throw new java.lang.ArithmeticException( msg );  =>  
SDL_19:61:long_addAndCheck(long,long,java.lang.String): ret = a + b;  =>  
SDL_20:65:long_addAndCheck(long,long,java.lang.String): if (a <= Long.MAX_VALUE - b) {     ret = a + b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>   if (true) {     ret = a + b; } else {     throw new java.lang.ArithmeticException( msg ); }
SDL_21:63:long_addAndCheck(long,long,java.lang.String): throw new java.lang.ArithmeticException( msg );  =>  
SDL_22:68:long_addAndCheck(long,long,java.lang.String): return ret;  =>   return 0;
SDL_23:86:long_binomialCoefficient(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;  =>   if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;
SDL_24:86:long_binomialCoefficient(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;
SDL_25:86:long_binomialCoefficient(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;
SDL_26:86:long_binomialCoefficient(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;
SDL_27:86:long_binomialCoefficient(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 1; } if (k == 1 || k == n - 1) {     return n; } long result = Math.round( binomialCoefficientDouble( n, k ) ); return result;
SDL_28:73:long_binomialCoefficient(int,int): throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" );  =>  
SDL_29:75:long_binomialCoefficient(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); }
SDL_30:76:long_binomialCoefficient(int,int): throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" );  =>  
SDL_31:78:long_binomialCoefficient(int,int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); }
SDL_32:81:long_binomialCoefficient(int,int): if (n == k || k == 0) {     return 1; }  =>   if (true) {     return 1; }
SDL_33:80:long_binomialCoefficient(int,int): return 1;  =>   return 0;
SDL_34:84:long_binomialCoefficient(int,int): if (k == 1 || k == n - 1) {     return n; }  =>   if (true) {     return n; }
SDL_35:83:long_binomialCoefficient(int,int): return n;  =>   return 0;
SDL_36:86:long_binomialCoefficient(int,int): throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" );  =>  
SDL_37:88:long_binomialCoefficient(int,int): if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); }
SDL_38:89:long_binomialCoefficient(int,int): return result;  =>   return 0;
SDL_39:94:double_binomialCoefficientDouble(int,int): return Math.floor( Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 );  =>   return 0;
SDL_40:115:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;  =>   if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;
SDL_41:115:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;
SDL_42:115:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;
SDL_43:115:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;
SDL_44:115:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;
SDL_45:115:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); } return logSum;  =>   if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); } if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); } if (n == k || k == 0) {     return 0; } if (k == 1 || k == n - 1) {     return Math.log( (double) n ); } double logSum = 0; for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); } return logSum;
SDL_46:99:double_binomialCoefficientLog(int,int): throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" );  =>  
SDL_47:101:double_binomialCoefficientLog(int,int): if (n < k) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\" ); }
SDL_48:102:double_binomialCoefficientLog(int,int): throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" );  =>  
SDL_49:104:double_binomialCoefficientLog(int,int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\" ); }
SDL_50:107:double_binomialCoefficientLog(int,int): if (n == k || k == 0) {     return 0; }  =>   if (true) {     return 0; }
SDL_51:110:double_binomialCoefficientLog(int,int): if (k == 1 || k == n - 1) {     return Math.log( (double) n ); }  =>   if (true) {     return Math.log( (double) n ); }
SDL_52:109:double_binomialCoefficientLog(int,int): return Math.log( (double) n );  =>   return 0;
SDL_53:112:double_binomialCoefficientLog(int,int): logSum += Math.log( (double) i );  =>  
SDL_54:114:double_binomialCoefficientLog(int,int): for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); }  =>   for (int i = k + 1;; i++) {     logSum += Math.log( (double) i ); }
SDL_55:114:double_binomialCoefficientLog(int,int): for (int i = k + 1; i <= n; i++) {     logSum += Math.log( (double) i ); }  =>   for (int i = k + 1; i <= n;) {     logSum += Math.log( (double) i ); }
SDL_56:115:double_binomialCoefficientLog(int,int): logSum -= Math.log( (double) i );  =>  
SDL_57:117:double_binomialCoefficientLog(int,int): for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); }  =>   for (int i = 2;; i++) {     logSum -= Math.log( (double) i ); }
SDL_58:117:double_binomialCoefficientLog(int,int): for (int i = 2; i <= n - k; i++) {     logSum -= Math.log( (double) i ); }  =>   for (int i = 2; i <= n - k;) {     logSum -= Math.log( (double) i ); }
SDL_59:118:double_binomialCoefficientLog(int,int): return logSum;  =>   return 0;
SDL_60:123:double_cosh(double): return (Math.exp( x ) + Math.exp( -x )) / 2.0;  =>   return 0;
SDL_61:128:boolean_equals(double,double): return Double.isNaN( x ) && Double.isNaN( y ) || x == y;  =>   return true;
SDL_62:128:boolean_equals(double,double): return Double.isNaN( x ) && Double.isNaN( y ) || x == y;  =>   return false;
SDL_63:141:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } } return true;  =>   if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } } return true;
SDL_64:141:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } } return true;  =>   if (x == null || y == null) {     return !(x == null ^ y == null); } for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } } return true;
SDL_65:139:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } } return true;  =>   if (x == null || y == null) {     return !(x == null ^ y == null); } if (x.length != y.length) {     return false; } return true;
SDL_66:135:boolean_equals(double,double): if (x == null || y == null) {     return !(x == null ^ y == null); }  =>   if (true) {     return !(x == null ^ y == null); }
SDL_67:134:boolean_equals(double,double): return !(x == null ^ y == null);  =>   return true;
SDL_68:134:boolean_equals(double,double): return !(x == null ^ y == null);  =>   return false;
SDL_69:138:boolean_equals(double,double): if (x.length != y.length) {     return false; }  =>   if (true) {     return false; }
SDL_70:137:boolean_equals(double,double): return false;  =>   return true;
SDL_71:139:boolean_equals(double,double): if (!equals( x[i], y[i] )) {     return false; }  =>  
SDL_72:143:boolean_equals(double,double): for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } }  =>   for (int i = 0;; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } }
SDL_73:143:boolean_equals(double,double): for (int i = 0; i < x.length; ++i) {     if (!equals( x[i], y[i] )) {         return false;     } }  =>   for (int i = 0; i < x.length;) {     if (!equals( x[i], y[i] )) {         return false;     } }
SDL_74:142:boolean_equals(double,double): if (!equals( x[i], y[i] )) {     return false; }  =>   if (true) {     return false; }
SDL_75:141:boolean_equals(double,double): return false;  =>   return true;
SDL_76:144:boolean_equals(double,double): return true;  =>   return false;
SDL_77:150:long_factorial(int): long result = Math.round( factorialDouble( n ) ); if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); } return result;  =>   long result = Math.round( factorialDouble( n ) ); return result;
SDL_78:150:long_factorial(int): throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" );  =>  
SDL_79:152:long_factorial(int): if (result == Long.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"result too large to represent in a long integer\" ); }
SDL_80:153:long_factorial(int): return result;  =>   return 0;
SDL_81:158:double_factorialDouble(int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for n!\" ); } return Math.floor( Math.exp( factorialLog( n ) ) + 0.5 );  =>   return Math.floor( Math.exp( factorialLog( n ) ) + 0.5 );
SDL_82:158:double_factorialDouble(int): throw new java.lang.IllegalArgumentException( \"must have n >= 0 for n!\" );  =>  
SDL_83:160:double_factorialDouble(int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for n!\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"must have n >= 0 for n!\" ); }
SDL_84:161:double_factorialDouble(int): return Math.floor( Math.exp( factorialLog( n ) ) + 0.5 );  =>   return 0;
SDL_85:170:double_factorialLog(int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n > 0 for n!\" ); } double logSum = 0; for (int i = 2; i <= n; i++) {     logSum += Math.log( (double) i ); } return logSum;  =>   double logSum = 0; for (int i = 2; i <= n; i++) {     logSum += Math.log( (double) i ); } return logSum;
SDL_86:170:double_factorialLog(int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n > 0 for n!\" ); } double logSum = 0; for (int i = 2; i <= n; i++) {     logSum += Math.log( (double) i ); } return logSum;  =>   if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n > 0 for n!\" ); } double logSum = 0; return logSum;
SDL_87:166:double_factorialLog(int): throw new java.lang.IllegalArgumentException( \"must have n > 0 for n!\" );  =>  
SDL_88:168:double_factorialLog(int): if (n < 0) {     throw new java.lang.IllegalArgumentException( \"must have n > 0 for n!\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"must have n > 0 for n!\" ); }
SDL_89:170:double_factorialLog(int): logSum += Math.log( (double) i );  =>  
SDL_90:172:double_factorialLog(int): for (int i = 2; i <= n; i++) {     logSum += Math.log( (double) i ); }  =>   for (int i = 2;; i++) {     logSum += Math.log( (double) i ); }
SDL_91:172:double_factorialLog(int): for (int i = 2; i <= n; i++) {     logSum += Math.log( (double) i ); }  =>   for (int i = 2; i <= n;) {     logSum += Math.log( (double) i ); }
SDL_92:173:double_factorialLog(int): return logSum;  =>   return 0;
SDL_93:205:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);  =>   if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);
SDL_94:205:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);  =>   if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);
SDL_95:205:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);  =>   if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);
SDL_96:203:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);  =>   if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);
SDL_97:205:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);  =>   if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);
SDL_98:197:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); do {     while ((t & 1) == 0) {         t /= 2;     }     if (t > 0) {         u = -t;     } else {         v = t;     }     t = (v - u) / 2; } while (t != 0); return -u * (1 << k);  =>   if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); } if (u > 0) {     u = -u; } if (v > 0) {     v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; } if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); } int t = (u & 1) == 1 ? v : -(u / 2); return -u * (1 << k);
SDL_99:180:int_gcd(int,int): if (u * v == 0) {     return Math.abs( u ) + Math.abs( v ); }  =>   if (true) {     return Math.abs( u ) + Math.abs( v ); }
SDL_100:179:int_gcd(int,int): return Math.abs( u ) + Math.abs( v );  =>   return 0;
SDL_101:181:int_gcd(int,int): u = -u;  =>  
SDL_102:183:int_gcd(int,int): if (u > 0) {     u = -u; }  =>   if (true) {     u = -u; }
SDL_103:184:int_gcd(int,int): v = -v;  =>  
SDL_104:186:int_gcd(int,int): if (v > 0) {     v = -v; }  =>   if (true) {     v = -v; }
SDL_105:190:int_gcd(int,int): u /= 2; v /= 2; k++;  =>   v /= 2; k++;
SDL_106:190:int_gcd(int,int): u /= 2; v /= 2; k++;  =>   u /= 2; k++;
SDL_107:190:int_gcd(int,int): u /= 2; v /= 2; k++;  =>   u /= 2; v /= 2;
SDL_108:192:int_gcd(int,int): while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {     u /= 2;     v /= 2;     k++; }  =>   while (true) {     u /= 2;     v /= 2;     k++; }
SDL_109:193:int_gcd(int,int): throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" );  =>  
SDL_110:195:int_gcd(int,int): if (k == 31) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"overflow: gcd is 2^31\" ); }
SDL_111:208:int_gcd(int,int): return -u * (1 << k);  =>   return 0;
SDL_112:218:double_indicator(double): if (Double.isNaN( x )) {     return Double.NaN; } return x >= 0.0 ? 1.0 : -1.0;  =>   return x >= 0.0 ? 1.0 : -1.0;
SDL_113:220:double_indicator(double): if (Double.isNaN( x )) {     return Double.NaN; }  =>   if (true) {     return Double.NaN; }
SDL_114:219:double_indicator(double): return Double.NaN;  =>   return 0;
SDL_115:221:double_indicator(double): return x >= 0.0 ? 1.0 : -1.0;  =>   return 0;
SDL_116:226:float_indicator(float): if (Float.isNaN( x )) {     return Float.NaN; } return x >= 0.0F ? 1.0F : -1.0F;  =>   return x >= 0.0F ? 1.0F : -1.0F;
SDL_117:228:float_indicator(float): if (Float.isNaN( x )) {     return Float.NaN; }  =>   if (true) {     return Float.NaN; }
SDL_118:227:float_indicator(float): return Float.NaN;  =>   return 0;
SDL_119:229:float_indicator(float): return x >= 0.0F ? 1.0F : -1.0F;  =>   return 0;
SDL_120:234:int_indicator(int): return x >= 0 ? 1 : -1;  =>   return 0;
SDL_121:239:long_indicator(long): return x >= 0L ? 1L : -1L;  =>   return 0;
SDL_122:244:short_indicator(short): return x >= ZS ? PS : NS;  =>   return 0;
SDL_123:249:int_lcm(int,int): return Math.abs( mulAndCheck( a / gcd( a, b ), b ) );  =>   return 0;
SDL_124:254:double_log(double,double): return Math.log( x ) / Math.log( base );  =>   return 0;
SDL_125:260:int_mulAndCheck(int,int): long m = (long) x * (long) y; if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"overflow: mul\" ); } return (int) m;  =>   long m = (long) x * (long) y; return (int) m;
SDL_126:260:int_mulAndCheck(int,int): throw new java.lang.ArithmeticException( \"overflow: mul\" );  =>  
SDL_127:262:int_mulAndCheck(int,int): if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"overflow: mul\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"overflow: mul\" ); }
SDL_128:263:int_mulAndCheck(int,int): return (int) m;  =>   return 0;
SDL_129:270:long_mulAndCheck(long,long): long ret; java.lang.String msg = \"overflow: multiply\"; if (a > b) {     ret = mulAndCheck( b, a ); } else {     if (a < 0) {         if (b < 0) {             if (a >= Long.MAX_VALUE / b) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             if (b > 0) {                 if (Long.MIN_VALUE / b <= a) {                     ret = a * b;                 } else {                     throw new java.lang.ArithmeticException( msg );                 }             } else {                 ret = 0;             }         }     } else {         if (a > 0) {             if (a <= Long.MAX_VALUE / b) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = 0;         }     } } return ret;  =>   long ret; java.lang.String msg = \"overflow: multiply\"; return ret;
SDL_130:270:long_mulAndCheck(long,long): ret = mulAndCheck( b, a );  =>  
SDL_131:302:long_mulAndCheck(long,long): if (a > b) {     ret = mulAndCheck( b, a ); } else {     if (a < 0) {         if (b < 0) {             if (a >= Long.MAX_VALUE / b) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             if (b > 0) {                 if (Long.MIN_VALUE / b <= a) {                     ret = a * b;                 } else {                     throw new java.lang.ArithmeticException( msg );                 }             } else {                 ret = 0;             }         }     } else {         if (a > 0) {             if (a <= Long.MAX_VALUE / b) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = 0;         }     } }  =>   if (true) {     ret = mulAndCheck( b, a ); } else {     if (a < 0) {         if (b < 0) {             if (a >= Long.MAX_VALUE / b) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             if (b > 0) {                 if (Long.MIN_VALUE / b <= a) {                     ret = a * b;                 } else {                     throw new java.lang.ArithmeticException( msg );                 }             } else {                 ret = 0;             }         }     } else {         if (a > 0) {             if (a <= Long.MAX_VALUE / b) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = 0;         }     } }
SDL_132:272:long_mulAndCheck(long,long): if (a < 0) {     if (b < 0) {         if (a >= Long.MAX_VALUE / b) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         if (b > 0) {             if (Long.MIN_VALUE / b <= a) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = 0;         }     } } else {     if (a > 0) {         if (a <= Long.MAX_VALUE / b) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = 0;     } }  =>  
SDL_133:273:long_mulAndCheck(long,long): if (b < 0) {     if (a >= Long.MAX_VALUE / b) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     if (b > 0) {         if (Long.MIN_VALUE / b <= a) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = 0;     } }  =>  
SDL_134:301:long_mulAndCheck(long,long): if (a < 0) {     if (b < 0) {         if (a >= Long.MAX_VALUE / b) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         if (b > 0) {             if (Long.MIN_VALUE / b <= a) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = 0;         }     } } else {     if (a > 0) {         if (a <= Long.MAX_VALUE / b) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = 0;     } }  =>   if (true) {     if (b < 0) {         if (a >= Long.MAX_VALUE / b) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         if (b > 0) {             if (Long.MIN_VALUE / b <= a) {                 ret = a * b;             } else {                 throw new java.lang.ArithmeticException( msg );             }         } else {             ret = 0;         }     } } else {     if (a > 0) {         if (a <= Long.MAX_VALUE / b) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = 0;     } }
SDL_135:291:long_mulAndCheck(long,long): if (a > 0) {     if (a <= Long.MAX_VALUE / b) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = 0; }  =>  
SDL_136:274:long_mulAndCheck(long,long): if (a >= Long.MAX_VALUE / b) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>  
SDL_137:290:long_mulAndCheck(long,long): if (b < 0) {     if (a >= Long.MAX_VALUE / b) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     if (b > 0) {         if (Long.MIN_VALUE / b <= a) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = 0;     } }  =>   if (true) {     if (a >= Long.MAX_VALUE / b) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     if (b > 0) {         if (Long.MIN_VALUE / b <= a) {             ret = a * b;         } else {             throw new java.lang.ArithmeticException( msg );         }     } else {         ret = 0;     } }
SDL_138:280:long_mulAndCheck(long,long): if (b > 0) {     if (Long.MIN_VALUE / b <= a) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = 0; }  =>  
SDL_139:275:long_mulAndCheck(long,long): ret = a * b;  =>  
SDL_140:279:long_mulAndCheck(long,long): if (a >= Long.MAX_VALUE / b) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>   if (true) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }
SDL_141:277:long_mulAndCheck(long,long): throw new java.lang.ArithmeticException( msg );  =>  
SDL_142:281:long_mulAndCheck(long,long): if (Long.MIN_VALUE / b <= a) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>  
SDL_143:289:long_mulAndCheck(long,long): if (b > 0) {     if (Long.MIN_VALUE / b <= a) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = 0; }  =>   if (true) {     if (Long.MIN_VALUE / b <= a) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = 0; }
SDL_144:287:long_mulAndCheck(long,long): ret = 0;  =>  
SDL_145:282:long_mulAndCheck(long,long): ret = a * b;  =>  
SDL_146:286:long_mulAndCheck(long,long): if (Long.MIN_VALUE / b <= a) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>   if (true) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }
SDL_147:284:long_mulAndCheck(long,long): throw new java.lang.ArithmeticException( msg );  =>  
SDL_148:292:long_mulAndCheck(long,long): if (a <= Long.MAX_VALUE / b) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>  
SDL_149:300:long_mulAndCheck(long,long): if (a > 0) {     if (a <= Long.MAX_VALUE / b) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = 0; }  =>   if (true) {     if (a <= Long.MAX_VALUE / b) {         ret = a * b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = 0; }
SDL_150:298:long_mulAndCheck(long,long): ret = 0;  =>  
SDL_151:293:long_mulAndCheck(long,long): ret = a * b;  =>  
SDL_152:297:long_mulAndCheck(long,long): if (a <= Long.MAX_VALUE / b) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>   if (true) {     ret = a * b; } else {     throw new java.lang.ArithmeticException( msg ); }
SDL_153:295:long_mulAndCheck(long,long): throw new java.lang.ArithmeticException( msg );  =>  
SDL_154:303:long_mulAndCheck(long,long): return ret;  =>   return 0;
SDL_155:324:double_nextAfter(double,double): if (Double.isNaN( d ) || Double.isInfinite( d )) {     return d; } else {     if (d == 0) {         return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE;     } } long bits = Double.doubleToLongBits( d ); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) {     if (mantissa == 0x000fffffffffffffL) {         return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa + 1 );     } } else {     if (mantissa == 0L) {         return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa - 1 );     } }  =>   long bits = Double.doubleToLongBits( d ); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) {     if (mantissa == 0x000fffffffffffffL) {         return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa + 1 );     } } else {     if (mantissa == 0L) {         return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa - 1 );     } }
SDL_156:318:double_nextAfter(double,double): if (Double.isNaN( d ) || Double.isInfinite( d )) {     return d; } else {     if (d == 0) {         return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE;     } } long bits = Double.doubleToLongBits( d ); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) {     if (mantissa == 0x000fffffffffffffL) {         return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa + 1 );     } } else {     if (mantissa == 0L) {         return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa - 1 );     } }  =>   if (Double.isNaN( d ) || Double.isInfinite( d )) {     return d; } else {     if (d == 0) {         return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE;     } } long bits = Double.doubleToLongBits( d ); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL;
SDL_157:314:double_nextAfter(double,double): if (Double.isNaN( d ) || Double.isInfinite( d )) {     return d; } else {     if (d == 0) {         return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE;     } }  =>   if (true) {     return d; } else {     if (d == 0) {         return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE;     } }
SDL_158:310:double_nextAfter(double,double): if (d == 0) {     return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE; }  =>  
SDL_159:309:double_nextAfter(double,double): return d;  =>   return 0;
SDL_160:313:double_nextAfter(double,double): if (d == 0) {     return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE; }  =>   if (true) {     return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE; }
SDL_161:312:double_nextAfter(double,double): return direction < 0 ? -Double.MIN_VALUE : Double.MIN_VALUE;  =>   return 0;
SDL_162:319:double_nextAfter(double,double): if (mantissa == 0x000fffffffffffffL) {     return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L ); } else {     return Double.longBitsToDouble( sign | exponent | mantissa + 1 ); }  =>  
SDL_163:331:double_nextAfter(double,double): if (d * (direction - d) >= 0) {     if (mantissa == 0x000fffffffffffffL) {         return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa + 1 );     } } else {     if (mantissa == 0L) {         return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa - 1 );     } }  =>   if (true) {     if (mantissa == 0x000fffffffffffffL) {         return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa + 1 );     } } else {     if (mantissa == 0L) {         return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL );     } else {         return Double.longBitsToDouble( sign | exponent | mantissa - 1 );     } }
SDL_164:325:double_nextAfter(double,double): if (mantissa == 0L) {     return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL ); } else {     return Double.longBitsToDouble( sign | exponent | mantissa - 1 ); }  =>  
SDL_165:324:double_nextAfter(double,double): if (mantissa == 0x000fffffffffffffL) {     return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L ); } else {     return Double.longBitsToDouble( sign | exponent | mantissa + 1 ); }  =>   if (true) {     return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L ); } else {     return Double.longBitsToDouble( sign | exponent | mantissa + 1 ); }
SDL_166:321:double_nextAfter(double,double): return Double.longBitsToDouble( sign | exponent + 0x0010000000000000L );  =>   return 0;
SDL_167:323:double_nextAfter(double,double): return Double.longBitsToDouble( sign | exponent | mantissa + 1 );  =>   return 0;
SDL_168:330:double_nextAfter(double,double): if (mantissa == 0L) {     return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL ); } else {     return Double.longBitsToDouble( sign | exponent | mantissa - 1 ); }  =>   if (true) {     return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL ); } else {     return Double.longBitsToDouble( sign | exponent | mantissa - 1 ); }
SDL_169:327:double_nextAfter(double,double): return Double.longBitsToDouble( sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL );  =>   return 0;
SDL_170:329:double_nextAfter(double,double): return Double.longBitsToDouble( sign | exponent | mantissa - 1 );  =>   return 0;
SDL_171:336:double_normalizeAngle(double,double): return a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI );  =>   return 0;
SDL_172:341:double_round(double,int): return round( x, scale, BigDecimal.ROUND_HALF_UP );  =>   return 0;
SDL_173:347:double_round(double,int,int): return (new java.math.BigDecimal( Double.toString( x ) )).setScale( scale, roundingMethod ).doubleValue();  =>   return 0;
SDL_174:359:float_round(float,int): return round( x, scale, BigDecimal.ROUND_HALF_UP );  =>   return 0;
SDL_175:366:float_round(float,int,int): return (float) roundUnscaled( x * factor, sign, roundingMethod ) / factor;  =>   return 0;
SDL_176:371:double_roundUnscaled(double,double,int): switch (roundingMethod) { case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" ); } return unscaled;  =>   return unscaled;
SDL_177:373:double_roundUnscaled(double,double,int): if (sign == -1) {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } else {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } break;  =>   break;
SDL_178:377:double_roundUnscaled(double,double,int): if (sign == -1) {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } else {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } break;  =>   if (sign == -1) {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } else {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); }
SDL_179:373:double_roundUnscaled(double,double,int): unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );  =>  
SDL_180:377:double_roundUnscaled(double,double,int): if (sign == -1) {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } else {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); }  =>   if (true) {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } else {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); }
SDL_181:375:double_roundUnscaled(double,double,int): unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );  =>  
SDL_182:381:double_roundUnscaled(double,double,int): unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); break;  =>   break;
SDL_183:381:double_roundUnscaled(double,double,int): unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); break;  =>   unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );
SDL_184:385:double_roundUnscaled(double,double,int): if (sign == -1) {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } else {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } break;  =>   break;
SDL_185:389:double_roundUnscaled(double,double,int): if (sign == -1) {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } else {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); } break;  =>   if (sign == -1) {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } else {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); }
SDL_186:385:double_roundUnscaled(double,double,int): unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );  =>  
SDL_187:389:double_roundUnscaled(double,double,int): if (sign == -1) {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } else {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); }  =>   if (true) {     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); } else {     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) ); }
SDL_188:387:double_roundUnscaled(double,double,int): unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );  =>  
SDL_189:392:double_roundUnscaled(double,double,int): {     unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );     double fraction = unscaled - Math.floor( unscaled );     if (fraction > 0.5) {         unscaled = Math.ceil( unscaled );     } else {         unscaled = Math.floor( unscaled );     }     break; }  =>  
SDL_190:404:double_roundUnscaled(double,double,int): {     double fraction = unscaled - Math.floor( unscaled );     if (fraction > 0.5) {         unscaled = Math.ceil( unscaled );     } else {         if (fraction < 0.5) {             unscaled = Math.floor( unscaled );         } else {             if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                 unscaled = Math.floor( unscaled );             } else {                 unscaled = Math.ceil( unscaled );             }         }     }     break; }  =>  
SDL_191:423:double_roundUnscaled(double,double,int): {     unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );     double fraction = unscaled - Math.floor( unscaled );     if (fraction >= 0.5) {         unscaled = Math.ceil( unscaled );     } else {         unscaled = Math.floor( unscaled );     }     break; }  =>  
SDL_192:436:double_roundUnscaled(double,double,int): if (unscaled != Math.floor( unscaled )) {     throw new java.lang.ArithmeticException( \"Inexact result from rounding\" ); } break;  =>   break;
SDL_193:438:double_roundUnscaled(double,double,int): if (unscaled != Math.floor( unscaled )) {     throw new java.lang.ArithmeticException( \"Inexact result from rounding\" ); } break;  =>   if (unscaled != Math.floor( unscaled )) {     throw new java.lang.ArithmeticException( \"Inexact result from rounding\" ); }
SDL_194:436:double_roundUnscaled(double,double,int): throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );  =>  
SDL_195:438:double_roundUnscaled(double,double,int): if (unscaled != Math.floor( unscaled )) {     throw new java.lang.ArithmeticException( \"Inexact result from rounding\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"Inexact result from rounding\" ); }
SDL_196:442:double_roundUnscaled(double,double,int): unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); break;  =>   break;
SDL_197:442:double_roundUnscaled(double,double,int): unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) ); break;  =>   unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );
SDL_198:445:double_roundUnscaled(double,double,int): throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>  
SDL_199:439:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_200:443:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_201:439:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_202:435:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_203:428:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_204:435:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_205:441:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_206:443:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );
SDL_207:444:double_roundUnscaled(double,double,int): case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break; default  :     throw new java.lang.IllegalArgumentException( \"Invalid rounding method.\" );  =>   case BigDecimal.ROUND_CEILING :     if (sign == -1) {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     } else {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_DOWN :     unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     break; case BigDecimal.ROUND_FLOOR :     if (sign == -1) {         unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     } else {         unscaled = Math.floor( nextAfter( unscaled, Double.NEGATIVE_INFINITY ) );     }     break; case BigDecimal.ROUND_HALF_DOWN :     {         unscaled = nextAfter( unscaled, Double.NEGATIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_HALF_EVEN :     {         double fraction = unscaled - Math.floor( unscaled );         if (fraction > 0.5) {             unscaled = Math.ceil( unscaled );         } else {             if (fraction < 0.5) {                 unscaled = Math.floor( unscaled );             } else {                 if (Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 )) {                     unscaled = Math.floor( unscaled );                 } else {                     unscaled = Math.ceil( unscaled );                 }             }         }         break;     } case BigDecimal.ROUND_HALF_UP :     {         unscaled = nextAfter( unscaled, Double.POSITIVE_INFINITY );         double fraction = unscaled - Math.floor( unscaled );         if (fraction >= 0.5) {             unscaled = Math.ceil( unscaled );         } else {             unscaled = Math.floor( unscaled );         }         break;     } case BigDecimal.ROUND_UNNECESSARY :     if (unscaled != Math.floor( unscaled )) {         throw new java.lang.ArithmeticException( \"Inexact result from rounding\" );     }     break; case BigDecimal.ROUND_UP :     unscaled = Math.ceil( nextAfter( unscaled, Double.POSITIVE_INFINITY ) );     break;
SDL_208:449:double_roundUnscaled(double,double,int): return unscaled;  =>   return 0;
SDL_209:459:double_sign(double): if (Double.isNaN( x )) {     return Double.NaN; } return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;  =>   return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
SDL_210:461:double_sign(double): if (Double.isNaN( x )) {     return Double.NaN; }  =>   if (true) {     return Double.NaN; }
SDL_211:460:double_sign(double): return Double.NaN;  =>   return 0;
SDL_212:462:double_sign(double): return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;  =>   return 0;
SDL_213:467:float_sign(float): if (Float.isNaN( x )) {     return Float.NaN; } return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;  =>   return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
SDL_214:469:float_sign(float): if (Float.isNaN( x )) {     return Float.NaN; }  =>   if (true) {     return Float.NaN; }
SDL_215:468:float_sign(float): return Float.NaN;  =>   return 0;
SDL_216:470:float_sign(float): return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;  =>   return 0;
SDL_217:475:int_sign(int): return x == 0 ? 0 : x > 0 ? 1 : -1;  =>   return 0;
SDL_218:480:long_sign(long): return x == 0L ? 0L : x > 0L ? 1L : -1L;  =>   return 0;
SDL_219:485:short_sign(short): return x == ZS ? ZS : x > ZS ? PS : NS;  =>   return 0;
SDL_220:490:double_sinh(double): return (Math.exp( x ) - Math.exp( -x )) / 2.0;  =>   return 0;
SDL_221:496:int_subAndCheck(int,int): long s = (long) x - (long) y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"overflow: subtract\" ); } return (int) s;  =>   long s = (long) x - (long) y; return (int) s;
SDL_222:496:int_subAndCheck(int,int): throw new java.lang.ArithmeticException( \"overflow: subtract\" );  =>  
SDL_223:498:int_subAndCheck(int,int): if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {     throw new java.lang.ArithmeticException( \"overflow: subtract\" ); }  =>   if (true) {     throw new java.lang.ArithmeticException( \"overflow: subtract\" ); }
SDL_224:499:int_subAndCheck(int,int): return (int) s;  =>   return 0;
SDL_225:506:long_subAndCheck(long,long): long ret; java.lang.String msg = \"overflow: subtract\"; if (b == Long.MIN_VALUE) {     if (a < 0) {         ret = a - b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = addAndCheck( a, -b, msg ); } return ret;  =>   long ret; java.lang.String msg = \"overflow: subtract\"; return ret;
SDL_226:506:long_subAndCheck(long,long): if (a < 0) {     ret = a - b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>  
SDL_227:514:long_subAndCheck(long,long): if (b == Long.MIN_VALUE) {     if (a < 0) {         ret = a - b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = addAndCheck( a, -b, msg ); }  =>   if (true) {     if (a < 0) {         ret = a - b;     } else {         throw new java.lang.ArithmeticException( msg );     } } else {     ret = addAndCheck( a, -b, msg ); }
SDL_228:512:long_subAndCheck(long,long): ret = addAndCheck( a, -b, msg );  =>  
SDL_229:507:long_subAndCheck(long,long): ret = a - b;  =>  
SDL_230:511:long_subAndCheck(long,long): if (a < 0) {     ret = a - b; } else {     throw new java.lang.ArithmeticException( msg ); }  =>   if (true) {     ret = a - b; } else {     throw new java.lang.ArithmeticException( msg ); }
SDL_231:509:long_subAndCheck(long,long): throw new java.lang.ArithmeticException( msg );  =>  
SDL_232:515:long_subAndCheck(long,long): return ret;  =>   return 0;
VDL_1:32:int_addAndCheck(int,int):s < Integer.MIN_VALUE => Integer.MIN_VALUE
VDL_2:32:int_addAndCheck(int,int):s > Integer.MAX_VALUE => Integer.MAX_VALUE
VDL_3:46:long_addAndCheck(long,long,java.lang.String):a > b => b
VDL_4:46:long_addAndCheck(long,long,java.lang.String):a > b => a
VDL_5:49:long_addAndCheck(long,long,java.lang.String):a < 0 => 0
VDL_6:50:long_addAndCheck(long,long,java.lang.String):b < 0 => 0
VDL_7:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => Long.MIN_VALUE
VDL_8:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b <= a => Long.MIN_VALUE - b
VDL_9:52:long_addAndCheck(long,long,java.lang.String):a + b => b
VDL_10:52:long_addAndCheck(long,long,java.lang.String):a + b => a
VDL_11:57:long_addAndCheck(long,long,java.lang.String):a + b => b
VDL_12:57:long_addAndCheck(long,long,java.lang.String):a + b => a
VDL_13:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => Long.MAX_VALUE
VDL_14:60:long_addAndCheck(long,long,java.lang.String):a <= Long.MAX_VALUE - b => Long.MAX_VALUE - b
VDL_15:61:long_addAndCheck(long,long,java.lang.String):a + b => b
VDL_16:61:long_addAndCheck(long,long,java.lang.String):a + b => a
VDL_17:72:long_binomialCoefficient(int,int):n < k => k
VDL_18:72:long_binomialCoefficient(int,int):n < k => n
VDL_19:75:long_binomialCoefficient(int,int):n < 0 => 0
VDL_20:78:long_binomialCoefficient(int,int):n == k => k
VDL_21:78:long_binomialCoefficient(int,int):n == k => n
VDL_22:78:long_binomialCoefficient(int,int):k == 0 => 0
VDL_23:81:long_binomialCoefficient(int,int):k == 1 => 1
VDL_24:81:long_binomialCoefficient(int,int):n - 1 => 1
VDL_25:81:long_binomialCoefficient(int,int):k == n - 1 => n - 1
VDL_26:85:long_binomialCoefficient(int,int):result == Long.MAX_VALUE => Long.MAX_VALUE
VDL_27:98:double_binomialCoefficientLog(int,int):n < k => k
VDL_28:98:double_binomialCoefficientLog(int,int):n < k => n
VDL_29:101:double_binomialCoefficientLog(int,int):n < 0 => 0
VDL_30:104:double_binomialCoefficientLog(int,int):n == k => k
VDL_31:104:double_binomialCoefficientLog(int,int):n == k => n
VDL_32:104:double_binomialCoefficientLog(int,int):k == 0 => 0
VDL_33:107:double_binomialCoefficientLog(int,int):k == 1 => 1
VDL_34:107:double_binomialCoefficientLog(int,int):n - 1 => 1
VDL_35:107:double_binomialCoefficientLog(int,int):k == n - 1 => n - 1
VDL_36:111:double_binomialCoefficientLog(int,int):k + 1 => 1
VDL_37:111:double_binomialCoefficientLog(int,int):i <= n => n
VDL_38:111:double_binomialCoefficientLog(int,int):i <= n => i
VDL_39:111:double_binomialCoefficientLog(int,int):i++ =>  
VDL_40:114:double_binomialCoefficientLog(int,int):n - k => k
VDL_41:114:double_binomialCoefficientLog(int,int):n - k => n
VDL_42:114:double_binomialCoefficientLog(int,int):i <= n - k => n - k
VDL_43:114:double_binomialCoefficientLog(int,int):i++ =>  
VDL_44:122:double_cosh(double):-x =>  
VDL_45:127:boolean_equals(double,double):x == y => y
VDL_46:127:boolean_equals(double,double):x == y => x
VDL_47:132:boolean_equals(double,double):x == null => null
VDL_48:132:boolean_equals(double,double):y == null => null
VDL_49:133:boolean_equals(double,double):x == null => null
VDL_50:133:boolean_equals(double,double):y == null => null
VDL_51:138:boolean_equals(double,double):i < x.length => x.length
VDL_52:138:boolean_equals(double,double):++i =>  
VDL_53:149:long_factorial(int):result == Long.MAX_VALUE => Long.MAX_VALUE
VDL_54:157:double_factorialDouble(int):n < 0 => 0
VDL_55:165:double_factorialLog(int):n < 0 => 0
VDL_56:169:double_factorialLog(int):i <= n => n
VDL_57:169:double_factorialLog(int):i <= n => i
VDL_58:169:double_factorialLog(int):i++ =>  
VDL_59:177:int_gcd(int,int):u * v => v
VDL_60:177:int_gcd(int,int):u * v => u
VDL_61:180:int_gcd(int,int):u > 0 => 0
VDL_62:181:int_gcd(int,int):-u =>  
VDL_63:183:int_gcd(int,int):v > 0 => 0
VDL_64:184:int_gcd(int,int):-v =>  
VDL_65:187:int_gcd(int,int):u & 1 => 1
VDL_66:187:int_gcd(int,int):v & 1 => 1
VDL_67:187:int_gcd(int,int):k < 31 => 31
VDL_68:190:int_gcd(int,int):k++ =>  
VDL_69:192:int_gcd(int,int):k == 31 => 31
VDL_70:195:int_gcd(int,int):u & 1 => 1
VDL_71:195:int_gcd(int,int):u / 2 => 2
VDL_72:197:int_gcd(int,int):t & 1 => 1
VDL_73:200:int_gcd(int,int):t > 0 => 0
VDL_74:201:int_gcd(int,int):-t =>  
VDL_75:205:int_gcd(int,int):v - u => u
VDL_76:205:int_gcd(int,int):v - u => v
VDL_77:206:int_gcd(int,int):t != 0 => 0
VDL_78:207:int_gcd(int,int):-u =>  
VDL_79:207:int_gcd(int,int):1 << k => 1
VDL_80:212:byte_indicator(byte):x >= ZB => ZB
VDL_81:212:byte_indicator(byte):x >= ZB => x
VDL_82:220:double_indicator(double):x >= 0.0 => 0.0
VDL_83:228:float_indicator(float):x >= 0.0F => 0.0F
VDL_84:233:int_indicator(int):x >= 0 => 0
VDL_85:238:long_indicator(long):x >= 0L => 0L
VDL_86:243:short_indicator(short):x >= ZS => ZS
VDL_87:243:short_indicator(short):x >= ZS => x
VDL_88:248:int_lcm(int,int):a / gcd( a, b ) => gcd( a, b )
VDL_89:259:int_mulAndCheck(int,int):m < Integer.MIN_VALUE => Integer.MIN_VALUE
VDL_90:259:int_mulAndCheck(int,int):m > Integer.MAX_VALUE => Integer.MAX_VALUE
VDL_91:269:long_mulAndCheck(long,long):a > b => b
VDL_92:269:long_mulAndCheck(long,long):a > b => a
VDL_93:272:long_mulAndCheck(long,long):a < 0 => 0
VDL_94:273:long_mulAndCheck(long,long):b < 0 => 0
VDL_95:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE
VDL_96:274:long_mulAndCheck(long,long):a >= Long.MAX_VALUE / b => Long.MAX_VALUE / b
VDL_97:275:long_mulAndCheck(long,long):a * b => b
VDL_98:275:long_mulAndCheck(long,long):a * b => a
VDL_99:280:long_mulAndCheck(long,long):b > 0 => 0
VDL_100:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => Long.MIN_VALUE
VDL_101:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b <= a => Long.MIN_VALUE / b
VDL_102:282:long_mulAndCheck(long,long):a * b => b
VDL_103:282:long_mulAndCheck(long,long):a * b => a
VDL_104:291:long_mulAndCheck(long,long):a > 0 => 0
VDL_105:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE
VDL_106:292:long_mulAndCheck(long,long):a <= Long.MAX_VALUE / b => Long.MAX_VALUE / b
VDL_107:293:long_mulAndCheck(long,long):a * b => b
VDL_108:293:long_mulAndCheck(long,long):a * b => a
VDL_109:310:double_nextAfter(double,double):d == 0 => 0
VDL_110:311:double_nextAfter(double,double):direction < 0 => 0
VDL_111:315:double_nextAfter(double,double):bits & 0x8000000000000000L => 0x8000000000000000L
VDL_112:316:double_nextAfter(double,double):bits & 0x7ff0000000000000L => 0x7ff0000000000000L
VDL_113:317:double_nextAfter(double,double):bits & 0x000fffffffffffffL => 0x000fffffffffffffL
VDL_114:318:double_nextAfter(double,double):direction - d => d
VDL_115:318:double_nextAfter(double,double):direction - d => direction
VDL_116:318:double_nextAfter(double,double):d * (direction - d) => direction - d
VDL_117:319:double_nextAfter(double,double):mantissa == 0x000fffffffffffffL => 0x000fffffffffffffL
VDL_118:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => 0x0010000000000000L
VDL_119:320:double_nextAfter(double,double):sign | exponent + 0x0010000000000000L => exponent + 0x0010000000000000L
VDL_120:322:double_nextAfter(double,double):sign | exponent => exponent
VDL_121:322:double_nextAfter(double,double):sign | exponent => sign
VDL_122:322:double_nextAfter(double,double):mantissa + 1 => 1
VDL_123:325:double_nextAfter(double,double):mantissa == 0L => 0L
VDL_124:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => 0x0010000000000000L
VDL_125:326:double_nextAfter(double,double):sign | exponent - 0x0010000000000000L => exponent - 0x0010000000000000L
VDL_126:328:double_nextAfter(double,double):sign | exponent => exponent
VDL_127:328:double_nextAfter(double,double):sign | exponent => sign
VDL_128:328:double_nextAfter(double,double):mantissa - 1 => 1
VDL_129:335:double_normalizeAngle(double,double):a + Math.PI => Math.PI
VDL_130:335:double_normalizeAngle(double,double):a + Math.PI - center => a + Math.PI
VDL_131:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => a + Math.PI - center
VDL_132:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => Math.floor( (a + Math.PI - center) / TWO_PI )
VDL_133:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI )
VDL_134:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => (float) Math.pow( 10.0f, scale )
VDL_135:365:float_round(float,int,int):x * factor => factor
VDL_136:365:float_round(float,int,int):x * factor => x
VDL_137:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => (float) roundUnscaled( x * factor, sign, roundingMethod )
VDL_138:372:double_roundUnscaled(double,double,int):sign == -1 => -1
VDL_139:384:double_roundUnscaled(double,double,int):sign == -1 => -1
VDL_140:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => Math.floor( unscaled )
VDL_141:395:double_roundUnscaled(double,double,int):fraction > 0.5 => 0.5
VDL_142:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => Math.floor( unscaled )
VDL_143:406:double_roundUnscaled(double,double,int):fraction > 0.5 => 0.5
VDL_144:409:double_roundUnscaled(double,double,int):fraction < 0.5 => 0.5
VDL_145:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => Math.floor( unscaled )
VDL_146:426:double_roundUnscaled(double,double,int):fraction >= 0.5 => 0.5
VDL_147:435:double_roundUnscaled(double,double,int):unscaled != Math.floor( unscaled ) => Math.floor( unscaled )
VDL_148:453:byte_sign(byte):x == ZB => ZB
VDL_149:453:byte_sign(byte):x == ZB => x
VDL_150:453:byte_sign(byte):x > ZB => ZB
VDL_151:453:byte_sign(byte):x > ZB => x
VDL_152:461:double_sign(double):x == 0.0 => 0.0
VDL_153:461:double_sign(double):x > 0.0 => 0.0
VDL_154:469:float_sign(float):x == 0.0F => 0.0F
VDL_155:469:float_sign(float):x > 0.0F => 0.0F
VDL_156:474:int_sign(int):x == 0 => 0
VDL_157:474:int_sign(int):x > 0 => 0
VDL_158:479:long_sign(long):x == 0L => 0L
VDL_159:479:long_sign(long):x > 0L => 0L
VDL_160:484:short_sign(short):x == ZS => ZS
VDL_161:484:short_sign(short):x == ZS => x
VDL_162:484:short_sign(short):x > ZS => ZS
VDL_163:484:short_sign(short):x > ZS => x
VDL_164:489:double_sinh(double):-x =>  
VDL_165:495:int_subAndCheck(int,int):s < Integer.MIN_VALUE => Integer.MIN_VALUE
VDL_166:495:int_subAndCheck(int,int):s > Integer.MAX_VALUE => Integer.MAX_VALUE
VDL_167:505:long_subAndCheck(long,long):b == Long.MIN_VALUE => Long.MIN_VALUE
VDL_168:506:long_subAndCheck(long,long):a < 0 => 0
VDL_169:507:long_subAndCheck(long,long):a - b => b
VDL_170:507:long_subAndCheck(long,long):a - b => a
VDL_171:512:long_subAndCheck(long,long):-b =>  
ODL_5:31:int_addAndCheck(int,int):(long) x + (long) y => (long) x
ODL_6:31:int_addAndCheck(int,int):(long) x + (long) y => (long) y
ODL_7:32:int_addAndCheck(int,int):s < Integer.MIN_VALUE => s
ODL_8:32:int_addAndCheck(int,int):s < Integer.MIN_VALUE => Integer.MIN_VALUE
ODL_9:32:int_addAndCheck(int,int):s > Integer.MAX_VALUE => s
ODL_10:32:int_addAndCheck(int,int):s > Integer.MAX_VALUE => Integer.MAX_VALUE
ODL_11:32:int_addAndCheck(int,int):s < Integer.MIN_VALUE || s > Integer.MAX_VALUE => s < Integer.MIN_VALUE
ODL_12:32:int_addAndCheck(int,int):s < Integer.MIN_VALUE || s > Integer.MAX_VALUE => s > Integer.MAX_VALUE
ODL_13:46:long_addAndCheck(long,long,java.lang.String):a > b => a
ODL_14:46:long_addAndCheck(long,long,java.lang.String):a > b => b
ODL_15:49:long_addAndCheck(long,long,java.lang.String):a < 0 => a
ODL_16:49:long_addAndCheck(long,long,java.lang.String):a < 0 => 0
ODL_17:50:long_addAndCheck(long,long,java.lang.String):b < 0 => b
ODL_18:50:long_addAndCheck(long,long,java.lang.String):b < 0 => 0
ODL_19:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => Long.MIN_VALUE
ODL_20:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b => b
ODL_21:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b <= a => Long.MIN_VALUE - b
ODL_22:51:long_addAndCheck(long,long,java.lang.String):Long.MIN_VALUE - b <= a => a
ODL_23:52:long_addAndCheck(long,long,java.lang.String):a + b => a
ODL_24:52:long_addAndCheck(long,long,java.lang.String):a + b => b
ODL_25:57:long_addAndCheck(long,long,java.lang.String):a + b => a
ODL_26:57:long_addAndCheck(long,long,java.lang.String):a + b => b
ODL_27:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => Long.MAX_VALUE
ODL_28:60:long_addAndCheck(long,long,java.lang.String):Long.MAX_VALUE - b => b
ODL_29:60:long_addAndCheck(long,long,java.lang.String):a <= Long.MAX_VALUE - b => a
ODL_30:60:long_addAndCheck(long,long,java.lang.String):a <= Long.MAX_VALUE - b => Long.MAX_VALUE - b
ODL_31:61:long_addAndCheck(long,long,java.lang.String):a + b => a
ODL_32:61:long_addAndCheck(long,long,java.lang.String):a + b => b
ODL_33:72:long_binomialCoefficient(int,int):n < k => n
ODL_34:72:long_binomialCoefficient(int,int):n < k => k
ODL_35:75:long_binomialCoefficient(int,int):n < 0 => n
ODL_36:75:long_binomialCoefficient(int,int):n < 0 => 0
ODL_37:78:long_binomialCoefficient(int,int):n == k => n
ODL_38:78:long_binomialCoefficient(int,int):n == k => k
ODL_39:78:long_binomialCoefficient(int,int):k == 0 => k
ODL_40:78:long_binomialCoefficient(int,int):k == 0 => 0
ODL_41:78:long_binomialCoefficient(int,int):n == k || k == 0 => n == k
ODL_42:78:long_binomialCoefficient(int,int):n == k || k == 0 => k == 0
ODL_43:81:long_binomialCoefficient(int,int):k == 1 => k
ODL_44:81:long_binomialCoefficient(int,int):k == 1 => 1
ODL_45:81:long_binomialCoefficient(int,int):n - 1 => n
ODL_46:81:long_binomialCoefficient(int,int):n - 1 => 1
ODL_47:81:long_binomialCoefficient(int,int):k == n - 1 => k
ODL_48:81:long_binomialCoefficient(int,int):k == n - 1 => n - 1
ODL_49:81:long_binomialCoefficient(int,int):k == 1 || k == n - 1 => k == 1
ODL_50:81:long_binomialCoefficient(int,int):k == 1 || k == n - 1 => k == n - 1
ODL_51:85:long_binomialCoefficient(int,int):result == Long.MAX_VALUE => result
ODL_52:85:long_binomialCoefficient(int,int):result == Long.MAX_VALUE => Long.MAX_VALUE
ODL_53:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => Math.exp( binomialCoefficientLog( n, k ) )
ODL_54:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => 0.5
ODL_55:98:double_binomialCoefficientLog(int,int):n < k => n
ODL_56:98:double_binomialCoefficientLog(int,int):n < k => k
ODL_57:101:double_binomialCoefficientLog(int,int):n < 0 => n
ODL_58:101:double_binomialCoefficientLog(int,int):n < 0 => 0
ODL_59:104:double_binomialCoefficientLog(int,int):n == k => n
ODL_60:104:double_binomialCoefficientLog(int,int):n == k => k
ODL_61:104:double_binomialCoefficientLog(int,int):k == 0 => k
ODL_62:104:double_binomialCoefficientLog(int,int):k == 0 => 0
ODL_63:104:double_binomialCoefficientLog(int,int):n == k || k == 0 => n == k
ODL_64:104:double_binomialCoefficientLog(int,int):n == k || k == 0 => k == 0
ODL_65:107:double_binomialCoefficientLog(int,int):k == 1 => k
ODL_66:107:double_binomialCoefficientLog(int,int):k == 1 => 1
ODL_67:107:double_binomialCoefficientLog(int,int):n - 1 => n
ODL_68:107:double_binomialCoefficientLog(int,int):n - 1 => 1
ODL_69:107:double_binomialCoefficientLog(int,int):k == n - 1 => k
ODL_70:107:double_binomialCoefficientLog(int,int):k == n - 1 => n - 1
ODL_71:107:double_binomialCoefficientLog(int,int):k == 1 || k == n - 1 => k == 1
ODL_72:107:double_binomialCoefficientLog(int,int):k == 1 || k == n - 1 => k == n - 1
ODL_73:111:double_binomialCoefficientLog(int,int):k + 1 => k
ODL_74:111:double_binomialCoefficientLog(int,int):k + 1 => 1
ODL_75:111:double_binomialCoefficientLog(int,int):i <= n => i
ODL_76:111:double_binomialCoefficientLog(int,int):i <= n => n
ODL_77:111:double_binomialCoefficientLog(int,int):i++ => i
ODL_78:112:double_binomialCoefficientLog(int,int):logSum += Math.log( (double) i ) => logSum = Math.log( (double) i )
ODL_79:114:double_binomialCoefficientLog(int,int):n - k => n
ODL_80:114:double_binomialCoefficientLog(int,int):n - k => k
ODL_81:114:double_binomialCoefficientLog(int,int):i <= n - k => i
ODL_82:114:double_binomialCoefficientLog(int,int):i <= n - k => n - k
ODL_83:114:double_binomialCoefficientLog(int,int):i++ => i
ODL_84:115:double_binomialCoefficientLog(int,int):logSum -= Math.log( (double) i ) => logSum = Math.log( (double) i )
ODL_85:122:double_cosh(double):-x => x
ODL_86:122:double_cosh(double):Math.exp( x ) + Math.exp( -x ) => Math.exp( x )
ODL_87:122:double_cosh(double):Math.exp( x ) + Math.exp( -x ) => Math.exp( -x )
ODL_88:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => Math.exp( x ) + Math.exp( -x )
ODL_89:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => 2.0
ODL_90:127:boolean_equals(double,double):Double.isNaN( x ) && Double.isNaN( y ) => Double.isNaN( x )
ODL_91:127:boolean_equals(double,double):Double.isNaN( x ) && Double.isNaN( y ) => Double.isNaN( y )
ODL_92:127:boolean_equals(double,double):x == y => x
ODL_93:127:boolean_equals(double,double):x == y => y
ODL_94:127:boolean_equals(double,double):Double.isNaN( x ) && Double.isNaN( y ) || x == y => Double.isNaN( x ) && Double.isNaN( y )
ODL_95:127:boolean_equals(double,double):Double.isNaN( x ) && Double.isNaN( y ) || x == y => x == y
ODL_96:132:boolean_equals(double,double):x == null => x
ODL_97:132:boolean_equals(double,double):x == null => null
ODL_98:132:boolean_equals(double,double):y == null => y
ODL_99:132:boolean_equals(double,double):y == null => null
ODL_100:132:boolean_equals(double,double):x == null || y == null => x == null
ODL_101:132:boolean_equals(double,double):x == null || y == null => y == null
ODL_102:133:boolean_equals(double,double):x == null => x
ODL_103:133:boolean_equals(double,double):x == null => null
ODL_104:133:boolean_equals(double,double):y == null => y
ODL_105:133:boolean_equals(double,double):y == null => null
ODL_106:133:boolean_equals(double,double):x == null ^ y == null => x == null
ODL_107:133:boolean_equals(double,double):x == null ^ y == null => y == null
ODL_108:133:boolean_equals(double,double):!(x == null ^ y == null) => x == null ^ y == null
ODL_109:135:boolean_equals(double,double):x.length != y.length => x.length
ODL_110:135:boolean_equals(double,double):x.length != y.length => y.length
ODL_111:138:boolean_equals(double,double):i < x.length => i
ODL_112:138:boolean_equals(double,double):i < x.length => x.length
ODL_113:138:boolean_equals(double,double):++i => i
ODL_114:139:boolean_equals(double,double):!equals( x[i], y[i] ) => equals( x[i], y[i] )
ODL_115:149:long_factorial(int):result == Long.MAX_VALUE => result
ODL_116:149:long_factorial(int):result == Long.MAX_VALUE => Long.MAX_VALUE
ODL_117:157:double_factorialDouble(int):n < 0 => n
ODL_118:157:double_factorialDouble(int):n < 0 => 0
ODL_119:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => Math.exp( factorialLog( n ) )
ODL_120:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => 0.5
ODL_121:165:double_factorialLog(int):n < 0 => n
ODL_122:165:double_factorialLog(int):n < 0 => 0
ODL_123:169:double_factorialLog(int):i <= n => i
ODL_124:169:double_factorialLog(int):i <= n => n
ODL_125:169:double_factorialLog(int):i++ => i
ODL_126:170:double_factorialLog(int):logSum += Math.log( (double) i ) => logSum = Math.log( (double) i )
ODL_127:177:int_gcd(int,int):u * v => u
ODL_128:177:int_gcd(int,int):u * v => v
ODL_129:177:int_gcd(int,int):u * v == 0 => u * v
ODL_130:177:int_gcd(int,int):u * v == 0 => 0
ODL_131:178:int_gcd(int,int):Math.abs( u ) + Math.abs( v ) => Math.abs( u )
ODL_132:178:int_gcd(int,int):Math.abs( u ) + Math.abs( v ) => Math.abs( v )
ODL_133:180:int_gcd(int,int):u > 0 => u
ODL_134:180:int_gcd(int,int):u > 0 => 0
ODL_135:181:int_gcd(int,int):-u => u
ODL_136:183:int_gcd(int,int):v > 0 => v
ODL_137:183:int_gcd(int,int):v > 0 => 0
ODL_138:184:int_gcd(int,int):-v => v
ODL_139:187:int_gcd(int,int):u & 1 => u
ODL_140:187:int_gcd(int,int):u & 1 => 1
ODL_141:187:int_gcd(int,int):(u & 1) == 0 => u & 1
ODL_142:187:int_gcd(int,int):(u & 1) == 0 => 0
ODL_143:187:int_gcd(int,int):v & 1 => v
ODL_144:187:int_gcd(int,int):v & 1 => 1
ODL_145:187:int_gcd(int,int):(v & 1) == 0 => v & 1
ODL_146:187:int_gcd(int,int):(v & 1) == 0 => 0
ODL_147:187:int_gcd(int,int):(u & 1) == 0 && (v & 1) == 0 => (u & 1) == 0
ODL_148:187:int_gcd(int,int):(u & 1) == 0 && (v & 1) == 0 => (v & 1) == 0
ODL_149:187:int_gcd(int,int):k < 31 => k
ODL_150:187:int_gcd(int,int):k < 31 => 31
ODL_151:187:int_gcd(int,int):(u & 1) == 0 && (v & 1) == 0 && k < 31 => (u & 1) == 0 && (v & 1) == 0
ODL_152:187:int_gcd(int,int):(u & 1) == 0 && (v & 1) == 0 && k < 31 => k < 31
ODL_153:188:int_gcd(int,int):u /= 2 => u = 2
ODL_154:189:int_gcd(int,int):v /= 2 => v = 2
ODL_155:190:int_gcd(int,int):k++ => k
ODL_156:192:int_gcd(int,int):k == 31 => k
ODL_157:192:int_gcd(int,int):k == 31 => 31
ODL_158:195:int_gcd(int,int):u & 1 => u
ODL_159:195:int_gcd(int,int):u & 1 => 1
ODL_160:195:int_gcd(int,int):(u & 1) == 1 => u & 1
ODL_161:195:int_gcd(int,int):(u & 1) == 1 => 1
ODL_162:195:int_gcd(int,int):u / 2 => u
ODL_163:195:int_gcd(int,int):u / 2 => 2
ODL_164:195:int_gcd(int,int):-(u / 2) => u / 2
ODL_165:197:int_gcd(int,int):t & 1 => t
ODL_166:197:int_gcd(int,int):t & 1 => 1
ODL_167:197:int_gcd(int,int):(t & 1) == 0 => t & 1
ODL_168:197:int_gcd(int,int):(t & 1) == 0 => 0
ODL_169:198:int_gcd(int,int):t /= 2 => t = 2
ODL_170:200:int_gcd(int,int):t > 0 => t
ODL_171:200:int_gcd(int,int):t > 0 => 0
ODL_172:201:int_gcd(int,int):-t => t
ODL_173:205:int_gcd(int,int):v - u => v
ODL_174:205:int_gcd(int,int):v - u => u
ODL_175:205:int_gcd(int,int):(v - u) / 2 => v - u
ODL_176:205:int_gcd(int,int):(v - u) / 2 => 2
ODL_177:206:int_gcd(int,int):t != 0 => t
ODL_178:206:int_gcd(int,int):t != 0 => 0
ODL_179:207:int_gcd(int,int):-u => u
ODL_180:207:int_gcd(int,int):1 << k => 1
ODL_181:207:int_gcd(int,int):1 << k => k
ODL_182:207:int_gcd(int,int):-u * (1 << k) => -u
ODL_183:207:int_gcd(int,int):-u * (1 << k) => 1 << k
ODL_184:212:byte_indicator(byte):x >= ZB => x
ODL_185:212:byte_indicator(byte):x >= ZB => ZB
ODL_186:220:double_indicator(double):x >= 0.0 => x
ODL_187:220:double_indicator(double):x >= 0.0 => 0.0
ODL_188:220:double_indicator(double):-1.0 => 1.0
ODL_189:228:float_indicator(float):x >= 0.0F => x
ODL_190:228:float_indicator(float):x >= 0.0F => 0.0F
ODL_191:228:float_indicator(float):-1.0F => 1.0F
ODL_192:233:int_indicator(int):x >= 0 => x
ODL_193:233:int_indicator(int):x >= 0 => 0
ODL_194:233:int_indicator(int):-1 => 1
ODL_195:238:long_indicator(long):x >= 0L => x
ODL_196:238:long_indicator(long):x >= 0L => 0L
ODL_197:238:long_indicator(long):-1L => 1L
ODL_198:243:short_indicator(short):x >= ZS => x
ODL_199:243:short_indicator(short):x >= ZS => ZS
ODL_200:248:int_lcm(int,int):a / gcd( a, b ) => a
ODL_201:248:int_lcm(int,int):a / gcd( a, b ) => gcd( a, b )
ODL_202:253:double_log(double,double):Math.log( x ) / Math.log( base ) => Math.log( x )
ODL_203:253:double_log(double,double):Math.log( x ) / Math.log( base ) => Math.log( base )
ODL_204:258:int_mulAndCheck(int,int):(long) x * (long) y => (long) x
ODL_205:258:int_mulAndCheck(int,int):(long) x * (long) y => (long) y
ODL_206:259:int_mulAndCheck(int,int):m < Integer.MIN_VALUE => m
ODL_207:259:int_mulAndCheck(int,int):m < Integer.MIN_VALUE => Integer.MIN_VALUE
ODL_208:259:int_mulAndCheck(int,int):m > Integer.MAX_VALUE => m
ODL_209:259:int_mulAndCheck(int,int):m > Integer.MAX_VALUE => Integer.MAX_VALUE
ODL_210:259:int_mulAndCheck(int,int):m < Integer.MIN_VALUE || m > Integer.MAX_VALUE => m < Integer.MIN_VALUE
ODL_211:259:int_mulAndCheck(int,int):m < Integer.MIN_VALUE || m > Integer.MAX_VALUE => m > Integer.MAX_VALUE
ODL_212:269:long_mulAndCheck(long,long):a > b => a
ODL_213:269:long_mulAndCheck(long,long):a > b => b
ODL_214:272:long_mulAndCheck(long,long):a < 0 => a
ODL_215:272:long_mulAndCheck(long,long):a < 0 => 0
ODL_216:273:long_mulAndCheck(long,long):b < 0 => b
ODL_217:273:long_mulAndCheck(long,long):b < 0 => 0
ODL_218:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE
ODL_219:274:long_mulAndCheck(long,long):Long.MAX_VALUE / b => b
ODL_220:274:long_mulAndCheck(long,long):a >= Long.MAX_VALUE / b => a
ODL_221:274:long_mulAndCheck(long,long):a >= Long.MAX_VALUE / b => Long.MAX_VALUE / b
ODL_222:275:long_mulAndCheck(long,long):a * b => a
ODL_223:275:long_mulAndCheck(long,long):a * b => b
ODL_224:280:long_mulAndCheck(long,long):b > 0 => b
ODL_225:280:long_mulAndCheck(long,long):b > 0 => 0
ODL_226:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => Long.MIN_VALUE
ODL_227:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b => b
ODL_228:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b <= a => Long.MIN_VALUE / b
ODL_229:281:long_mulAndCheck(long,long):Long.MIN_VALUE / b <= a => a
ODL_230:282:long_mulAndCheck(long,long):a * b => a
ODL_231:282:long_mulAndCheck(long,long):a * b => b
ODL_232:291:long_mulAndCheck(long,long):a > 0 => a
ODL_233:291:long_mulAndCheck(long,long):a > 0 => 0
ODL_234:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => Long.MAX_VALUE
ODL_235:292:long_mulAndCheck(long,long):Long.MAX_VALUE / b => b
ODL_236:292:long_mulAndCheck(long,long):a <= Long.MAX_VALUE / b => a
ODL_237:292:long_mulAndCheck(long,long):a <= Long.MAX_VALUE / b => Long.MAX_VALUE / b
ODL_238:293:long_mulAndCheck(long,long):a * b => a
ODL_239:293:long_mulAndCheck(long,long):a * b => b
ODL_240:307:double_nextAfter(double,double):Double.isNaN( d ) || Double.isInfinite( d ) => Double.isNaN( d )
ODL_241:307:double_nextAfter(double,double):Double.isNaN( d ) || Double.isInfinite( d ) => Double.isInfinite( d )
ODL_242:310:double_nextAfter(double,double):d == 0 => d
ODL_243:310:double_nextAfter(double,double):d == 0 => 0
ODL_244:311:double_nextAfter(double,double):direction < 0 => direction
ODL_245:311:double_nextAfter(double,double):direction < 0 => 0
ODL_246:311:double_nextAfter(double,double):-Double.MIN_VALUE => Double.MIN_VALUE
ODL_247:315:double_nextAfter(double,double):bits & 0x8000000000000000L => bits
ODL_248:315:double_nextAfter(double,double):bits & 0x8000000000000000L => 0x8000000000000000L
ODL_249:316:double_nextAfter(double,double):bits & 0x7ff0000000000000L => bits
ODL_250:316:double_nextAfter(double,double):bits & 0x7ff0000000000000L => 0x7ff0000000000000L
ODL_251:317:double_nextAfter(double,double):bits & 0x000fffffffffffffL => bits
ODL_252:317:double_nextAfter(double,double):bits & 0x000fffffffffffffL => 0x000fffffffffffffL
ODL_253:318:double_nextAfter(double,double):direction - d => direction
ODL_254:318:double_nextAfter(double,double):direction - d => d
ODL_255:318:double_nextAfter(double,double):d * (direction - d) => d
ODL_256:318:double_nextAfter(double,double):d * (direction - d) => direction - d
ODL_257:318:double_nextAfter(double,double):d * (direction - d) >= 0 => d * (direction - d)
ODL_258:318:double_nextAfter(double,double):d * (direction - d) >= 0 => 0
ODL_259:319:double_nextAfter(double,double):mantissa == 0x000fffffffffffffL => mantissa
ODL_260:319:double_nextAfter(double,double):mantissa == 0x000fffffffffffffL => 0x000fffffffffffffL
ODL_261:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => exponent
ODL_262:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => 0x0010000000000000L
ODL_263:320:double_nextAfter(double,double):sign | exponent + 0x0010000000000000L => sign
ODL_264:320:double_nextAfter(double,double):sign | exponent + 0x0010000000000000L => exponent + 0x0010000000000000L
ODL_265:322:double_nextAfter(double,double):sign | exponent => sign
ODL_266:322:double_nextAfter(double,double):sign | exponent => exponent
ODL_267:322:double_nextAfter(double,double):mantissa + 1 => mantissa
ODL_268:322:double_nextAfter(double,double):mantissa + 1 => 1
ODL_269:322:double_nextAfter(double,double):sign | exponent | mantissa + 1 => sign | exponent
ODL_270:322:double_nextAfter(double,double):sign | exponent | mantissa + 1 => mantissa + 1
ODL_271:325:double_nextAfter(double,double):mantissa == 0L => mantissa
ODL_272:325:double_nextAfter(double,double):mantissa == 0L => 0L
ODL_273:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => exponent
ODL_274:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => 0x0010000000000000L
ODL_275:326:double_nextAfter(double,double):sign | exponent - 0x0010000000000000L => sign
ODL_276:326:double_nextAfter(double,double):sign | exponent - 0x0010000000000000L => exponent - 0x0010000000000000L
ODL_277:326:double_nextAfter(double,double):sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL => sign | exponent - 0x0010000000000000L
ODL_278:326:double_nextAfter(double,double):sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL => 0x000fffffffffffffL
ODL_279:328:double_nextAfter(double,double):sign | exponent => sign
ODL_280:328:double_nextAfter(double,double):sign | exponent => exponent
ODL_281:328:double_nextAfter(double,double):mantissa - 1 => mantissa
ODL_282:328:double_nextAfter(double,double):mantissa - 1 => 1
ODL_283:328:double_nextAfter(double,double):sign | exponent | mantissa - 1 => sign | exponent
ODL_284:328:double_nextAfter(double,double):sign | exponent | mantissa - 1 => mantissa - 1
ODL_285:335:double_normalizeAngle(double,double):a + Math.PI => a
ODL_286:335:double_normalizeAngle(double,double):a + Math.PI => Math.PI
ODL_287:335:double_normalizeAngle(double,double):a + Math.PI - center => a + Math.PI
ODL_288:335:double_normalizeAngle(double,double):a + Math.PI - center => center
ODL_289:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => a + Math.PI - center
ODL_290:335:double_normalizeAngle(double,double):(a + Math.PI - center) / TWO_PI => TWO_PI
ODL_291:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI
ODL_292:335:double_normalizeAngle(double,double):TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => Math.floor( (a + Math.PI - center) / TWO_PI )
ODL_293:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => a
ODL_294:335:double_normalizeAngle(double,double):a - TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI ) => TWO_PI * Math.floor( (a + Math.PI - center) / TWO_PI )
ODL_295:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => (float) Math.pow( 10.0f, scale )
ODL_296:364:float_round(float,int,int):(float) Math.pow( 10.0f, scale ) * sign => sign
ODL_297:365:float_round(float,int,int):x * factor => x
ODL_298:365:float_round(float,int,int):x * factor => factor
ODL_299:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => (float) roundUnscaled( x * factor, sign, roundingMethod )
ODL_300:365:float_round(float,int,int):(float) roundUnscaled( x * factor, sign, roundingMethod ) / factor => factor
ODL_301:372:double_roundUnscaled(double,double,int):-1 => 1
ODL_302:372:double_roundUnscaled(double,double,int):sign == -1 => sign
ODL_303:372:double_roundUnscaled(double,double,int):sign == -1 => -1
ODL_304:384:double_roundUnscaled(double,double,int):-1 => 1
ODL_305:384:double_roundUnscaled(double,double,int):sign == -1 => sign
ODL_306:384:double_roundUnscaled(double,double,int):sign == -1 => -1
ODL_307:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled
ODL_308:394:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => Math.floor( unscaled )
ODL_309:395:double_roundUnscaled(double,double,int):fraction > 0.5 => fraction
ODL_310:395:double_roundUnscaled(double,double,int):fraction > 0.5 => 0.5
ODL_311:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled
ODL_312:405:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => Math.floor( unscaled )
ODL_313:406:double_roundUnscaled(double,double,int):fraction > 0.5 => fraction
ODL_314:406:double_roundUnscaled(double,double,int):fraction > 0.5 => 0.5
ODL_315:409:double_roundUnscaled(double,double,int):fraction < 0.5 => fraction
ODL_316:409:double_roundUnscaled(double,double,int):fraction < 0.5 => 0.5
ODL_317:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled )
ODL_318:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => 2.0
ODL_319:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled )
ODL_320:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => 2.0
ODL_321:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 ) => Math.floor( unscaled ) / 2.0
ODL_322:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 == Math.floor( Math.floor( unscaled ) / 2.0 ) => Math.floor( Math.floor( unscaled ) / 2.0 )
ODL_323:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => unscaled
ODL_324:425:double_roundUnscaled(double,double,int):unscaled - Math.floor( unscaled ) => Math.floor( unscaled )
ODL_325:426:double_roundUnscaled(double,double,int):fraction >= 0.5 => fraction
ODL_326:426:double_roundUnscaled(double,double,int):fraction >= 0.5 => 0.5
ODL_327:435:double_roundUnscaled(double,double,int):unscaled != Math.floor( unscaled ) => unscaled
ODL_328:435:double_roundUnscaled(double,double,int):unscaled != Math.floor( unscaled ) => Math.floor( unscaled )
ODL_329:453:byte_sign(byte):x == ZB => x
ODL_330:453:byte_sign(byte):x == ZB => ZB
ODL_331:453:byte_sign(byte):x > ZB => x
ODL_332:453:byte_sign(byte):x > ZB => ZB
ODL_333:461:double_sign(double):x == 0.0 => x
ODL_334:461:double_sign(double):x == 0.0 => 0.0
ODL_335:461:double_sign(double):x > 0.0 => x
ODL_336:461:double_sign(double):x > 0.0 => 0.0
ODL_337:461:double_sign(double):-1.0 => 1.0
ODL_338:469:float_sign(float):x == 0.0F => x
ODL_339:469:float_sign(float):x == 0.0F => 0.0F
ODL_340:469:float_sign(float):x > 0.0F => x
ODL_341:469:float_sign(float):x > 0.0F => 0.0F
ODL_342:469:float_sign(float):-1.0F => 1.0F
ODL_343:474:int_sign(int):x == 0 => x
ODL_344:474:int_sign(int):x == 0 => 0
ODL_345:474:int_sign(int):x > 0 => x
ODL_346:474:int_sign(int):x > 0 => 0
ODL_347:474:int_sign(int):-1 => 1
ODL_348:479:long_sign(long):x == 0L => x
ODL_349:479:long_sign(long):x == 0L => 0L
ODL_350:479:long_sign(long):x > 0L => x
ODL_351:479:long_sign(long):x > 0L => 0L
ODL_352:479:long_sign(long):-1L => 1L
ODL_353:484:short_sign(short):x == ZS => x
ODL_354:484:short_sign(short):x == ZS => ZS
ODL_355:484:short_sign(short):x > ZS => x
ODL_356:484:short_sign(short):x > ZS => ZS
ODL_357:489:double_sinh(double):-x => x
ODL_358:489:double_sinh(double):Math.exp( x ) - Math.exp( -x ) => Math.exp( x )
ODL_359:489:double_sinh(double):Math.exp( x ) - Math.exp( -x ) => Math.exp( -x )
ODL_360:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => Math.exp( x ) - Math.exp( -x )
ODL_361:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => 2.0
ODL_362:494:int_subAndCheck(int,int):(long) x - (long) y => (long) x
ODL_363:494:int_subAndCheck(int,int):(long) x - (long) y => (long) y
ODL_364:495:int_subAndCheck(int,int):s < Integer.MIN_VALUE => s
ODL_365:495:int_subAndCheck(int,int):s < Integer.MIN_VALUE => Integer.MIN_VALUE
ODL_366:495:int_subAndCheck(int,int):s > Integer.MAX_VALUE => s
ODL_367:495:int_subAndCheck(int,int):s > Integer.MAX_VALUE => Integer.MAX_VALUE
ODL_368:495:int_subAndCheck(int,int):s < Integer.MIN_VALUE || s > Integer.MAX_VALUE => s < Integer.MIN_VALUE
ODL_369:495:int_subAndCheck(int,int):s < Integer.MIN_VALUE || s > Integer.MAX_VALUE => s > Integer.MAX_VALUE
ODL_370:505:long_subAndCheck(long,long):b == Long.MIN_VALUE => b
ODL_371:505:long_subAndCheck(long,long):b == Long.MIN_VALUE => Long.MIN_VALUE
ODL_372:506:long_subAndCheck(long,long):a < 0 => a
ODL_373:506:long_subAndCheck(long,long):a < 0 => 0
ODL_374:507:long_subAndCheck(long,long):a - b => a
ODL_375:507:long_subAndCheck(long,long):a - b => b
ODL_376:512:long_subAndCheck(long,long):-b => b
CDL_4:49:long_addAndCheck(long,long,java.lang.String):a < 0 => a
CDL_5:50:long_addAndCheck(long,long,java.lang.String):b < 0 => b
CDL_6:75:long_binomialCoefficient(int,int):n < 0 => n
CDL_7:78:long_binomialCoefficient(int,int):k == 0 => k
CDL_8:81:long_binomialCoefficient(int,int):k == 1 => k
CDL_9:81:long_binomialCoefficient(int,int):n - 1 => n
CDL_10:93:double_binomialCoefficientDouble(int,int):Math.exp( binomialCoefficientLog( n, k ) ) + 0.5 => Math.exp( binomialCoefficientLog( n, k ) )
CDL_11:101:double_binomialCoefficientLog(int,int):n < 0 => n
CDL_12:104:double_binomialCoefficientLog(int,int):k == 0 => k
CDL_13:107:double_binomialCoefficientLog(int,int):k == 1 => k
CDL_14:107:double_binomialCoefficientLog(int,int):n - 1 => n
CDL_15:111:double_binomialCoefficientLog(int,int):k + 1 => k
CDL_16:122:double_cosh(double):(Math.exp( x ) + Math.exp( -x )) / 2.0 => Math.exp( x ) + Math.exp( -x )
CDL_17:132:boolean_equals(double,double):x == null => x
CDL_18:132:boolean_equals(double,double):y == null => y
CDL_19:133:boolean_equals(double,double):x == null => x
CDL_20:133:boolean_equals(double,double):y == null => y
CDL_21:157:double_factorialDouble(int):n < 0 => n
CDL_22:160:double_factorialDouble(int):Math.exp( factorialLog( n ) ) + 0.5 => Math.exp( factorialLog( n ) )
CDL_23:165:double_factorialLog(int):n < 0 => n
CDL_24:177:int_gcd(int,int):u * v == 0 => u * v
CDL_25:180:int_gcd(int,int):u > 0 => u
CDL_26:183:int_gcd(int,int):v > 0 => v
CDL_27:187:int_gcd(int,int):u & 1 => u
CDL_28:187:int_gcd(int,int):(u & 1) == 0 => u & 1
CDL_29:187:int_gcd(int,int):v & 1 => v
CDL_30:187:int_gcd(int,int):(v & 1) == 0 => v & 1
CDL_31:187:int_gcd(int,int):k < 31 => k
CDL_32:192:int_gcd(int,int):k == 31 => k
CDL_33:195:int_gcd(int,int):u & 1 => u
CDL_34:195:int_gcd(int,int):(u & 1) == 1 => u & 1
CDL_35:195:int_gcd(int,int):u / 2 => u
CDL_36:197:int_gcd(int,int):t & 1 => t
CDL_37:197:int_gcd(int,int):(t & 1) == 0 => t & 1
CDL_38:200:int_gcd(int,int):t > 0 => t
CDL_39:205:int_gcd(int,int):(v - u) / 2 => v - u
CDL_40:206:int_gcd(int,int):t != 0 => t
CDL_41:207:int_gcd(int,int):1 << k => k
CDL_42:220:double_indicator(double):x >= 0.0 => x
CDL_43:220:double_indicator(double):-1.0 =>  
CDL_44:228:float_indicator(float):x >= 0.0F => x
CDL_45:228:float_indicator(float):-1.0F =>  
CDL_46:233:int_indicator(int):x >= 0 => x
CDL_47:233:int_indicator(int):-1 =>  
CDL_48:238:long_indicator(long):x >= 0L => x
CDL_49:238:long_indicator(long):-1L =>  
CDL_50:272:long_mulAndCheck(long,long):a < 0 => a
CDL_51:273:long_mulAndCheck(long,long):b < 0 => b
CDL_52:280:long_mulAndCheck(long,long):b > 0 => b
CDL_53:291:long_mulAndCheck(long,long):a > 0 => a
CDL_54:310:double_nextAfter(double,double):d == 0 => d
CDL_55:311:double_nextAfter(double,double):direction < 0 => direction
CDL_56:315:double_nextAfter(double,double):bits & 0x8000000000000000L => bits
CDL_57:316:double_nextAfter(double,double):bits & 0x7ff0000000000000L => bits
CDL_58:317:double_nextAfter(double,double):bits & 0x000fffffffffffffL => bits
CDL_59:318:double_nextAfter(double,double):d * (direction - d) >= 0 => d * (direction - d)
CDL_60:319:double_nextAfter(double,double):mantissa == 0x000fffffffffffffL => mantissa
CDL_61:320:double_nextAfter(double,double):exponent + 0x0010000000000000L => exponent
CDL_62:322:double_nextAfter(double,double):mantissa + 1 => mantissa
CDL_63:325:double_nextAfter(double,double):mantissa == 0L => mantissa
CDL_64:326:double_nextAfter(double,double):exponent - 0x0010000000000000L => exponent
CDL_65:326:double_nextAfter(double,double):sign | exponent - 0x0010000000000000L | 0x000fffffffffffffL => sign | exponent - 0x0010000000000000L
CDL_66:328:double_nextAfter(double,double):mantissa - 1 => mantissa
CDL_67:372:double_roundUnscaled(double,double,int):-1 =>  
CDL_68:384:double_roundUnscaled(double,double,int):-1 =>  
CDL_69:395:double_roundUnscaled(double,double,int):fraction > 0.5 => fraction
CDL_70:406:double_roundUnscaled(double,double,int):fraction > 0.5 => fraction
CDL_71:409:double_roundUnscaled(double,double,int):fraction < 0.5 => fraction
CDL_72:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled )
CDL_73:412:double_roundUnscaled(double,double,int):Math.floor( unscaled ) / 2.0 => Math.floor( unscaled )
CDL_74:426:double_roundUnscaled(double,double,int):fraction >= 0.5 => fraction
CDL_75:461:double_sign(double):x == 0.0 => x
CDL_76:461:double_sign(double):x > 0.0 => x
CDL_77:461:double_sign(double):-1.0 =>  
CDL_78:469:float_sign(float):x == 0.0F => x
CDL_79:469:float_sign(float):x > 0.0F => x
CDL_80:469:float_sign(float):-1.0F =>  
CDL_81:474:int_sign(int):x == 0 => x
CDL_82:474:int_sign(int):x > 0 => x
CDL_83:474:int_sign(int):-1 =>  
CDL_84:479:long_sign(long):x == 0L => x
CDL_85:479:long_sign(long):x > 0L => x
CDL_86:479:long_sign(long):-1L =>  
CDL_87:489:double_sinh(double):(Math.exp( x ) - Math.exp( -x )) / 2.0 => Math.exp( x ) - Math.exp( -x )
CDL_88:506:long_subAndCheck(long,long):a < 0 => a
