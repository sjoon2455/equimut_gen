/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 22 07:05:01 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

// @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
// public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {
public class Vector3D_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.plusJ.add((-832.871), vector3D0);
      Vector3D vector3D2 = vector3D0.plusI.subtract(vector3D1);
      double double0 = Vector3D.angle(vector3D1, vector3D2);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(3.141591213721515, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = vector3D0.normalize();
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.9001947834210716E-23, double0, 0.01);
      assertEquals(0.9999999999999999, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 2252.32005);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
      assertEquals(1.0000000000000002, vector3D1.getNorm(), 0.01);
      assertEquals((-0.9796908216243299), vector3D1.getZ(), 0.01);
      assertEquals((-3.141592653589793), vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = Vector3D.minusJ;
      Vector3D vector3D2 = vector3D0.plusJ.add((-832.871), vector3D1);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals((-1.5707963267948966), vector3D3.getDelta(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, vector3D3.getAlpha(), 0.01);
      assertEquals(833.871, vector3D2.getNorm(), 0.01);
      assertEquals((-1.0), vector3D3.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      assertEquals(2.387672768565776E-7, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = new Vector3D(0.0, 2252.32005);
      Vector3D vector3D2 = vector3D1.negate();
      Vector3D vector3D3 = vector3D2.subtract(vector3D0);
      assertEquals((-0.7956565662439283), vector3D3.getAlpha(), 0.01);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
      assertEquals((-0.14226426023058597), vector3D3.getDelta(), 0.01);
      assertEquals((-0.20051407438144053), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = vector3D0.plusK.subtract(1.0, vector3D0);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D(3341.95881666898, vector3D0, 602.913357, vector3D0);
      Vector3D vector3D2 = vector3D1.subtract(2920.55473329, vector3D0);
      assertEquals(1024.3174403789799, vector3D2.getNorm(), 0.01);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = vector3D0.plusK.scalarMultiply(2768.878612);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01);
      assertEquals(2768.878612, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = Vector3D.zero;
      Vector3D vector3D2 = vector3D0.plusI.add((-485.513), vector3D1);
      Vector3D vector3D3 = vector3D2.scalarMultiply((-528.2615206351518));
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(528.2615206351518, vector3D3.getNorm(), 0.01);
      assertEquals((-3.141592653589793), vector3D3.getAlpha(), 0.01);
      assertEquals(-0.0, vector3D3.getZ(), 0.01);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = vector3D0.plusJ.scalarMultiply(0.0018773436407833828);
      assertEquals(0.0018773436407833828, vector3D1.getNorm(), 0.01);
      assertEquals(0.0018773436407833828, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = vector3D0.normalize();
      assertEquals(1.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = vector3D0.plusI.normalize();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.8849555921538759), vector3D0, 0.0018773436407833828, vector3D0);
      Vector3D vector3D2 = vector3D0.subtract((-1.0), vector3D1);
      Vector3D vector3D3 = vector3D2.normalize();
      assertEquals((-2.387672768565777E-7), vector3D3.getDelta(), 0.01);
      assertEquals(0.7853981633974483, vector3D3.getAlpha(), 0.01);
      assertEquals(0.9999999999999999, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = vector3D1.negate();
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
      assertEquals((-3.141592653589793), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.plusJ.add((-832.871), vector3D0);
      Vector3D vector3D2 = vector3D0.plusI.subtract(vector3D1);
      Vector3D vector3D3 = vector3D2.negate();
      assertEquals(833.871599612914, vector3D3.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D3.getZ(), 0.01);
      assertEquals(3.1403934279054617, vector3D3.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      double double0 = vector3D0.getZ();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      double double0 = vector3D0.getZ();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getX();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-896.2), 0.0, 510.0);
      double double0 = vector3D0.getX();
      assertEquals(510.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-896.2), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 2252.32005);
      double double0 = vector3D0.getDelta();
      assertEquals((-3.141592653589793), vector3D0.getAlpha(), 0.01);
      assertEquals(0.2018826238819419, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      double double0 = vector3D0.getDelta();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      double double0 = vector3D0.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-431.0));
      Vector3D vector3D1 = vector3D0.scalarMultiply((-1.0));
      double double0 = vector3D1.getAlpha();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-0.6018064581983262), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = Vector3D.minusJ;
      Vector3D vector3D2 = vector3D0.plusJ.add((-832.871), vector3D1);
      double double0 = Vector3D.dotProduct(vector3D2, vector3D0);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(833.871, vector3D2.getNorm(), 0.01);
      assertEquals(833.871, vector3D2.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D((-1900.3), vector3D0, (-1900.3), vector3D0);
      double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
      assertEquals((-3800.6), double0, 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = new Vector3D(0.0, 2252.32005);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D2.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(1.368913702912955, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = new Vector3D((-1163.2), (-1163.2));
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      assertEquals((-0.5798420566974408), vector3D2.getDelta(), 0.01);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01);
      assertEquals((-0.8107181717765473), vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.8849555921538759), vector3D0, 0.0018773436407833828, vector3D0);
      Vector3D vector3D2 = vector3D0.subtract((-1.0), vector3D1);
      Vector3D vector3D3 = Vector3D.minusK;
      Vector3D vector3D4 = Vector3D.crossProduct(vector3D2, vector3D3);
      assertEquals((-2.3876727685657766E-7), vector3D2.getDelta(), 0.01);
      assertEquals(0.0, vector3D4.getDelta(), 0.01);
      assertEquals(22668.636535893627, vector3D4.getNorm(), 0.01);
      assertEquals(2.356194490192345, vector3D4.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = Vector3D.plusI;
      Vector3D vector3D2 = vector3D0.plusK.subtract(vector3D1);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D1, vector3D2);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01);
      assertEquals(1.0, vector3D3.getNorm(), 0.01);
      assertEquals(0.0, vector3D3.getX(), 0.01);
      assertEquals(0.0, vector3D3.getZ(), 0.01);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = Vector3D.plusK;
      Vector3D vector3D2 = vector3D0.add(vector3D1);
      assertEquals(0.7853981633974482, vector3D2.getDelta(), 0.01);
      assertEquals((-1.5707963267948966), vector3D2.getAlpha(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Vector3D vector3D1 = vector3D0.minusI.add(vector3D0);
      assertEquals((-0.7853981633974482), vector3D1.getDelta(), 0.01);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusI;
      Vector3D vector3D1 = vector3D0.negate();
      Vector3D vector3D2 = vector3D1.add(vector3D0);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals((-2.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(2.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Vector3D vector3D1 = vector3D0.scalarMultiply(0.0);
      Vector3D vector3D2 = vector3D1.add(0.0, vector3D0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = vector3D0.plusK.add(1.0, vector3D0);
      assertEquals(0.7853981633974482, vector3D1.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = vector3D0.add((-1.8849555921538759), vector3D0);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01);
      assertEquals(6958.096499562351, vector3D1.getNorm(), 0.01);
      assertEquals(0.0018773436407833828, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      // Undeclared exception!
      try { 
        vector3D0.subtract((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-961.262923106), (-961.262923106));
      // Undeclared exception!
      try { 
        vector3D0.subtract(0.0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.dotProduct((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.crossProduct((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(150.9, 0.0, 1.0);
      // Undeclared exception!
      try { 
        vector3D0.minusI.add((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      // Undeclared exception!
      try { 
        vector3D0.zero.add(0.0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(2022.235930089506, (Vector3D) null, 2022.235930089506, (Vector3D) null, 152.13365, (Vector3D) null, (-1281.1166820908318), (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D((-1.0), (Vector3D) null, 0.0, (Vector3D) null, (-978.827279), (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(0.0, (Vector3D) null, 3564.207474098, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(0.0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      double double0 = vector3D0.getNorm();
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01);
      assertEquals(2.387672768565776E-7, vector3D0.getDelta(), 0.01);
      assertEquals(7862.650466592542, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = new Vector3D();
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = vector3D0.plusI.orthogonal();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2955.0), (-2955.0));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.9999999999999999, vector3D1.getNorm(), 0.01);
      assertEquals(2.387672768565776E-7, vector3D0.getDelta(), 0.01);
      assertEquals((-0.7071067811865475), vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = new Vector3D((-1358.0147852149), vector3D0, (-1358.0147852149), vector3D0, -0.0, vector3D0);
      assertEquals(2716.0295704298, vector3D1.getNorm(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = vector3D0.subtract((-1.0), vector3D0);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01);
      assertEquals(2.387672768565776E-7, vector3D0.getDelta(), 0.01);
      assertEquals(15725.300933185084, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      double double0 = vector3D0.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      double double0 = vector3D0.getY();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5559.733463027), (-5559.733463027), 0.0018773436407833828);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.8849555921538759), vector3D0, 0.0018773436407833828, vector3D0);
      Vector3D vector3D2 = vector3D0.subtract((-1.0), vector3D1);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals(0.0, vector3D3.getZ(), 0.01);
      assertEquals((-2.3876727685657766E-7), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = vector3D0.plusI.add(vector3D0);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getDelta();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.8540618071925905E7), (-1.8540618071925905E7));
      Vector3D vector3D1 = vector3D0.plusI.scalarMultiply(4.038967834731581E-27);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-0.08875585825852043), vector3D0.getDelta(), 0.01);
      assertEquals(0.1254372252712376, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = new Vector3D((-1358.0147852149), vector3D0);
      assertEquals((-1358.0147852149), vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(1358.0147852149, vector3D1.getNorm(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getAlpha();
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = vector3D0.add(0.0, vector3D0);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = vector3D0.plusK.subtract(vector3D0);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(0.7853981633974482, vector3D1.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }
}
