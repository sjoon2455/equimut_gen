/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 27 14:01:03 GMT 2021
 */


import org.junit.Test;
// import org.junit.Before;
// import org.junit.After;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class MathUtils_ESTest {
//  private long start;

//  @Before
//  public void start() {
//      start = System.currentTimeMillis();
//  }
//  @After
//  public void end() {
//      System.out.println(System.currentTimeMillis() - start);
//  }
  @Test(timeout = 2000)
  public void test000()  throws Throwable  {
      int int0 = 2354;
      int int1 = MathUtils.lcm(2360, 2354);
      assertFalse(int1 == int0);
      assertEquals(2777720, int1);
      
      double double0 = MathUtils.indicator((double) 2354);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.nextAfter((-2480.9), (-2480.9));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2480.9000000000005), double1, 0.01);
      
      double double2 = MathUtils.indicator(1.0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = MathUtils.indicator((-2480.9));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      // Undeclared exception!
      MathUtils.binomialCoefficientDouble(2777720, 2354);
  }

  @Test(timeout = 10)
  public void test001()  throws Throwable  {
      long long0 = 9223372036854775807L;
      long long1 = 30115790131209L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9223372036854775807L, 30115790131209L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test002()  throws Throwable  {
      int int0 = (-2480);
      int int1 = (-2147483647);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2480), (-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = MathUtils.equals(1912.0, 1.0);
      assertFalse(boolean0);
      
      double double1 = MathUtils.cosh(1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5430806348152437, double1, 0.01);
      
      double double2 = MathUtils.factorialLog(271);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1250.89450590498, double2, 0.01);
      
      long long0 = MathUtils.mulAndCheck((-1844L), (long) 0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2147481733, 2147481733);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test004()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-554));
      assertEquals((short) (-1), short0);
      
      byte byte0 = MathUtils.sign((byte) (-127));
      assertEquals((byte) (-1), byte0);
      
      int int0 = MathUtils.addAndCheck((int) (short) (-1), (int) (byte) (-127));
      assertEquals((-128), int0);
      
      float float0 = MathUtils.sign((float) (-128));
      assertEquals((-1.0F), float0, 0.01F);
      
      int int1 = MathUtils.gcd((-1590), (-1590));
      assertFalse(int1 == int0);
      assertEquals(1590, int1);
      
      double double0 = MathUtils.nextAfter(4.9E-324, (-1.0));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.nextAfter(1800.4035605526158, (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1800.4035605526155, double1, 0.01);
      
      int int2 = MathUtils.indicator(1897);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = MathUtils.subAndCheck((-677), 1897);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-2574), int3);
      
      float float1 = MathUtils.indicator(1651.71F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      float float2 = MathUtils.sign((-953.3F));
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      int int4 = MathUtils.gcd(1590, 1897);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(1, int4);
      
      long long0 = MathUtils.sign((long) 1897);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.subAndCheck(3681369824282019L, (long) 1);
      assertFalse(long1 == long0);
      assertEquals(3681369824282018L, long1);
      
      double double2 = MathUtils.indicator((double) (byte) (-1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      float float3 = MathUtils.indicator((float) 1);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(1.0F, float3, 0.01F);
  }

  @Test(timeout = 10)
  public void test005()  throws Throwable  {
      MathUtils mathUtils0 = new MathUtils();
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short)1, MathUtils.PS);
      assertEquals((byte)1, MathUtils.PB);
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte)0, MathUtils.ZB);
      assertNotNull(mathUtils0);
      
      float float0 = MathUtils.round((float) (short)1, 0, (int) (short)1);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = MathUtils.round((double) 0.0F, (int) (short)0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathUtils.subAndCheck((int) (short)0, (int) (byte)0);
      assertEquals(0, int0);
      
      double double1 = MathUtils.round((-318.826843564642), 4, 4);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-318.8268), double1, 0.01);
      
      double double2 = MathUtils.factorialDouble(66);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(5.443449390774456E92, double2, 0.01);
      
      double double3 = MathUtils.normalizeAngle(0.0, 0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      long long0 = MathUtils.mulAndCheck(3L, (long) 66);
      assertEquals(198L, long0);
      
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      long long1 = MathUtils.sign((long) (short)0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      int int1 = MathUtils.lcm(0, (-2789));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte byte0 = MathUtils.sign((byte)1);
      assertEquals((byte)1, byte0);
      
      short short1 = MathUtils.sign((short)0);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
      
      long long2 = MathUtils.binomialCoefficient(1279, 0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1L, long2);
      
      int int2 = MathUtils.sign((int) (short)0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      float float1 = MathUtils.round(0.0F, (-1423));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      double double4 = MathUtils.binomialCoefficientLog(0, (-700));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = MathUtils.sinh(4);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(27.28991719712775, double5, 0.01);
      
      double double6 = MathUtils.binomialCoefficientDouble((byte)1, (byte)1);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(1.0, double6, 0.01);
      
      int int3 = MathUtils.lcm((-2789), (short)0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      byte byte1 = MathUtils.sign((byte)1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      double double7 = MathUtils.binomialCoefficientLog(0, (-1));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double7, 0.01);
      
      byte byte2 = MathUtils.sign((byte)1);
      assertTrue(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertEquals((byte)1, byte2);
  }

  @Test(timeout = 10)
  public void test006()  throws Throwable  {
      int int0 = 0;
      int int1 = (-4271);
      int int2 = MathUtils.subAndCheck(0, (-4271));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4271, int2);
      
      int int3 = (-2147483646);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147483646), (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2355, 1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, 698);
      assertEquals((-697), int0);
      
      double double0 = MathUtils.nextAfter(Double.NaN, 1175.83407);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 10)
  public void test009()  throws Throwable  {
      int int0 = 7;
      // Undeclared exception!
      try { 
        MathUtils.round((-2667.185), (-2647), 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 10)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.lcm(687, 687);
      assertEquals(687, int0);
      
      byte byte0 = MathUtils.indicator((byte) (-1));
      assertEquals((byte) (-1), byte0);
      
      short short0 = MathUtils.indicator((short) (byte) (-1));
      assertEquals((short) (-1), short0);
      
      int int1 = MathUtils.subAndCheck(4, 4);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = (-52);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-52), 2145805926);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.round((-2667.185), (-2647), 0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      boolean boolean0 = MathUtils.equals(20.203882431878, (-813.6450448984031));
      assertFalse(boolean0);
      
      double double1 = MathUtils.nextAfter(4.503599627370494E15, 4.503599627370494E15);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.5035996273704945E15, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (-2647), 4503599627370495L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test012()  throws Throwable  {
      MathUtils mathUtils0 = new MathUtils();
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short)1, MathUtils.PS);
      assertEquals((byte)1, MathUtils.PB);
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte)0, MathUtils.ZB);
      assertNotNull(mathUtils0);
      
      double double0 = MathUtils.indicator((double) (byte)0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientDouble((byte)1, (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathUtils.round(1.0, 0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck((-1231L), 0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      int int0 = MathUtils.mulAndCheck(0, (int) (short) (-1));
      assertEquals(0, int0);
      
      double double3 = MathUtils.sinh(1.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.1752011936438014, double3, 0.01);
      
      double double4 = MathUtils.round(6.283185307179586, 0, (int) (byte)0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(7.0, double4, 0.01);
      
      double double5 = MathUtils.binomialCoefficientDouble((byte)0, (byte)0);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      int int1 = MathUtils.subAndCheck((int) (byte) (-1), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double6 = MathUtils.factorialLog(297);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(1397.804530410517, double6, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 0, (int) (short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sign(1280.45);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = (-2143862258);
      int int1 = 0;
      int int2 = MathUtils.lcm((-2143862258), 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      double double1 = MathUtils.binomialCoefficientDouble(2413, 1621);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = MathUtils.sign((double) 2413);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      long long0 = MathUtils.indicator((long) 1621);
      assertEquals(1L, long0);
      
      double double3 = MathUtils.binomialCoefficientDouble(1621, 0);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = MathUtils.factorialDouble(1);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      long long1 = MathUtils.indicator((long) 0);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = MathUtils.factorial(0);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(1L, long2);
      
      double double5 = MathUtils.binomialCoefficientLog(1, (-1824));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = MathUtils.cosh((-1656.85));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      int int3 = 1246;
      double double7 = MathUtils.factorialDouble(1246);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      double double8 = MathUtils.sign(Double.POSITIVE_INFINITY);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(1.0, double8, 0.01);
      
      long long3 = MathUtils.sign(1L);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      assertEquals(1L, long3);
      
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(31, (-2143862258));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test016()  throws Throwable  {
      float float0 = MathUtils.sign(2403.951F);
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = MathUtils.lcm(0, (-762));
      assertEquals(0, int0);
      
      boolean boolean0 = MathUtils.equals(2.0, (double) 1.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      long long0 = MathUtils.sign((-1L));
      assertEquals((-1L), long0);
      
      double double0 = MathUtils.nextAfter((-1L), 0);
      assertEquals((-0.9999999999999999), double0, 0.01);
      
      short short0 = MathUtils.sign((short) (-1));
      assertEquals((short) (-1), short0);
      
      long long1 = MathUtils.indicator(3804L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      double double1 = MathUtils.roundUnscaled(2.0, 99.53084631002, 4);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.0, double1, 0.01);
      
      float float1 = MathUtils.sign((-2762.2722F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double2 = MathUtils.sign(99.53084631002);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      float float2 = MathUtils.sign(1225.79F);
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1225.79F;
      doubleArray1[1] = (double) (-762);
      doubleArray1[2] = (double) (-1L);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-0.9999999999999999);
      doubleArray1[5] = (double) 1.0F;
      doubleArray1[6] = (double) (short) (-1);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) (-2762.2722F);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1225.7900390625, (-762.0), (-1.0), 2.0, (-0.9999999999999999), 1.0, (-1.0), 0.0, (-2762.272216796875)}, doubleArray1, 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 10)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.nextAfter(1714.847296764, (-4.9E-324));
      assertEquals(1714.8472967639998, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1714.847296764;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1714.8472967639998;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1714.847296764}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1714.8472967639998}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      int int0 = (-47);
      // Undeclared exception!
      try { 
        MathUtils.round(1802.66459, (-47), (-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 10)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.round(Double.NaN, (-1805), 1);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathUtils.log((-1805), (-669.91164831));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      long long0 = MathUtils.binomialCoefficient(1, (-2267));
      assertEquals(0L, long0);
      
      int int0 = MathUtils.mulAndCheck((-3654), 1526);
      assertEquals((-5576004), int0);
      
      short short0 = MathUtils.indicator((short)1);
      assertEquals((short)1, short0);
      
      long long1 = MathUtils.indicator(0L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      double double2 = MathUtils.round(0.0, 1526, (int) (short)1);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      long long2 = MathUtils.subAndCheck((long) (-2267), (-2147483648L));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2147481381L, long2);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-5718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.sinh((-754.75));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = MathUtils.factorialLog(1);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = MathUtils.lcm(0, 1);
      assertEquals(0, int0);
      
      double double3 = MathUtils.factorialDouble(1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = MathUtils.log(1, (-1841.3777605));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      byte byte0 = (byte) (-124);
      byte byte1 = MathUtils.sign((byte) (-124));
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      double double5 = MathUtils.normalizeAngle((-1892.659962367), 713.63843411499);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(714.8619401125284, double5, 0.01);
      
      long long0 = MathUtils.subAndCheck((long) (byte) (-124), (-9223372036854775808L));
      assertEquals(9223372036854775684L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.round(713.63843411499, (int) (byte) (-1), (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 10)
  public void test020()  throws Throwable  {
      int int0 = (-3264);
      int int1 = MathUtils.addAndCheck(0, (-3264));
      assertTrue(int1 == int0);
      assertEquals((-3264), int1);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (-3264), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test021()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = 2;
      double double1 = MathUtils.round((-994.260595380008), 2);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-994.26), double1, 0.01);
      
      int int2 = 0;
      double double2 = MathUtils.factorialLog(0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathUtils.roundUnscaled(0.0, 487.0217805, 2);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-107));
      assertEquals((byte) (-1), byte0);
      
      double double4 = MathUtils.cosh((byte) (-107));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.4739391957277546E46, double4, 0.01);
      
      double double5 = MathUtils.sinh((-4201.057956948));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      short short0 = MathUtils.sign((short) (byte) (-107));
      assertEquals((short) (-1), short0);
      
      int int3 = MathUtils.indicator(0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        MathUtils.roundUnscaled((byte) (-107), (-1.0), (-1080));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.indicator(46.108179);
      assertEquals(1.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 46.108179;
      doubleArray0[3] = 46.108179;
      doubleArray0[4] = 46.108179;
      doubleArray0[5] = 46.108179;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0, 46.108179, 46.108179, 46.108179, 46.108179, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 10)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.lcm((-2031), (-1092));
      assertEquals(739284, int0);
      
      int int1 = MathUtils.mulAndCheck(0, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = MathUtils.addAndCheck(9223372036854775807L, (long) 0);
      assertEquals(9223372036854775807L, long0);
      
      long long1 = MathUtils.indicator(9223372036854775807L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = MathUtils.sign((long) 0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      
      int int2 = MathUtils.mulAndCheck((-1092), 739284);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-807298128), int2);
      
      long long3 = MathUtils.addAndCheck(0L, 0L, "must have n >= 0 for binomial coefficient (n,k)");
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals(0L, long3);
  }

  @Test(timeout = 10)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.lcm(3024, (-266));
      assertEquals(57456, int0);
      
      double double0 = MathUtils.binomialCoefficientDouble(3024, (-266));
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(0L, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.sign((-1529));
      assertEquals((-1), int0);
      
      boolean boolean0 = MathUtils.equals((double) (-1), 0.0);
      assertFalse(boolean0);
      
      float float0 = MathUtils.sign((float) (-1));
      assertEquals((-1.0F), float0, 0.01F);
      
      int int1 = MathUtils.indicator((-1362));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.nextAfter(Double.NEGATIVE_INFINITY, (-1362));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      long long0 = MathUtils.sign((long) (-1));
      assertEquals((-1L), long0);
      
      double double1 = MathUtils.factorialDouble(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = MathUtils.round((double) (-1.0F), (-1), 0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-10.0), double2, 0.01);
      
      int int2 = MathUtils.subAndCheck((-1), (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      long long1 = MathUtils.addAndCheck((long) (-1), 0L, "PXp&u1yY_bd:v1+'*Lq");
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      long long2 = MathUtils.addAndCheck(2034L, 0L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2034L, long2);
      
      int int3 = MathUtils.gcd(0, (-1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      double double3 = MathUtils.binomialCoefficientDouble(0, (-256));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(1, 0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = MathUtils.normalizeAngle(0.0, (-2120.453));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals((-2117.4334485195204), double5, 0.01);
      
      double double6 = MathUtils.sinh(0.0);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = MathUtils.nextAfter((-1L), 0.0);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals((-0.9999999999999999), double7, 0.01);
      
      byte byte0 = MathUtils.sign((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 10)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-5327.9);
      doubleArray0[1] = 1558.87;
      doubleArray0[2] = (-366.61519);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 10.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-5327.9), 1558.87, (-366.61519), 0.0, 0.0, 10.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long long0 = MathUtils.binomialCoefficient(503, 1);
      assertEquals(503L, long0);
  }

  @Test(timeout = 10)
  public void test027()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-348));
      assertEquals(Float.NaN, float0, 0.01F);
      
      long long0 = MathUtils.mulAndCheck(0L, 2064L);
      assertEquals(0L, long0);
      
      double double0 = MathUtils.nextAfter((-348), 0L);
      assertEquals((-347.99999999999994), double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long long1 = MathUtils.subAndCheck(1L, (-1720L));
      assertFalse(long1 == long0);
      assertEquals(1721L, long1);
  }

  @Test(timeout = 10)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.log((-2174.195934046605), 1.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathUtils.sign(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
      
      double double2 = MathUtils.round(3536.1, 0, 2);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3537.0, double2, 0.01);
  }

  @Test(timeout = 10)
  public void test029()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L), "*P");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // *P
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.sign((-313.773180053968));
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = MathUtils.equals((-1.0), (-1.0));
      assertTrue(boolean0);
      
      int int0 = MathUtils.sign((-1));
      assertEquals((-1), int0);
      
      double double1 = MathUtils.log((-313.773180053968), (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int1 = MathUtils.subAndCheck((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double2 = MathUtils.roundUnscaled((-1.0), Double.NaN, 0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(-0.0, double2, 0.01);
      
      double double3 = MathUtils.cosh((-313.773180053968));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(9.309592490881313E135, double3, 0.01);
      
      double double4 = MathUtils.cosh((-2366.535670609389));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = MathUtils.indicator((double) 0);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      MathUtils mathUtils0 = new MathUtils();
      assertEquals((byte)1, MathUtils.PB);
      assertEquals((short)1, MathUtils.PS);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short) (-1), MathUtils.NS);
      assertNotNull(mathUtils0);
      
      int int2 = MathUtils.gcd((byte)0, (byte) (-1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        MathUtils.lcm(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 1000)
  public void test031()  throws Throwable  {
      long long0 = 166L;
      long long1 = (-1309L);
      long long2 = MathUtils.addAndCheck(166L, (-1309L));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1143L), long2);
      
      double double0 = MathUtils.round((double) (-1143L), 1168);
      assertEquals((-1143.0), double0, 0.01);
      
      int int0 = MathUtils.mulAndCheck(1168, 1168);
      assertEquals(1364224, int0);
      
      long long3 = MathUtils.sign(166L);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals(1L, long3);
      
      double double1 = MathUtils.nextAfter((-1.0), (-1143.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0000000000000002), double1, 0.01);
      
      MathUtils mathUtils0 = new MathUtils();
      assertEquals((short)1, MathUtils.PS);
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte)1, MathUtils.PB);
      assertNotNull(mathUtils0);
      
      float float0 = MathUtils.round((-1160.7F), (-3989));
      assertEquals(Float.NaN, float0, 0.01F);
      
      float float1 = MathUtils.round(1450.104F, 0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1450.0F, float1, 0.01F);
      
      long long4 = MathUtils.binomialCoefficient(1983, (-1));
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertEquals(0L, long4);
      
      int int1 = MathUtils.subAndCheck(0, (int) (short)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = (-375);
      // Undeclared exception!
      MathUtils.binomialCoefficient(1364224, (-375));
  }

  @Test(timeout = 10)
  public void test032()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      assertEquals(0, int0);
      
      float float0 = MathUtils.round((float) 0, 0);
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0, (String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 10)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.log(2953.0844756, 739.468472191945);
      assertEquals(0.8267122757063776, double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientLog(3871, 1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8.261268150577648, double1, 0.01);
      
      double double2 = MathUtils.factorialLog(0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      long long0 = MathUtils.addAndCheck((long) 3871, (long) 0);
      assertEquals(3871L, long0);
      
      int int0 = (-3065);
      int int1 = MathUtils.addAndCheck(1, (-3065));
      assertFalse(int1 == int0);
      assertEquals((-3064), int1);
      
      double double3 = MathUtils.log(0.0, 317.174188537);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(-0.0, double3, 0.01);
      
      double double4 = MathUtils.round(739.468472191945, (-371));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      int int2 = MathUtils.sign((-2741));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3064), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      assertEquals(1L, long0);
      
      int int0 = 1259;
      int int1 = MathUtils.mulAndCheck(1259, 1259);
      assertFalse(int1 == int0);
      assertEquals(1585081, int1);
      
      double double0 = (-929.25936);
      double double1 = 1032.488935494529;
      double double2 = MathUtils.nextAfter((-929.25936), 1032.488935494529);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-929.2593599999999), double2, 0.01);
      
      int int2 = 0;
      int int3 = MathUtils.mulAndCheck(1259, 0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      float float0 = MathUtils.round((float) 0L, 1585081);
      assertEquals(Float.NaN, float0, 0.01F);
      
      long long1 = 0L;
      long long2 = MathUtils.subAndCheck(0L, (long) 1585081);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-1585081L), long2);
      
      double double4 = MathUtils.cosh(1L);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.5430806348152437, double4, 0.01);
      
      double double5 = MathUtils.sign((double) 1L);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.lcm(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      assertEquals(0, int0);
      
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = MathUtils.indicator(0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
      
      double double1 = MathUtils.cosh(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      boolean boolean0 = MathUtils.equals((double) 0, (double) (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 10)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int0 = MathUtils.lcm((-2626), (-2626));
      assertEquals(2626, int0);
      
      double double0 = MathUtils.factorialDouble(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 10)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4, 4);
      assertEquals(8, int0);
      
      double double0 = MathUtils.factorialDouble(4);
      assertEquals(24.0, double0, 0.01);
      
      int int1 = MathUtils.gcd(8, (-3555));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float float0 = MathUtils.round(Float.NaN, 4);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double1 = MathUtils.indicator((double) Float.NaN);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = MathUtils.normalizeAngle(0.0, Float.NaN);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      long long0 = MathUtils.mulAndCheck(278L, (long) (-3555));
      assertEquals((-988290L), long0);
      
      double double3 = MathUtils.binomialCoefficientLog(1040, 4);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(24.604074424847845, double3, 0.01);
      
      long long1 = MathUtils.addAndCheck((-988290L), (long) 1040);
      assertFalse(long1 == long0);
      assertEquals((-987250L), long1);
      
      float float1 = MathUtils.round(0.0F, 2298);
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      short short0 = MathUtils.sign((short)2676);
      assertEquals((short)1, short0);
      
      int int2 = MathUtils.gcd(2298, 1040);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      int int3 = MathUtils.gcd(595, 2298);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = MathUtils.mulAndCheck(0, 4005);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      double double4 = MathUtils.sign(0.0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = MathUtils.log(3540.4447356, (-1.0));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = MathUtils.cosh(24.604074424847845);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(2.423169307014014E10, double6, 0.01);
      
      int int5 = MathUtils.addAndCheck(1, (int) (short)1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(2, int5);
      
      long long2 = MathUtils.subAndCheck((long) (short)2676, (long) 1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2675L, long2);
      
      double double7 = MathUtils.binomialCoefficientDouble(2298, 0);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(1.0, double7, 0.01);
  }

  @Test(timeout = 10)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.cosh(51.333530557843);
      assertEquals(9.836465254335783E21, double0, 0.01);
      
      long long0 = MathUtils.indicator(0L);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.subAndCheck((-1L), (-1L));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      double double1 = MathUtils.nextAfter(569.8075362, 1L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(569.8075361999998, double1, 0.01);
      
      double double2 = MathUtils.normalizeAngle(0.0, 0L);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      long long2 = MathUtils.subAndCheck(1L, 0L);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
      
      double double3 = MathUtils.nextAfter(0.0, (-1.0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals((-4.9E-324), double3, 0.01);
  }

  @Test(timeout = 10)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.log(1694.7807578036, 1694.7807578036);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.sign(1.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = MathUtils.round(1.0, (-444), 1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      float float0 = MathUtils.round((float) (-444), (-1415));
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int0 = MathUtils.subAndCheck((-1415), 0);
      assertEquals((-1415), int0);
      
      // Undeclared exception!
      try { 
        MathUtils.roundUnscaled(1694.7807578036, (-1.0), (-1415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test041()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-69));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 10)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.indicator(281.0);
      assertEquals(1.0, double0, 0.01);
      
      MathUtils mathUtils0 = new MathUtils();
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)1, MathUtils.PS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals((byte)1, MathUtils.PB);
      assertEquals((short) (-1), MathUtils.NS);
      assertNotNull(mathUtils0);
      
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), 2111L);
      assertEquals((-2111L), long0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial(1824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 489L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 10)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.indicator(1.0);
      assertEquals(1.0, double0, 0.01);
      
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      double double1 = MathUtils.binomialCoefficientDouble(1, (short)0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-1));
      assertEquals((byte) (-1), byte0);
      
      int int0 = MathUtils.mulAndCheck((int) (byte) (-1), (int) (short)0);
      assertEquals(0, int0);
      
      double double2 = MathUtils.round((double) 0, 1);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      long long0 = MathUtils.sign(1486L);
      assertEquals(1L, long0);
      
      short short1 = MathUtils.indicator((short)0);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      int int1 = MathUtils.subAndCheck(1, (-1152));
      assertFalse(int1 == int0);
      assertEquals(1153, int1);
      
      double double3 = MathUtils.round((-802.394605249732), (int) (short)0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-802.0), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(2397, (-1152));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3506, 1153);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1340L, 1340L);
      assertEquals(2680L, long0);
      
      float float0 = MathUtils.round((-1749.3304F), 4105);
      assertEquals(Float.NaN, float0, 0.01F);
      
      float float1 = MathUtils.indicator(Float.NaN);
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1433), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test046()  throws Throwable  {
      byte byte0 = (byte)73;
      byte byte1 = MathUtils.sign((byte)73);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      long long0 = MathUtils.addAndCheck(0L, (long) (byte)73);
      assertEquals(73L, long0);
      
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = (-1407);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2934), (-1407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test047()  throws Throwable  {
      int int0 = 1133;
      int int1 = MathUtils.mulAndCheck(4, 1133);
      assertFalse(int1 == int0);
      assertEquals(4532, int1);
      
      double double0 = MathUtils.indicator(1729.6476452905013);
      assertEquals(1.0, double0, 0.01);
      
      int int2 = MathUtils.lcm(4, 1133);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4532, int2);
      
      long long0 = MathUtils.addAndCheck((long) 4532, (long) 4532);
      assertEquals(9064L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1133, 1451);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.round(3856.551504107, 2, 2);
      assertEquals(3856.56, double0, 0.01);
      
      byte byte0 = MathUtils.sign((byte)1);
      assertEquals((byte)1, byte0);
      
      double double1 = MathUtils.factorialLog((byte)1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float0 = MathUtils.round(Float.NaN, 2017, (int) (byte)1);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double2 = MathUtils.sinh((-444.92));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-8.419201285775799E192), double2, 0.01);
  }

  @Test(timeout = 10)
  public void test049()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      int int0 = MathUtils.indicator(1752);
      assertEquals(1, int0);
      
      long long0 = MathUtils.indicator((long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 10)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      assertEquals(4.9E-324, double0, 0.01);
      
      long long0 = MathUtils.subAndCheck(0L, 0L);
      assertEquals(0L, long0);
      
      int int0 = MathUtils.mulAndCheck(0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 10)
  public void test051()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      double double0 = MathUtils.sign((-2512.9980507666));
      assertEquals((-1.0), double0, 0.01);
      
      int int0 = (-1333);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test052()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1188.8883322698218, 1188.8883322698218);
      assertTrue(boolean0);
      
      int int0 = MathUtils.addAndCheck(0, (-124));
      assertEquals((-124), int0);
      
      int int1 = MathUtils.indicator((-1766));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float float0 = MathUtils.round((float) (-1), (-1766), 2);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      byte byte0 = (byte) (-107);
      byte byte1 = MathUtils.indicator((byte) (-107));
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.roundUnscaled(0.0, 0.0, 0);
      assertEquals(1.0, double0, 0.01);
      
      MathUtils mathUtils0 = new MathUtils();
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte)1, MathUtils.PB);
      assertEquals((short)1, MathUtils.PS);
      assertNotNull(mathUtils0);
      
      int int0 = MathUtils.mulAndCheck(0, 1678);
      assertEquals(0, int0);
      
      double double1 = MathUtils.binomialCoefficientLog((short)1, (byte) (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      double double2 = MathUtils.roundUnscaled(3.141592653589793, (-371.489583), (byte)0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4.0, double2, 0.01);
  }

  @Test(timeout = 10)
  public void test054()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1);
      assertEquals((short)1, short0);
      
      long long0 = MathUtils.sign((-2884L));
      assertEquals((-1L), long0);
      
      float float0 = MathUtils.round((float) (short)1, 444);
      assertEquals(Float.NaN, float0, 0.01F);
      
      long long1 = MathUtils.addAndCheck(0L, (-2884L));
      assertFalse(long1 == long0);
      assertEquals((-2884L), long1);
      
      double double0 = MathUtils.round((double) (-2884L), 444, 0);
      assertEquals((-2884.0), double0, 0.01);
      
      float float1 = MathUtils.round((-2971.0F), 1);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2971.0F), float1, 0.01F);
      
      double double1 = MathUtils.round((-2884.0), 2164);
      assertEquals(double1, double0, 0.01);
      assertEquals((-2884.0), double1, 0.01);
      
      long long2 = MathUtils.binomialCoefficient(0, 0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
      
      short short1 = MathUtils.sign((short)1);
      assertTrue(short1 == short0);
      assertEquals((short)1, short1);
      
      double double2 = MathUtils.cosh(434.87337);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3.64816877624346E188, double2, 0.01);
  }

  @Test(timeout = 10)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.round(4425.2935, 2849);
      assertEquals(4425.2935, double0, 0.01);
      
      int int0 = MathUtils.lcm((-2948), (-2948));
      assertEquals(2948, int0);
      
      int int1 = MathUtils.mulAndCheck((-2948), 2849);
      assertFalse(int1 == int0);
      assertEquals((-8398852), int1);
      
      long long0 = MathUtils.sign(4992L);
      assertEquals(1L, long0);
      
      double double1 = MathUtils.normalizeAngle((-1528.0), (-2052.930209123));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2055.7875658030853), double1, 0.01);
  }

  @Test(timeout = 10)
  public void test056()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)2);
      assertEquals((byte)1, byte0);
      
      long long0 = MathUtils.subAndCheck((long) (byte)2, (long) (byte)2);
      assertEquals(0L, long0);
      
      long long1 = MathUtils.binomialCoefficient(2, (byte)2);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = MathUtils.sign((long) (byte)2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(1L, long2);
  }

  @Test(timeout = 10)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1);
      assertEquals((short)1, short0);
      
      double double0 = MathUtils.normalizeAngle((-2265.941280434864), (short)1);
      assertEquals(2.288615456966454, double0, 0.01);
      
      byte byte0 = MathUtils.sign((byte)90);
      assertEquals((byte)1, byte0);
      
      long long0 = MathUtils.mulAndCheck((-991L), (long) (short)1);
      assertEquals((-991L), long0);
      
      long long1 = MathUtils.subAndCheck(0L, (-991L));
      assertFalse(long1 == long0);
      assertEquals(991L, long1);
      
      double double1 = MathUtils.round((double) (-991L), (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-990.0), double1, 0.01);
      
      int int0 = MathUtils.mulAndCheck((int) (byte)90, 383);
      assertEquals(34470, int0);
      
      long long2 = MathUtils.mulAndCheck(457L, 2922L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1335354L, long2);
      
      int int1 = MathUtils.subAndCheck(383, 0);
      assertFalse(int1 == int0);
      assertEquals(383, int1);
      
      int int2 = MathUtils.sign((-2132));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      double double2 = MathUtils.sign((-1774.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      float float0 = MathUtils.round((float) (byte)90, (int) (short)1);
      assertEquals(90.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.round(1646.1525F, (-1), 383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-344L), (-344L), "overflow: subtract");
      assertEquals((-688L), long0);
      
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.indicator(281.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = MathUtils.roundUnscaled(1.0, (-3744.3137994698764), 0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.0, double2, 0.01);
      
      MathUtils mathUtils0 = new MathUtils();
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte)1, MathUtils.PB);
      assertEquals((short)1, MathUtils.PS);
      assertNotNull(mathUtils0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial(1824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test059()  throws Throwable  {
      float float0 = MathUtils.indicator(1264.965F);
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = MathUtils.subAndCheck(740, 1);
      assertEquals(739, int0);
  }

  @Test(timeout = 10)
  public void test060()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)65);
      assertEquals((byte)1, byte0);
      
      int int0 = MathUtils.indicator((-1882));
      assertEquals((-1), int0);
      
      long long0 = MathUtils.mulAndCheck((long) (byte)1, 0L);
      assertEquals(0L, long0);
      
      byte byte1 = MathUtils.indicator((byte)65);
      assertTrue(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      double double0 = MathUtils.sinh((-858.8372998));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 10)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      assertEquals(0L, long0);
      
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-629));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1325L), (-1325L));
      assertEquals(0L, long0);
      
      double double0 = MathUtils.normalizeAngle(0.0, 0L);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathUtils.gcd(0, 0);
      assertEquals(0, int0);
      
      long long1 = MathUtils.sign(0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      int int1 = MathUtils.sign(4);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double double1 = MathUtils.sign((double) 0L);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int2 = MathUtils.lcm(1, (-2287));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2287, int2);
      
      double double2 = MathUtils.cosh(0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      long long2 = MathUtils.sign((-131L));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-1L), long2);
      
      int int3 = MathUtils.gcd(0, 0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      double double3 = MathUtils.log(1.0, 0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      
      float float0 = MathUtils.round(724.7424F, 4);
      assertEquals(724.7424F, float0, 0.01F);
      
      long long3 = MathUtils.mulAndCheck((-1L), (long) 0);
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      assertEquals(0L, long3);
  }

  @Test(timeout = 10)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 2003.333473651199);
      assertEquals(2004.336112990288, double0, 0.01);
      
      double double1 = MathUtils.nextAfter(3448.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3447.9999999999995, double1, 0.01);
      
      byte byte0 = MathUtils.indicator((byte)88);
      assertEquals((byte)1, byte0);
      
      int int0 = MathUtils.indicator((int) (byte)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 10)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(6.283185307179586, 6.283185307179586);
      assertTrue(boolean0);
      
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
      
      double double0 = MathUtils.round(2510.4561, (int) (byte)1, (int) (byte)1);
      assertEquals(2510.4, double0, 0.01);
      
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)1);
      assertEquals(0, int0);
      
      double double1 = MathUtils.roundUnscaled(0.0, 2510.4, (byte)1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      double double2 = MathUtils.sign(6.283185307179586);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      boolean boolean1 = MathUtils.equals(1.0, 6.283185307179586);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 10)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1330), (-1330));
      assertEquals((-2660), int0);
      
      double double0 = MathUtils.round((-1022.08), 1, 0);
      assertEquals((-1022.1), double0, 0.01);
  }

  @Test(timeout = 10)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      assertEquals(0, int0);
      
      int int1 = MathUtils.sign(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 10)
  public void test067()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-18));
      assertEquals((byte) (-1), byte0);
      
      double double0 = 1902.0321851935792;
      double double1 = MathUtils.log(1902.0321851935792, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte) (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test068()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1776);
      assertEquals((short)1, short0);
      
      float float0 = MathUtils.round((float) (short)1, (int) (short)1776, (int) (short)1);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double0 = MathUtils.factorialLog(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.round((-2854.7002494), 0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2855.0), double1, 0.01);
      
      int int0 = MathUtils.addAndCheck(1, 227);
      assertEquals(228, int0);
      
      short short1 = MathUtils.sign((short)1776);
      assertTrue(short1 == short0);
      assertEquals((short)1, short1);
  }

  @Test(timeout = 10)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      assertEquals(1L, long0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathUtils.normalizeAngle((-2137.656), (-72.92));
      assertEquals((-70.48803393791604), double0, 0.01);
      
      int int0 = MathUtils.sign((-1924));
      assertEquals((-1), int0);
      
      float float0 = MathUtils.sign(1687.1624F);
      assertEquals(1.0F, float0, 0.01F);
      
      byte byte0 = MathUtils.sign((byte) (-25));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 10)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(4088, 0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.roundUnscaled(4088, 0.0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4089.0, double1, 0.01);
      
      long long0 = MathUtils.mulAndCheck(1815L, 0L);
      assertEquals(0L, long0);
      
      double double2 = MathUtils.roundUnscaled(4089.0, 4088, 0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4090.0, double2, 0.01);
  }

  @Test(timeout = 10)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4175L), (-4175L));
      assertEquals((-8350L), long0);
      
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
      
      long long1 = MathUtils.indicator((-4175L));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      double double0 = MathUtils.sign((double) (-1L));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = MathUtils.nextAfter((-2061.69507578202), 39.51289012135934);
      assertEquals((-2061.6950757820196), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float float0 = MathUtils.indicator((float) (-8350L));
      assertEquals((-1.0F), float0, 0.01F);
      
      double double2 = MathUtils.sign((double) (byte)1);
      assertEquals(1.0, double2, 0.01);
      
      long long2 = MathUtils.sign((-52L));
      assertTrue(long2 == long1);
      
      double double3 = MathUtils.binomialCoefficientDouble(960, (byte)1);
      assertEquals(960.0, double3, 0.01);
  }

  @Test(timeout = 10)
  public void test072()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-17));
      assertEquals((byte) (-1), byte0);
      
      double double0 = MathUtils.indicator((double) (byte) (-1));
      assertEquals((-1.0), double0, 0.01);
      
      long long0 = MathUtils.subAndCheck((long) (byte) (-1), (-453L));
      assertEquals(452L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.round((-2290.88526902179), 0, 215);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 10)
  public void test073()  throws Throwable  {
      int int0 = (-1218);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-1218), (-1218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 10)
  public void test074()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 1);
      assertEquals((-1.0F), float0, 0.01F);
      
      long long0 = MathUtils.subAndCheck(1L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 10)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(4.9E-324, Double.NaN);
      assertFalse(boolean0);
      
      byte byte0 = MathUtils.sign((byte)0);
      assertEquals((byte)0, byte0);
      
      double double0 = MathUtils.sinh((byte)0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = MathUtils.indicator((long) (byte)0);
      assertEquals(1L, long0);
      
      float float0 = MathUtils.indicator((-206.545F));
      assertEquals((-1.0F), float0, 0.01F);
      
      float float1 = MathUtils.sign((float) (byte)0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      double double1 = MathUtils.factorialLog((byte)0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 10)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.nextAfter(3373.48, 3373.48);
      assertEquals(3373.4800000000005, double0, 0.01);
      
      double double1 = MathUtils.nextAfter((-417.8634459), 3373.48);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-417.86344589999993), double1, 0.01);
      
      double double2 = MathUtils.nextAfter((-521.39444), 3373.4800000000005);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-521.3944399999999), double2, 0.01);
  }

  @Test(timeout = 10)
  public void test077()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-1431.231563259), 0);
      assertEquals((-1431.0), double0, 0.01);
      
      float float0 = MathUtils.round((float) 0, 0);
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = (-1548);
      int int2 = (-1697);
      int int3 = MathUtils.subAndCheck((-1548), (-1697));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(149, int3);
      
      float float1 = MathUtils.sign((float) 0);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(980L, 9223372036854775807L, "");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // 
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 3448);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3448;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 3448;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 3448;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3448.0, 0.0, 3448.0, 0.0, 3448.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = MathUtils.subAndCheck((-1), 0);
      assertEquals((-1), int0);
      
      float float0 = MathUtils.round((float) 0, 3448);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int1 = MathUtils.indicator(0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = MathUtils.indicator((long) (-1));
      assertEquals((-1L), long0);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-214L), 0L);
      assertEquals((-214L), long0);
      
      double double0 = MathUtils.sinh(0L);
      assertEquals(0.0, double0, 0.01);
      
      MathUtils mathUtils0 = new MathUtils();
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)0, MathUtils.ZS);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte)1, MathUtils.PB);
      assertEquals((short)1, MathUtils.PS);
      assertNotNull(mathUtils0);
      
      long long1 = MathUtils.subAndCheck(1223L, 1223L);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      
      int int0 = MathUtils.gcd((byte)0, (short)1);
      assertEquals(1, int0);
      
      long long2 = MathUtils.addAndCheck(0L, (long) (short) (-1));
      assertEquals((-1L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = MathUtils.sign(1078L);
      assertEquals(1L, long3);
  }

  @Test(timeout = 10)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.sign(1);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathUtils.factorialDouble(0);
      assertEquals(1.0, double0, 0.01);
      
      float float0 = MathUtils.sign((-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 10)
  public void test081()  throws Throwable  {
      int int0 = (-559);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.nextAfter(1368.1669305863, (-1250.8382067));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1368.1669305862997, double1, 0.01);
      
      int int0 = 1443;
      int int1 = MathUtils.gcd((-638), 1443);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = (-207L);
      long long1 = MathUtils.indicator((-207L));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      long long2 = MathUtils.indicator(0L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1L, long2);
      
      double double2 = MathUtils.sign((-1.0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      float float0 = MathUtils.round((float) (-1L), 169, 0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int2 = 0;
      int int3 = MathUtils.mulAndCheck((-2164), 0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      double double3 = MathUtils.binomialCoefficientDouble(169, 0);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial(1443);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test083()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = (-763);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-763), (-763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }
  @Test(timeout = 10)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.sign(2494);
      assertEquals(1, int0);
      
      int int1 = MathUtils.sign(2494);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      byte byte0 = MathUtils.sign((byte) (-4));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 10)
  public void test086()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)27);
      assertEquals((byte)1, byte0);
      
      double double0 = MathUtils.factorialLog((byte)27);
      assertEquals(64.55753862700634, double0, 0.01);
      
      long long0 = MathUtils.mulAndCheck((long) (byte)1, (-2649L));
      assertEquals((-2649L), long0);
  }

  @Test(timeout = 10)
  public void test087()  throws Throwable  {
      float float0 = MathUtils.sign((-684.3242F));
      assertEquals((-1.0F), float0, 0.01F);
      
      double double0 = MathUtils.round(468.1276825644019, 0);
      assertEquals(468.0, double0, 0.01);
      
      float float1 = MathUtils.round(0.0F, 0, 0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 10)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.nextAfter(10.0, 2.0);
      assertEquals(9.999999999999998, double0, 0.01);
  }

  @Test(timeout = 10)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.lcm(1, 1);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1406), 1015);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(31);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test091()  throws Throwable  {
      MathUtils mathUtils0 = new MathUtils();
      assertEquals((byte)1, MathUtils.PB);
      assertEquals((short)1, MathUtils.PS);
      assertEquals((byte) (-1), MathUtils.NB);
      assertEquals((short) (-1), MathUtils.NS);
      assertEquals((byte)0, MathUtils.ZB);
      assertEquals(6.283185307179586, MathUtils.TWO_PI, 0.01);
      assertEquals((short)0, MathUtils.ZS);
      assertNotNull(mathUtils0);
      
      int int0 = MathUtils.gcd((byte)1, (short) (-1));
      assertEquals(1, int0);
      
      int int1 = (-1010);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte) (-1), (-1010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-3438));
      assertEquals(0L, long0);
      
      long long1 = MathUtils.addAndCheck((-2045L), 2492L);
      assertFalse(long1 == long0);
      assertEquals(447L, long1);
      
      long long2 = MathUtils.binomialCoefficient(1, (-1));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
      
      byte byte0 = MathUtils.sign((byte) (-76));
      assertEquals((byte) (-1), byte0);
      
      int int0 = 514;
      int int1 = (-396);
      int int2 = MathUtils.gcd(514, (-396));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      int int3 = 2;
      int int4 = 0;
      long long3 = MathUtils.binomialCoefficient(2, 0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals(1L, long3);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test093()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      short short2 = MathUtils.indicator((short) (-5629));
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short) (-1), short2);
      
      double double0 = MathUtils.normalizeAngle(0.0, (short)1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.sinh(Double.POSITIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      int int0 = (-1061);
      // Undeclared exception!
      try { 
        MathUtils.roundUnscaled(0.0, 0.0, (-1061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.indicator((-1));
      assertEquals((-1), int0);
      
      double double0 = MathUtils.indicator((double) (-1));
      assertEquals((-1.0), double0, 0.01);
      
      short short0 = MathUtils.indicator((short)1);
      assertEquals((short)1, short0);
      
      short short1 = MathUtils.indicator((short)2541);
      assertTrue(short1 == short0);
      assertEquals((short)1, short1);
      
      double double1 = MathUtils.sign((double) (-1));
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      double double2 = MathUtils.cosh((short)1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.5430806348152437, double2, 0.01);
      
      double double3 = MathUtils.indicator((double) (-1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      int int1 = MathUtils.subAndCheck(2320, (-1));
      assertFalse(int1 == int0);
      assertEquals(2321, int1);
      
      int int2 = MathUtils.indicator((int) (short)1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      double double4 = MathUtils.indicator((-1929.5209432565248));
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals((-1.0), double4, 0.01);
      
      long long0 = MathUtils.subAndCheck(935L, (-1L));
      assertEquals(936L, long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1650.49859029443;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1650.49859029443, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      short short2 = MathUtils.sign((short) (-1));
      assertFalse(short2 == short0);
      assertFalse(short2 == short1);
      assertEquals((short) (-1), short2);
      
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1650.49859029443, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      int int3 = MathUtils.sign((-2724));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = MathUtils.subAndCheck((-2724), 2346);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((-5070), int4);
      
      // Undeclared exception!
      try { 
        MathUtils.roundUnscaled((-5389017.710720757), 1.0, 1293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(13, 13);
      assertEquals(1L, long0);
      
      double double0 = MathUtils.nextAfter(465.261646903202, 465.261646903202);
      assertEquals(465.26164690320206, double0, 0.01);
      
      double double1 = 2406.0;
      double double2 = MathUtils.sign(2406.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      float float0 = MathUtils.sign((float) 1L);
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = MathUtils.gcd(13, 13);
      assertEquals(13, int0);
      
      short short0 = (short)1;
      short short1 = MathUtils.indicator((short)1);
      assertTrue(short1 == short0);
      assertEquals((short)1, short1);
      
      double double3 = MathUtils.binomialCoefficientLog(2352, 2);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(14.832470177017829, double3, 0.01);
      
      short short2 = MathUtils.sign((short)1);
      assertTrue(short2 == short0);
      assertTrue(short2 == short1);
      assertEquals((short)1, short2);
      
      double double4 = MathUtils.factorialLog(13);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(22.552163853123425, double4, 0.01);
      
      long long1 = MathUtils.subAndCheck((long) 2, 1L);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial(2352);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 1647, 1647);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.normalizeAngle(0.0, 1647);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1646.1945504810517, double1, 0.01);
      
      int int0 = MathUtils.lcm(0, (-864));
      assertEquals(0, int0);
      
      double double2 = MathUtils.indicator((double) 1647);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = MathUtils.sinh((-2612.047807375262));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      
      int int1 = MathUtils.lcm((-1), (-883));
      assertFalse(int1 == int0);
      assertEquals(883, int1);
      
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round((float) 0, 0);
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = MathUtils.addAndCheck((long) 1647, 1594L, "VsG T$1H>3GpQZa");
      assertEquals(3241L, long0);
      
      long long1 = MathUtils.factorial(0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      byte byte0 = MathUtils.sign((byte)113);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 10)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.gcd(2352, 2363);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 259);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4, 4);
      assertEquals(8, int0);
      
      double double0 = MathUtils.factorialDouble(4);
      assertEquals(24.0, double0, 0.01);
      
      int int1 = MathUtils.gcd(8, (-3555));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float float0 = MathUtils.round(Float.NaN, 4);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double1 = MathUtils.indicator((double) Float.NaN);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = MathUtils.normalizeAngle(0.0, Float.NaN);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      long long0 = MathUtils.mulAndCheck((long) 1, (long) (-3555));
      assertEquals((-3555L), long0);
      
      double double3 = MathUtils.binomialCoefficientLog(1040, 4);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(24.604074424847845, double3, 0.01);
      
      long long1 = MathUtils.addAndCheck((-3555L), (long) 1040);
      assertFalse(long1 == long0);
      assertEquals((-2515L), long1);
      
      float float1 = MathUtils.round(0.0F, 2298);
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      short short0 = MathUtils.sign((short)2676);
      assertEquals((short)1, short0);
      
      int int2 = MathUtils.gcd(2298, 1040);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      int int3 = MathUtils.gcd(595, 2298);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      int int4 = MathUtils.mulAndCheck(0, 4005);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      double double4 = MathUtils.sign(0.0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = MathUtils.log(3540.4447356, (-1.0));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = MathUtils.cosh(24.604074424847845);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(2.423169307014014E10, double6, 0.01);
      
      int int5 = MathUtils.addAndCheck(1, (int) (short)1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertEquals(2, int5);
      
      double double7 = MathUtils.binomialCoefficientDouble(2298, 0);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(1.0, double7, 0.01);
  }

  @Test(timeout = 10)
  public void test099()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = MathUtils.factorial(20);
      assertEquals(2432902008176640000L, long0);
      
      int int2 = MathUtils.sign(0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      double double0 = MathUtils.sign((-604.45262));
      assertEquals((-1.0), double0, 0.01);
      
      long long1 = MathUtils.mulAndCheck((long) 0, (-2650L));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      int int3 = MathUtils.addAndCheck(0, 0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      double double1 = MathUtils.indicator((-1215.82));
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      int int4 = MathUtils.indicator(0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, int4);
      
      int int5 = MathUtils.sign((-1594));
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals((-1), int5);
      
      boolean boolean0 = MathUtils.equals(0.0, (-381.0));
      assertFalse(boolean0);
      
      double double2 = MathUtils.round(0.0, (-1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test100()  throws Throwable  {
      MathUtils.indicator(1.0);
      MathUtils.sign((short)0);
      int int0 = 1;
      MathUtils.binomialCoefficientDouble(1, (short)0);
      MathUtils.indicator((byte) (-1));
      MathUtils.mulAndCheck((int) (byte) (-1), (int) (short)0);
      MathUtils.round((double) 0, 1);
      MathUtils.sign(1486L);
      MathUtils.indicator((short)0);
      MathUtils.subAndCheck(1, (-1152));
      MathUtils.round((-802.394605249732), (int) (short)0);
      int int1 = 2397;
      MathUtils.binomialCoefficientDouble(2397, (-1152));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3506, 1153);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test101()  throws Throwable  {
      byte byte0 = (byte)56;
      MathUtils.indicator((byte)56);
      MathUtils.sinh((byte)56);
      MathUtils.mulAndCheck((long) (byte)1, (long) (byte)1);
      MathUtils.sign((-1913.0F));
      double double0 = MathUtils.TWO_PI;
      MathUtils.nextAfter((byte)1, (-1913.0F));
      MathUtils.sign((float) 1L);
      MathUtils.log((-1913.0F), 1.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(31, 31);
      assertEquals(0, int0);
      
      MathUtils.sign((long) 31);
      double double0 = MathUtils.binomialCoefficientDouble(31, 0);
      long long0 = MathUtils.indicator((long) 0);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.addAndCheck(1L, 0L);
      double double1 = MathUtils.cosh(0.0);
      assertEquals(1.0, double1, 0.01);
      
      long long2 = MathUtils.factorial(0);
      assertTrue(long2 == long1);
      
      long long3 = MathUtils.mulAndCheck((-103L), 1L);
      assertEquals((-103L), long3);
      
      double double2 = MathUtils.sign((double) 1L);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-103L);
      doubleArray0[2] = (double) 31;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 10)
  public void test103()  throws Throwable  {
      long long0 = (-5416L);
      MathUtils.mulAndCheck((-5416L), (-5416L));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("MathUtils", e);
      }
  }

  @Test(timeout = 10)
  public void test104()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.sign((-5115.8087491));
      assertEquals((-1.0), double1, 0.01);
      
      MathUtils.factorialLog(0);
      long long0 = MathUtils.subAndCheck(4503599627370495L, 1L);
      assertEquals(4503599627370494L, long0);
      
      int int0 = MathUtils.indicator(0);
      MathUtils.round(0.0, (-822));
      MathUtils.binomialCoefficientDouble(31, 0);
      double double2 = MathUtils.indicator(1.0);
      double double3 = MathUtils.nextAfter(1.0, 4.9E-324);
      assertEquals(0.9999999999999999, double3, 0.01);
      
      int int1 = MathUtils.lcm((-1), (-1));
      assertTrue(int1 == int0);
      
      long long1 = MathUtils.addAndCheck((-1471L), 0L);
      assertEquals((-1471L), long1);
      
      short short0 = MathUtils.indicator((short)1433);
      assertEquals((short)1, short0);
      
      long long2 = MathUtils.indicator(0L);
      assertEquals(1L, long2);
      
      double double4 = MathUtils.sign((double) 1L);
      assertEquals(double4, double2, 0.01);
      
      double double5 = MathUtils.cosh(0.0);
      assertEquals(double5, double0, 0.01);
      
      MathUtils.log(1.0, 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4503599627370494L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1471L);
      doubleArray0[5] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }
}
