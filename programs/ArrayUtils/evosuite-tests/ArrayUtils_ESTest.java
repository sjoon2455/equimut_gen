/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 27 17:53:13 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class ArrayUtils_ESTest {
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2710.863F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 73.0F;
      floatArray0[4] = 0.0F;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 73.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 73.0F;
      ArrayUtils.indexOf(doubleArray0, (double) 1.0F, 0, 2153.0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.isEmpty(booleanArray0);
      ArrayUtils.addAll(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte) (-1);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      ArrayUtils.subarray((double[]) null, (int) (byte) (-28), (-346));
      short[] shortArray0 = new short[0];
      ArrayUtils.contains(shortArray0, (short) (byte) (-53));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-346);
      ArrayUtils.isEmpty(intArray0);
      ArrayUtils.removeElement(byteArray0, (byte)106);
      int[] intArray1 = new int[9];
      intArray1[0] = (int) (byte) (-1);
      intArray1[1] = (int) (byte) (-28);
      intArray1[2] = 1740;
      intArray1[3] = (int) (byte) (-53);
      intArray1[4] = (int) (byte) (-28);
      intArray1[5] = 997;
      intArray1[6] = (int) (byte) (-1);
      intArray1[7] = 7;
      intArray1[8] = (int) (byte)88;
      ArrayUtils.contains(intArray1, (-1431655765));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      ArrayUtils.addAll(byteArray1, byteArray1);
      int int0 = 570;
      ArrayUtils.lastIndexOf(byteArray1, (byte)73, 570);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)73;
      shortArray0[1] = (short) (byte)73;
      shortArray0[2] = (short) (byte)73;
      shortArray0[3] = (short) (byte)73;
      shortArray0[4] = (short) (byte)73;
      short short0 = (short) (-1764);
      ArrayUtils.contains(shortArray0, (short) (-1764));
      char[] charArray0 = new char[0];
      ArrayUtils.toObject(charArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 570;
      intArray0[1] = (int) (byte)73;
      ArrayUtils.addAll(intArray0, intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 570);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 570, Length: 5
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1077.0F;
      floatArray0[1] = (-1074.4978F);
      floatArray0[2] = 1281.1F;
      floatArray0[3] = 1015.7162F;
      ArrayUtils.indexOf(floatArray0, 1281.1F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      ArrayUtils.add(byteArray0, (byte)6);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)6;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = (int) (short)6;
      intArray0[3] = 2;
      intArray0[4] = 2;
      ArrayUtils.add(intArray0, (int) (short)6);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1077.0F;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1015.7162F;
      doubleArray0[6] = (double) 1281.1F;
      ArrayUtils.contains(doubleArray0, (-1.0), 1077.0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.indexOf((Object[]) null, object0, (-1860));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-649);
      intArray0[1] = (-787);
      intArray0[2] = 0;
      intArray0[3] = 2829;
      intArray0[4] = 2146716689;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-649)}, intArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)13483;
      shortArray0[2] = (short) (-935);
      shortArray0[3] = (short)2593;
      shortArray0[4] = (short) (-1698);
      shortArray0[5] = (short) (-366);
      shortArray0[6] = (short)2421;
      shortArray0[7] = (short)217;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.isSameLength(intArray0, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3087;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-3236);
      shortArray0[4] = (short) (-1435);
      ArrayUtils.subarray(shortArray0, (int) (short) (-1435), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.toObject(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1388;
      ArrayUtils.lastIndexOf(intArray0, (-21), 2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) (-21));
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'g';
      ArrayUtils.toObject(charArray0);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-41));
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      Byte byte6 = new Byte(byte0);
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)67);
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-100));
      byteArray0[7] = byte8;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4883);
      shortArray0[1] = (short)334;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-175);
      short short0 = (short)2582;
      shortArray0[6] = (short)2582;
      shortArray0[7] = (short)0;
      ArrayUtils.removeElement(shortArray0, (short)0);
      ArrayUtils.isEmpty(shortArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      short short1 = (short) (-1046);
      ArrayUtils.contains(shortArray0, (short) (-1046));
      Short[] shortArray1 = new Short[2];
      shortArray0[1] = (short)2;
      shortArray1[1] = (Short) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)275;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-3331);
      ArrayUtils.isEmpty(shortArray0);
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)2);
      doubleArray0[0] = double0;
      Double double1 = new Double(5.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      doubleArray0[2] = double2;
      ArrayUtils.toPrimitive(doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-3331);
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short)275;
      floatArray0[4] = (float) (short) (-3331);
      floatArray0[5] = (float) (short)2;
      ArrayUtils.remove(floatArray0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength((float[]) null, floatArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)30;
      ArrayUtils.removeElement(byteArray0, (byte)30);
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)73;
      byteArray1[1] = (Byte) (byte) (-84);
      byteArray1[2] = (Byte) (byte)30;
      byteArray1[3] = (Byte) (byte)30;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)73;
      byteArray1[7] = (Byte) (byte)0;
      ArrayUtils.toPrimitive(byteArray1);
      ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) byteArray1);
      ArrayUtils.contains((byte[]) null, (byte)0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1909);
      intArray0[2] = 407;
      intArray0[3] = 0;
      ArrayUtils.indexOf(intArray0, 407);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("WNo4SBm");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("WNo4SBm");
      Boolean.logicalXor(false, true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean2);
      booleanArray0[4] = boolean4;
      Boolean.getBoolean("WNo4SBm");
      ArrayUtils.toPrimitive(booleanArray0, true);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, 1.0F);
      ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1909);
      intArray0[2] = 407;
      intArray0[3] = 0;
      ArrayUtils.indexOf(intArray0, 407);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("WNo4SBm");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("WNo4SBm");
      Boolean.logicalXor(false, true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean2);
      booleanArray0[4] = boolean4;
      ArrayUtils.toPrimitive(booleanArray0, true);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CLASS_ARRAY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 0;
      intArray0[3] = (-2145658542);
      intArray0[4] = 353;
      intArray0[5] = 1204;
      intArray0[6] = 1077;
      intArray0[7] = 3613;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertArrayEquals(new int[] {8, 0, (-2145658542), 353, 1204, 1077, 3613}, intArray1);
      
      ArrayUtils.toPrimitive((Character[]) null);
      ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      ArrayUtils.clone((Object[]) null);
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-104));
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-104));
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-47));
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-104)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)57;
      shortArray0[4] = (short) (-3331);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)2);
      doubleArray0[0] = double0;
      Double double1 = new Double(5.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2.0, 5.0, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = ArrayUtils.indexOf(charArray0, '#', (int) (short) (-3331));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayUtils.isEmpty((boolean[]) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 22.880133F;
      floatArray0[1] = 4455.449F;
      floatArray0[2] = 18.8268F;
      floatArray0[3] = (-43.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = 1983.4172F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertArrayEquals(new float[] {22.880133F, 4455.449F, 18.8268F, (-43.0F), 1.0F, (-1.0F), 1.0F, 1983.4172F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "java.lang.Object", (-971));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2838);
      shortArray0[1] = (short)2662;
      shortArray0[2] = (short)1991;
      shortArray0[3] = (short)878;
      shortArray0[4] = (short)3580;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3580);
      assertArrayEquals(new short[] {(short) (-2838), (short)2662, (short)1991, (short)878}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-508.0));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-450.0));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)60;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)60, (int) (byte)12);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.removeElement(charArray0, 'C');
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-508.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-508.0)}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)12;
      floatArray0[1] = (float) (byte)12;
      floatArray0[2] = (float) (byte)10;
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) (byte)60;
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) (byte)1;
      floatArray0[7] = (float) (byte)60;
      floatArray0[8] = (float) (byte)12;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) doubleArray0, (Object[]) floatArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 588.113, 0);
      assertEquals((-1), int0);
      
      ArrayUtils.toObject((byte[]) null);
      ArrayUtils.subarray((boolean[]) null, (-990), (-990));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-990);
      ArrayUtils.clone(longArray0);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(102.0F);
      floatArray0[0] = float0;
      Float float1 = new Float(807.196943);
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-990));
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[1]);
      floatArray0[3] = float3;
      Float float4 = new Float(3.0F);
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[4]);
      floatArray0[6] = float6;
      Float float7 = new Float(807.196943);
      floatArray0[7] = float7;
      Float float8 = new Float((-589.331493498852));
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {102.0F, 807.19696F, (-990.0F), 807.19696F, 3.0F, 102.0F, 3.0F, 807.19696F, (-589.3315F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      ArrayUtils.reverse(objectArray0);
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 877.2F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 306.505F, (-357));
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 877.2F;
      doubleArray0[1] = (double) (-357);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 877.2F;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-357.0), 1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1909);
      intArray0[2] = 407;
      intArray0[3] = 0;
      ArrayUtils.indexOf(intArray0, 407);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("WNo4SBm");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("WNo4SBm");
      Boolean.logicalXor(false, true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean2);
      booleanArray0[4] = boolean4;
      ArrayUtils.toPrimitive(booleanArray0, true);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.toPrimitive(booleanArray0, false);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-730));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-730));
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("", (-4501));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-244));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2070);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-366));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-600));
      integerArray0[8] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertArrayEquals(new int[] {(-730), (-730), (-4501), (-244), (-730), 2070, (-366), (-730), (-600)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ArrayUtils.indexOf(objectArray0, object4, 50);
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 50);
      Float float1 = new Float((-2738.56));
      floatArray0[1] = float1;
      Float float2 = new Float((float) 50);
      floatArray0[2] = float2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-3230);
      shortArray0[2] = (short) (-1311);
      shortArray0[3] = (short)7;
      shortArray0[4] = (short) (-1647);
      shortArray0[5] = (short) (-294);
      shortArray0[6] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(7, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1929.7793F);
      floatArray0[1] = (float) (short) (-1647);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1929.7793F));
      assertTrue(boolean0);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) (-1647.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) (short) (-1311));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1647.0F)}, floatArray2, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[3] = 'A';
      charArray0[4] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'h', '3', '5', 'A', 'B', 'h', '3', '5', 'A', 'B'}, charArray1);
      assertEquals(10, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-79);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(2, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (byte)102;
      doubleArray0[2] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-93), (double) (byte) (-93));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertArrayEquals(new double[] {2.0, 102.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = (float) (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 553);
      assertEquals(1, int2);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '!';
      charArray0[3] = '6';
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-508.0));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-450.0));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)60;
      int int1 = new Integer((byte)1);
      ArrayUtils.clone(longArray0);
      char[] charArray0 = new char[0];
      ArrayUtils.removeElement(charArray0, 'C');
      ArrayUtils.clone(doubleArray1);
      assertArrayEquals(new double[] {(-508.0)}, doubleArray1, 0.01);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) 60L;
      longArray1[1] = (Long) 60L;
      longArray1[2] = (Long) 60L;
      longArray1[3] = (Long) 60L;
      longArray1[4] = (Long) 60L;
      longArray1[5] = (Long) 60L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {60L, 60L, 60L, 60L, 60L, 60L}, longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray1, (Object[]) doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1200.783F);
      floatArray0[2] = (-2376.4531F);
      floatArray0[3] = (-1.0F);
      ArrayUtils.indexOf(floatArray0, (-2376.4531F), 1);
      char[] charArray0 = new char[1];
      ArrayUtils.indexOf(charArray0, 'G', 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ArrayUtils.lastIndexOf(byteArray0, (byte)70);
      ArrayUtils.lastIndexOf(charArray0, '|');
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = 1L;
      longArray0[3] = (long) (byte)2;
      longArray0[5] = (long) '|';
      longArray0[6] = (long) 1;
      int int0 = new Integer(0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      ArrayUtils.addAll(floatArray0, floatArray0);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', (-2607));
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) (-2607);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3862.348901173, (-1), 80.0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1), (-1));
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      ArrayUtils.subarray(floatArray0, (-1), (-1));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      ArrayUtils.indexOf(longArray0, 111L, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      ArrayUtils.indexOf(byteArray0, (byte)48, (int) (byte)0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) 1.0F;
      Object object1 = new Object();
      ArrayUtils.indexOf(objectArray0, object1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      byte byte1 = (byte)30;
      byteArray0[3] = (byte)30;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)30);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte)73}, byteArray1);
      
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)73;
      byteArray2[1] = (Byte) (byte) (-84);
      byteArray2[2] = (Byte) (byte)30;
      byteArray2[3] = (Byte) (byte)30;
      byteArray2[4] = (Byte) (byte)0;
      byteArray2[5] = (Byte) (byte)0;
      byteArray2[6] = (Byte) (byte)73;
      byteArray2[7] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-84), (byte)30, (byte)30, (byte)0, (byte)0, (byte)73, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'I';
      charArray0[2] = 'V';
      charArray0[3] = 'u';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'V');
      assertArrayEquals(new char[] {'6', 'I', 'u'}, charArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray2, (Object) byte1, (int) byte0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      long[] longArray0 = ArrayUtils.reverse((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(598);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer.max((int) integerArray0[0], 598);
      Integer.max((-468), 1789);
      Integer integer2 = new Integer((-1552));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1552));
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, (-1552));
      assertArrayEquals(new int[] {598, 598, (-1552), (-1552)}, intArray0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-1.0F));
      floatArray0[0] = float0;
      Float float1 = new Float(1733.59245032091);
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-468));
      floatArray0[2] = float2;
      Float float3 = new Float((-269.5723153));
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1733.5924F, (-468.0F), (-269.57233F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-214);
      ArrayUtils.clone(shortArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-214);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      int int0 = 1629;
      ArrayUtils.subarray(doubleArray0, (int) (short) (-214), 1629);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-214);
      longArray0[1] = (long) (short) (-214);
      longArray0[2] = (long) (short) (-214);
      longArray0[3] = (long) 1629;
      longArray0[4] = (long) 1629;
      longArray0[5] = (-1679L);
      longArray0[6] = (long) (short) (-214);
      long long0 = (-1777L);
      ArrayUtils.contains(longArray0, (-1777L));
      ArrayUtils.subarray((boolean[]) null, (int) (short) (-214), (-116));
      ArrayUtils.addAll(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (int) (short) (-214));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -214, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(10, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '4';
      charArray0[2] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', 155);
      assertEquals((-1), int0);
      
      ArrayUtils.addAll((short[]) null, (short[]) null);
      boolean boolean1 = ArrayUtils.contains(charArray0, '.');
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) '4';
      floatArray0[4] = (float) '?';
      floatArray0[5] = (float) '.';
      floatArray0[6] = (float) 155;
      floatArray0[7] = (float) 155;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '?';
      floatArray0[4] = (float) '?';
      longArray0[3] = (long) 155;
      longArray0[4] = (long) (-1);
      longArray0[5] = 286L;
      longArray0[6] = (long) '4';
      longArray0[7] = (long) '?';
      longArray0[8] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), (-1));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-79);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(4, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-93), (double) (byte)1);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertArrayEquals(new double[] {4.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = (float) (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 553);
      assertEquals(1, int2);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '!';
      charArray0[3] = '6';
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2799;
      intArray0[1] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-5);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)43);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)61;
      intArray0[1] = (int) (byte) (-5);
      intArray0[2] = (int) (byte)61;
      intArray0[3] = (int) (byte)61;
      intArray0[4] = (-2146931736);
      int int1 = ArrayUtils.indexOf(intArray0, (-5), 1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-689);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '?';
      charArray0[2] = 'E';
      charArray0[3] = 'Q';
      boolean boolean2 = ArrayUtils.contains(charArray0, '?');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)10;
      shortArray0[3] = (short) (-2832);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short) (-415);
      shortArray0[7] = (short) (-28);
      shortArray0[8] = (short)4500;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)10;
      objectArray0[1] = (Object) (short) (-1);
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) null);
      assertTrue(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean2 = Boolean.valueOf(false);
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean("");
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean("FX");
      booleanArray0[3] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.indexOf(intArray0, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      ArrayUtils.lastIndexOf(booleanArray0, true, 996);
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 5;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 5);
      ArrayUtils.lastIndexOf(booleanArray1, true, 5);
      ArrayUtils.isSameLength(floatArray1, floatArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2899.90611082466;
      ArrayUtils.indexOf(doubleArray0, (double) (-1), (double) 4);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      ArrayUtils.clone(objectArray0);
      Float[] floatArray2 = new Float[4];
      floatArray2[0] = (Float) 5.0F;
      floatArray2[1] = (Float) 5.0F;
      doubleArray0[0] = (double) 5.0F;
      floatArray2[3] = (Float) 5.0F;
      ArrayUtils.toPrimitive(floatArray2, (float) 0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 5;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 4;
      longArray0[5] = 1L;
      longArray0[6] = (long) 5;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 9
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'W', 'W'}, charArray1);
      
      ArrayUtils.removeElement((long[]) null, 1L);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'W';
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) 'W';
      intArray0[4] = 1;
      intArray0[5] = 625;
      intArray0[6] = (int) 'W';
      intArray0[7] = (int) 'W';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.removeElement(booleanArray0, true);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)667;
      shortArray0[2] = (short) (-1869);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-21975);
      ArrayUtils.subarray(shortArray0, 935, (-907));
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)30;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)30);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte)73}, byteArray1);
      
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)73;
      byteArray2[1] = (Byte) (byte) (-84);
      byteArray2[2] = (Byte) (byte)30;
      byteArray2[3] = (Byte) (byte)30;
      byteArray2[4] = (Byte) (byte)0;
      byteArray2[5] = (Byte) (byte)0;
      byteArray2[7] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1200.783F);
      floatArray0[2] = (-2376.4192F);
      floatArray0[3] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-2376.4192F), 1);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[1];
      ArrayUtils.indexOf(charArray0, 'G', 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      int int1 = ArrayUtils.lastIndexOf(charArray0, '|');
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 'G';
      longArray0[3] = (long) (byte)2;
      longArray0[5] = (long) '|';
      longArray0[6] = (long) 1;
      ArrayUtils.indexOf(longArray0, (-3766L), (-1));
      Object object0 = new Object();
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(8, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '1');
      assertEquals(1, charArray1.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-549), (int) (byte)0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      ArrayUtils.subarray(objectArray0, (-1403), (-1403));
      ArrayUtils.lastIndexOf((char[]) null, '@');
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-4218);
      shortArray0[2] = (short) (-6677);
      shortArray0[3] = (short) (-2428);
      ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 166);
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.addAll(byteArray0, byteArray0);
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)27624;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'a');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)8;
      doubleArray0[1] = (double) (byte)8;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)8;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte)8;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (byte)8, 864.3437);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2681), Integer.MAX_VALUE);
      ArrayUtils.lastIndexOf(booleanArray1, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '(';
      charArray0[2] = '\'';
      charArray0[3] = 'D';
      charArray0[4] = 't';
      charArray0[5] = 'X';
      charArray0[6] = 'V';
      charArray0[7] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'8', '(', '\'', 'D', 't', 'X', 'V', 'e'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      ArrayUtils.subarray(floatArray0, (-1), (-1));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      ArrayUtils.indexOf(longArray0, 111L, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      ArrayUtils.indexOf(byteArray0, (byte)48, (int) (byte)0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1L);
      objectArray0[7] = (Object) 1.0F;
      Object object1 = new Object();
      ArrayUtils.indexOf(objectArray0, object1);
      ArrayUtils.isEmpty(longArray0);
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)48);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1654.4294F);
      floatArray0[1] = (-2655.4084F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[4] = false;
      booleanArray0[7] = true;
      ArrayUtils.indexOf(booleanArray0, false);
      ArrayUtils.toPrimitive((Character[]) null);
      ArrayUtils.reverse((Object[]) floatArray1);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[0];
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      ArrayUtils.removeElement(byteArray0, (byte)30);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)73;
      doubleArray0[1] = 717.4782377025;
      ArrayUtils.lastIndexOf(doubleArray0, (-650.8169291), 6);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 717.4782377025;
      objectArray0[1] = (Object) 73.0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) 717.4782377025;
      ArrayUtils.remove(objectArray0, (int) (byte)0);
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 264.9;
      doubleArray0[1] = 2955.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2221.439652748);
      doubleArray0[4] = (-1579.76455353);
      doubleArray0[5] = (-170.101326561);
      doubleArray0[6] = 1362.191487487;
      ArrayUtils.contains(doubleArray0, 1.0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.contains(booleanArray0, false);
      Object object0 = new Object();
      ArrayUtils.contains((Object[]) null, object0);
      long[] longArray0 = new long[0];
      ArrayUtils.isEmpty(longArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 'z';
      charArray0[2] = '[';
      charArray0[3] = 'k';
      charArray0[4] = ';';
      charArray0[5] = 'i';
      charArray0[6] = 'R';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 79);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 7
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      ArrayUtils.indexOf(longArray0, 111L, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)48, (int) (byte)0);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1L);
      objectArray0[7] = (Object) 1.0F;
      Object object1 = new Object();
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)30;
      ArrayUtils.removeElement(byteArray0, (byte)30);
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)73;
      byteArray1[1] = (Byte) (byte) (-84);
      byteArray1[2] = (Byte) (byte)30;
      byteArray1[3] = (Byte) (byte)30;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)73;
      byteArray1[7] = (Byte) (byte)0;
      ArrayUtils.toPrimitive(byteArray1);
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte)0, (-396));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 1766;
      intArray0[3] = 387;
      intArray0[4] = (-780);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      int[] intArray1 = ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), 387, 1766, 0, 1515}, intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), 387, 1766, 0, 1515}, intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1515;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1496);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2799;
      short short0 = (short) (-4074);
      shortArray0[1] = (short) (-4074);
      short short1 = (short) (-1980);
      shortArray0[2] = (short) (-1980);
      short short2 = (short) (-990);
      shortArray0[3] = (short) (-990);
      short short3 = (short) (-836);
      ArrayUtils.contains(shortArray0, (short) (-836));
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, (-2044), 70);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-836));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -836, Length: 4
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2222;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2740;
      shortArray0[4] = (short)0;
      ArrayUtils.clone(shortArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2222;
      intArray0[1] = 0;
      intArray0[2] = (-2143540087);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2146924115));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-2443L);
      longArray0[2] = (-2443L);
      ArrayUtils.subarray(longArray0, 0, 0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2443L);
      Object object0 = new Object();
      objectArray0[2] = object0;
      ArrayUtils.indexOf(objectArray0, (Object) "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, objectArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      ArrayUtils.indexOf(objectArray0, (Object) "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ArrayUtils.subarray(byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, objectArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)30;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)30);
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)73;
      byteArray2[1] = (Byte) (byte) (-84);
      byteArray2[2] = (Byte) (byte)30;
      byteArray2[3] = (Byte) (byte)30;
      byteArray2[4] = (Byte) (byte)0;
      byteArray2[5] = (Byte) (byte)0;
      byteArray2[6] = (Byte) (byte)73;
      byteArray2[7] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-84), (byte)30, (byte)30, (byte)0, (byte)0, (byte)73, (byte)0}, byteArray3);
      
      byte[] byteArray4 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte)73, (byte)30, (byte)0, (byte) (-84), (byte)73}, byteArray4);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-366));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1654.4294F);
      floatArray0[1] = (-2655.4084F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = ArrayUtils.reverse((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isEmpty(byteArray0);
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(3364L);
      Long.divideUnsigned(3364L, 1303L);
      longArray0[0] = long0;
      Long.getLong("");
      Long long1 = new Long((-1511L));
      longArray0[1] = long1;
      ArrayUtils.toPrimitive(longArray0);
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1592;
      shortArray0[4] = (short) (-3675);
      shortArray0[5] = (short)864;
      shortArray0[6] = (short)2670;
      shortArray0[7] = (short)37;
      shortArray0[8] = (short)52;
      ArrayUtils.indexOf(shortArray0, (short)0, (int) (short) (-3675));
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'k';
      charArray0[2] = '[';
      charArray0[3] = '\"';
      charArray0[4] = 'J';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 1766;
      intArray0[3] = 387;
      intArray0[4] = (-780);
      intArray0[0] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      int[] intArray1 = ArrayUtils.reverse(intArray0);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)21);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertEquals(18, intArray2.length);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), 387, 1766, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.indexOf(intArray0, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      ArrayUtils.lastIndexOf(booleanArray0, true, 996);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 5);
      ArrayUtils.lastIndexOf(booleanArray1, true, 5);
      ArrayUtils.isSameLength(floatArray1, floatArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2899.90611082466;
      ArrayUtils.indexOf(doubleArray0, (double) 0.0F, (double) 4);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.clone(intArray0);
      char[] charArray2 = ArrayUtils.reverse(charArray1);
      assertSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1654.4294F);
      floatArray0[1] = (-2655.4084F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      
      ArrayUtils.toPrimitive((Character[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) floatArray1, (Object[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 1209L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1209L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(5, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertArrayEquals(new double[] {5.0, 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = (float) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      char[] charArray0 = new char[6];
      charArray0[1] = 'U';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'U';
      ArrayUtils.reverse(longArray0);
      boolean boolean2 = ArrayUtils.contains(charArray0, '8');
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.removeElement(shortArray0, (short)1);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      byteArray0[2] = byte4;
      Byte.toUnsignedLong((byte) (-1));
      Byte byte5 = new Byte((byte)0);
      byteArray0[3] = (Byte) byte3;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) byte3;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) byte3;
      floatArray0[4] = (float) 255L;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) byte0;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) (short)1;
      floatArray1[1] = (float) (short)1;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[1] = boolean1;
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 113.0);
      assertArrayEquals(new double[] {113.0}, doubleArray1, 0.01);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[11];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 1766;
      intArray0[3] = 387;
      intArray0[4] = (-780);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[1] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '4';
      charArray0[2] = '';
      int int0 = ArrayUtils.indexOf(charArray0, '', 2076);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1909);
      intArray0[2] = 407;
      intArray0[3] = 0;
      ArrayUtils.indexOf(intArray0, 407);
      Boolean[] booleanArray0 = new Boolean[10];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("WNo4SBm");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("WNo4SBm");
      Boolean.logicalXor(false, true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean2);
      booleanArray0[4] = boolean4;
      ArrayUtils.toPrimitive(booleanArray0, true);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1909);
      intArray0[2] = 407;
      intArray0[3] = 0;
      ArrayUtils.indexOf(intArray0, 407);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = new Boolean("WNo4SBm");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("WNo4SBm");
      Boolean.logicalXor(false, (boolean) boolean0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean2);
      booleanArray0[4] = boolean4;
      ArrayUtils.toPrimitive(booleanArray0, true);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.subarray((long[]) null, 1907, (-114));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[2] = 1907;
      intArray0[3] = (-114);
      intArray0[4] = (-114);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {83, 83, 1907, (-114), (-114), 83, 83, 1907, (-114), (-114)}, intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1231.0F;
      floatArray0[1] = (float) 83;
      floatArray0[2] = (float) 1907;
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (float) (-114);
      floatArray0[5] = (float) 1907;
      floatArray0[6] = (float) (-114);
      float[] floatArray1 = ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-114.0F), 1907.0F, (-114.0F), 97.0F, 1907.0F, 83.0F, 1231.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-114.0F), 1907.0F, (-114.0F), 97.0F, 1907.0F, 83.0F, 1231.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.lastIndexOf(booleanArray0, true, 996);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 3);
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 3);
      assertEquals(3, int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 2899.90611082466;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 0.0F, (double) 3);
      assertEquals(1, int2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.clone(objectArray0);
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 1766;
      intArray0[3] = 387;
      intArray0[4] = (-780);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), 387, 1766, 0, 1515}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 387, 2469);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-2443L);
      longArray0[2] = (-4289L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2443L);
      objectArray0[1] = (Object) (-4289L);
      Object object0 = new Object();
      objectArray0[2] = object0;
      ArrayUtils.indexOf(objectArray0, (Object) "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ArrayUtils.subarray(byteArray0, 0, 0);
      ArrayUtils.isSameType(object0, objectArray0[1]);
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('U');
      characterArray0[1] = character0;
      char char0 = 'y';
      Character character1 = new Character('y');
      characterArray0[2] = character1;
      characterArray0[3] = (Character) char0;
      char char1 = 'w';
      Character character2 = new Character('w');
      characterArray0[4] = character2;
      Character character3 = new Character(char0);
      characterArray0[5] = character3;
      Character character4 = Character.valueOf(char1);
      characterArray0[6] = character4;
      Character character5 = new Character('F');
      characterArray0[7] = character5;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 1766;
      intArray0[3] = (-84);
      intArray0[4] = (-780);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), (-84), 1766, 0, 1515}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1165.26539));
      ArrayUtils.clone((int[]) null);
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-310.65954477455), 4418.851039500252);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1.5;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'x';
      charArray0[2] = '+';
      charArray0[3] = 'T';
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean3 == boolean2);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'T');
      assertEquals(0, int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'T', 'x', '+', 'T', 'T', 'x', '+', 'T'}, charArray1);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1303L;
      longArray0[1] = 925L;
      longArray0[2] = (-4470L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      int int0 = 0;
      ArrayUtils.subarray((Object[]) null, 0, 0);
      ArrayUtils.subarray((Object[]) null, 0, 0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      Integer.getInteger("", integer2);
      Integer integer3 = new Integer(0);
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[3] = integer4;
      Integer integer5 = Integer.valueOf(97);
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((-2124878556));
      integerArray0[5] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 97, (-2124878556)}, intArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = '5';
      charArray0[2] = 'a';
      charArray0[3] = 'P';
      charArray0[4] = 'c';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'p');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-79);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte) (-93);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-93), (double) (byte)1);
      assertEquals(2, int1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-93.0));
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = (float) (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 553);
      assertEquals(1, int2);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '!';
      charArray0[3] = '6';
      charArray0[4] = '!';
      charArray0[5] = 'r';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'x';
      charArray0[2] = 'b';
      charArray0[3] = '~';
      charArray0[4] = 'd';
      charArray0[5] = 'T';
      charArray0[6] = 'J';
      charArray0[7] = ';';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertArrayEquals(new char[] {'x', 'b', '~', 'd', 'T', 'J', ';'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-2711L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'd';
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[2] = 1766;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, 0, 0, 1766, 0, 1515}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 2469;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1766;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ArrayUtils.indexOf(objectArray0, object1, 9);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.indexOf(doubleArray0, (double) (-1), 6, (double) 6);
      long[] longArray0 = new long[0];
      ArrayUtils.toObject(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(4, objectArray1.length);
      
      ArrayUtils.isEmpty((double[]) null);
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-3403), 2);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)98;
      Byte byte1 = new Byte((byte)98);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)35);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)35, (byte)98}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-99.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-99.0), 1, (double) 1);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)3);
      assertTrue(int1 == int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) 1.0F;
      objectArray0[2] = (Object) 1.0F;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1), 2593);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1654.4294F);
      floatArray0[1] = (-2655.4084F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      
      ArrayUtils.toPrimitive((Character[]) null);
      Integer integer0 = new Integer((-1));
      ArrayUtils.removeElement((Object[]) null, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayUtils.toPrimitive((Integer[]) null, 802);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-76);
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (byte)89);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 7
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1381L);
      longArray0[1] = 3131L;
      longArray0[2] = (-2084L);
      longArray0[3] = 1247L;
      longArray0[4] = 0L;
      longArray0[5] = (-1128L);
      longArray0[6] = 0L;
      longArray0[7] = 636L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'q';
      charArray0[2] = 'v';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1388;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-21), (-2298));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) (-21));
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'g';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte) (-41));
      Byte byte2 = new Byte((byte)0);
      Byte byte3 = new Byte((byte)0);
      Byte byte4 = new Byte((byte)67);
      Byte byte5 = new Byte((byte) (-100));
      Object[] objectArray0 = ArrayUtils.reverse((Object[]) longArray1);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.indexOf(booleanArray0, false, 0);
      ArrayUtils.contains((float[]) null, 355.33F);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.subarray(longArray0, (-1), (-2878));
      ArrayUtils.contains(byteArray1, (byte)120);
      ArrayUtils.removeElement((Object[]) integerArray0, (Object) "', has a length less than 2");
      ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0L);
      doubleArray0[1] = double1;
      Double double2 = new Double(355.33F);
      doubleArray0[2] = double2;
      Double double3 = new Double(0L);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[5] = double5;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 2194L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-1002L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      ArrayUtils.clone(longArray0);
      char[] charArray0 = ArrayUtils.add((char[]) null, 'a');
      assertArrayEquals(new char[] {'a'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(true);
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'a';
      intArray0[1] = (int) 'a';
      intArray0[2] = (int) 'a';
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray2, 1);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-495.65);
      doubleArray0[4] = (double) 97;
      doubleArray0[5] = (double) 97;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2127));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte)0;
      ArrayUtils.toObject(floatArray0);
      ArrayUtils.clone((Object[]) byteArray1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      ArrayUtils.add(shortArray0, (short) (-1));
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1200.783F);
      floatArray0[2] = (-2376.4192F);
      floatArray0[3] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-2376.4192F), 1);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int1 = ArrayUtils.indexOf(charArray0, 'G', 0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)70);
      int int3 = ArrayUtils.lastIndexOf(charArray0, '|');
      assertTrue(int3 == int2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) 0;
      longArray0[2] = 1L;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) '{';
      longArray0[5] = (long) '|';
      longArray0[6] = (long) 1;
      int int4 = ArrayUtils.indexOf(longArray0, (-3766L), (-1));
      assertTrue(int4 == int2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      ArrayUtils.subarray(floatArray0, 2, 2);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = 0L;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[4] = (long) 2;
      ArrayUtils.indexOf(longArray0, 111L, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte)0);
      ArrayUtils.clone(floatArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 2L;
      objectArray0[3] = (Object) 2L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 2L;
      objectArray0[6] = (Object) 2L;
      objectArray0[7] = (Object) 1.0F;
      Object object1 = new Object();
      ArrayUtils.indexOf(objectArray0, object1);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'q';
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'q', 'b'}, charArray1);
      
      ArrayUtils.reverse((double[]) null);
      int int0 = ArrayUtils.indexOf((double[]) null, (-2385.5290956), 0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (-1), 0, 1.0);
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (-2385.5290956), 1286);
      assertTrue(int2 == int1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int3 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      float[] floatArray0 = new float[0];
      ArrayUtils.clone(floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'b';
      doubleArray0[1] = (double) 'q';
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) (short) (-1);
      int int4 = ArrayUtils.lastIndexOf(doubleArray0, 1629.85, 0.0);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'q';
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'q', 'b'}, charArray1);
      
      ArrayUtils.reverse((double[]) null);
      ArrayUtils.indexOf((double[]) null, (-2385.5290956), 0);
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-1), 0, 1.0);
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (-2385.5290956), 1286);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.lastIndexOf(shortArray0, (short)0);
      float[] floatArray0 = new float[0];
      ArrayUtils.clone(floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'b';
      doubleArray0[1] = (double) 'q';
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) (short) (-1);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1629.85, 0.0);
      assertTrue(int2 == int1);
      
      int int3 = ArrayUtils.lastIndexOf((byte[]) null, (byte)23, (int) (short) (-1));
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)48, (int) (byte)0);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-1);
      objectArray0[4] = (Object) (-1);
      objectArray0[5] = (Object) (-1);
      objectArray0[6] = (Object) (-1);
      objectArray0[7] = (Object) 0.0F;
      Object object1 = new Object();
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)48;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 387;
      intArray0[4] = (-780);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), 387, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.indexOf(charArray0, '6');
      char[] charArray1 = new char[8];
      charArray1[0] = '6';
      charArray1[1] = '6';
      charArray1[2] = '6';
      charArray1[3] = '6';
      charArray1[4] = '6';
      charArray1[5] = '6';
      charArray1[6] = '6';
      charArray1[7] = '6';
      int int0 = ArrayUtils.indexOf(charArray1, '6', 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      ArrayUtils.indexOf(longArray0, 111L, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte)0);
      assertEquals(1, int0);
      
      ArrayUtils.clone(floatArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1L);
      objectArray0[7] = (Object) 0.0F;
      Object object1 = new Object();
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-1);
      int int2 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)0);
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      
      ArrayUtils.clone((Object[]) byteArray1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.toObject(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1388;
      ArrayUtils.lastIndexOf(intArray0, (-21), (-2298));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) (-21));
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'g';
      ArrayUtils.toObject(charArray0);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte) (-41));
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)0);
      byteArray0[3] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[4] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte)67);
      byteArray0[6] = byte6;
      Byte byte7 = new Byte((byte) (-100));
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1.0));
      floatArray0[0] = float0;
      Float float1 = new Float((-880.0F));
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-880.0F), 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (float)floatArray0[2];
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = 18.8801326751709;
      doubleArray0[3] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) (float)floatArray0[2];
      doubleArray0[6] = (double) (float)floatArray0[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-880.0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(3364L);
      longArray0[0] = long0;
      Long.getLong("");
      Long long1 = new Long((-1511L));
      Long.compareUnsigned((-281L), 0L);
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3364L, (-1511L)}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3885;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1592;
      shortArray0[4] = (short) (-3675);
      shortArray0[5] = (short)864;
      shortArray0[6] = (short)2644;
      shortArray0[7] = (short)37;
      shortArray0[8] = (short)52;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (short) (-3675));
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'Z', (int) (short) (-3675));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      Character[] characterArray0 = new Character[9];
      char char0 = '3';
      Character character0 = Character.valueOf('3');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('3');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('3');
      characterArray0[2] = character2;
      Character character3 = new Character('}');
      characterArray0[3] = character3;
      char char1 = 'E';
      Character character4 = new Character('E');
      characterArray0[4] = character4;
      Character character5 = new Character('!');
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char0);
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      characterArray0[7] = character7;
      Character character8 = Character.valueOf(char1);
      characterArray0[8] = character8;
      Character.isAlphabetic(1);
      ArrayUtils.toPrimitive(characterArray0, '7');
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 2194L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-1002L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      ArrayUtils.clone(longArray0);
      char[] charArray0 = ArrayUtils.add((char[]) null, 'a');
      assertArrayEquals(new char[] {'a'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(true);
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'a';
      intArray0[1] = (int) 'a';
      intArray0[2] = (int) 'a';
      intArray0[3] = 97;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 97);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray2, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)1044);
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-327));
      shortArray0[1] = short1;
      short short2 = (short)1;
      Short short3 = new Short((short)1);
      shortArray0[2] = short3;
      Short short4 = new Short((short)1);
      Short.toUnsignedInt((short)0);
      shortArray0[3] = short4;
      Short short5 = new Short((short)0);
      shortArray0[4] = short5;
      Short.toUnsignedLong((short)837);
      Short short6 = new Short((short) (-1));
      shortArray0[5] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertArrayEquals(new short[] {(short)1044, (short) (-327), (short)1, (short)1, (short)0, (short) (-1)}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)837);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) short2;
      Short.toUnsignedLong((short)0);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) short2;
      intArray0[3] = (int) short2;
      intArray0[4] = (int) (short)shortArray0[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) shortArray0[0]);
      assertArrayEquals(new int[] {1, 0, 1, 1}, intArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1403), (-1403));
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '@');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ArrayUtils.isEmpty(objectArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[7] = 1766;
      intArray0[3] = 1515;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 387, (-2145658542));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[1] = boolean1;
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray0, 113.0);
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      boolean boolean3 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[1] = boolean1;
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(3364L);
      longArray0[0] = long0;
      Long.getLong("");
      Long long1 = new Long((-1511L));
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3364L, (-1511L)}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3885;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1592;
      shortArray0[4] = (short) (-3675);
      shortArray0[5] = (short)864;
      shortArray0[6] = (short)2656;
      shortArray0[7] = (short)37;
      shortArray0[8] = (short)52;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (short) (-3675));
      assertEquals(1, int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) longArray0);
      boolean boolean2 = ArrayUtils.contains(longArray1, (long) (short) (-3675));
      assertArrayEquals(new long[] {3364L, (-1511L)}, longArray1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-34);
      intArray0[1] = (-1909);
      intArray0[2] = 407;
      intArray0[3] = 0;
      ArrayUtils.indexOf(intArray0, 407);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("WNo4SBm");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("WNo4SBm");
      Boolean.logicalXor(false, true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean2);
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.subarray(booleanArray1, 2146962779, 2);
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte) (-1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayUtils.isEmpty((float[]) null);
      ArrayUtils.clone((float[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = 139L;
      longArray0[2] = 1364L;
      longArray0[3] = (-2017L);
      longArray0[4] = 1492L;
      longArray0[5] = 732L;
      longArray0[6] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2916;
      shortArray0[2] = (short)172;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)172);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.getLength((Object) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.remove(longArray0, 0);
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0L);
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("H`C,Da");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayUtils.removeElement((short[]) null, (short) (-1111));
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = '!';
      ArrayUtils.reverse(charArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-1));
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'!', ';'}, charArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)38;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 441);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) "P`4*");
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '');
      Object[] objectArray2 = ArrayUtils.removeElement(objectArray1, object0);
      assertEquals(3, objectArray2.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '';
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) '';
      doubleArray0[3] = 7.62;
      doubleArray0[4] = 1.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2243, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)44;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)44);
      assertEquals(6, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '4';
      charArray0[2] = 'k';
      char[] charArray1 = ArrayUtils.add(charArray0, 'k');
      assertArrayEquals(new char[] {'\"', '4', 'k', 'k'}, charArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((byte) (-1));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte) (-114);
      shortArray0[2] = (short) (byte)44;
      shortArray0[3] = (short) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-114), 441);
      assertEquals(1, int1);
      
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (short) (-1));
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1893L);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, 109L, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte)0);
      assertEquals(1, int1);
      
      ArrayUtils.clone(floatArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) (-1893L);
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1L);
      objectArray0[7] = (Object) 1.0F;
      Object object1 = new Object();
      int int2 = ArrayUtils.indexOf(objectArray0, object1);
      assertTrue(int2 == int0);
      
      ArrayUtils.clone(longArray0);
      int int3 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = 56644;
      ArrayUtils.indexOf(booleanArray0, true, 56644);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 56644;
      ArrayUtils.toObject(floatArray0);
      short short0 = (short)86;
      ArrayUtils.removeElement((short[]) null, (short)86);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[1] = booleanArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)1;
      ArrayUtils.contains(shortArray0, (short) (byte)0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexOf(doubleArray0, 172.661, (int) (byte)86, (-2939.47805));
      ArrayUtils.indexOf((boolean[]) null, false, (-2887));
      int[] intArray0 = new int[0];
      ArrayUtils.add(intArray0, 1361);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)32;
      ArrayUtils.subarray(longArray0, (int) (byte)86, (int) (byte)32);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)32;
      Object[] objectArray1 = ArrayUtils.reverse(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 0L);
      Float.min(0, 0);
      floatArray0[0] = float0;
      Float float1 = new Float((double) 0L);
      Float.isFinite((-1.0F));
      Float.min(0L, 0L);
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.indexOf(floatArray1, 1.0F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2216);
      shortArray0[1] = (short)0;
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short) (-2216);
      shortArray1[1] = (short) (-2216);
      shortArray1[2] = (short) (-1468);
      shortArray1[3] = (short) (-1);
      shortArray1[4] = (short) (-2216);
      shortArray1[5] = (short) (-2216);
      shortArray1[6] = (short) (-2216);
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertEquals(9, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-2216), (short)0, (short) (-2216), (short) (-2216), (short) (-1468), (short) (-1), (short) (-2216), (short) (-2216), (short) (-2216)}, shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'q';
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      ArrayUtils.reverse((double[]) null);
      ArrayUtils.indexOf((double[]) null, (-2385.5290956), 0);
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-1), 0, 1.0);
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (-2385.5290956), 1286);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertTrue(int2 == int1);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.clone(floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'b';
      doubleArray0[1] = (double) 'q';
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) (short) (-1);
      int int3 = ArrayUtils.lastIndexOf(doubleArray0, 1629.85, 0.0);
      assertTrue(int3 == int0);
      
      int int4 = ArrayUtils.indexOf(charArray1, '/', (-1));
      assertArrayEquals(new char[] {'q', 'b'}, charArray1);
      assertEquals((-1), int4);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 715);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1654.4294F);
      floatArray0[1] = (-2655.4084F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      ArrayUtils.toObject(floatArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.indexOf(booleanArray0, false);
      ArrayUtils.contains(booleanArray0, false);
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3762.0F;
      floatArray0[1] = (-398.7F);
      floatArray0[2] = 1.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4511;
      shortArray0[1] = (short) (-876);
      shortArray0[2] = (short) (-217);
      shortArray0[3] = (short)20971;
      shortArray0[4] = (short) (-2836);
      shortArray0[5] = (short)2145;
      shortArray0[6] = (short) (-932);
      shortArray0[7] = (short) (-620);
      shortArray0[8] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)564, (int) (short)20971);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("~DcPoXdI&&B=@?<L");
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 113.0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-46);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isEmpty(byteArray0);
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      Long[] longArray0 = new Long[2];
      Long.getLong("");
      Long long0 = new Long((-1511L));
      longArray0[1] = long0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-198);
      intArray0[1] = 1;
      intArray0[2] = (-267);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = (-198);
      intArray1[2] = (-3485);
      intArray1[3] = (-257);
      intArray1[4] = (-267);
      intArray1[5] = 1;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertArrayEquals(new int[] {(-198), 1, (-267), 0, (-198), (-3485), (-257), (-267), 1}, intArray2);
      assertEquals(9, intArray2.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'A';
      ArrayUtils.isSameLength(charArray0, charArray0);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-3485), (-198));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3515;
      shortArray0[1] = (short) (-2);
      shortArray0[2] = (short) (-624);
      shortArray0[3] = (short)32282;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)52;
      shortArray0[6] = (short) (-837);
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short)1;
      shortArray1[1] = (short) (-837);
      shortArray1[2] = (short)52;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'a';
      charArray0[2] = '%';
      charArray0[3] = 'y';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      boolean boolean1 = ArrayUtils.contains((long[]) null, 2934L);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'y';
      doubleArray0[1] = (double) 'S';
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) 2934L;
      doubleArray0[4] = (double) 'y';
      doubleArray0[5] = (double) 'a';
      doubleArray0[6] = (double) 2934L;
      doubleArray0[7] = (double) 2934L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1625, 1625);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object8);
      assertEquals(9, objectArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1124;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, (-1));
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1124;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1124.0, (-583), 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer integer0 = new Integer((-450));
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) (-450);
      doubleArray0[1] = (double) (-450);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-450);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-450);
      doubleArray0[7] = (double) (-450);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-450.0));
      assertEquals(0, int1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.clone(booleanArray0);
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 0);
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-450));
      floatArray0[1] = float1;
      Float float2 = new Float(1811.7288F);
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-450.0F), 1811.7288F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-744.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-744.0F), (-1.0F), 0.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-744.0F);
      ArrayUtils.indexOf(doubleArray0, (-1649.62940222), 3219);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 263L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'Y';
      charArray0[2] = '+';
      charArray0[3] = 'k';
      charArray0[4] = '9';
      charArray0[5] = '9';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^');
      assertEquals((-1), int0);
      
      ArrayUtils.clone(booleanArray0);
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(3, booleanArray2.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) 'k';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'k';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {107.0, 89.0, 0.0, 107.0, 57.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 'G';
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) 'G';
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) false;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '&';
      charArray0[3] = 'y';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'C';
      objectArray0[1] = (Object) '&';
      objectArray0[2] = (Object) 'C';
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) null);
      assertEquals(3, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object[] objectArray1 = ArrayUtils.reverse(objectArray0);
      assertSame(objectArray1, objectArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2098);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1L));
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      longArray0[1] = long1;
      Long long2 = new Long((-1L));
      longArray0[2] = long2;
      Long long3 = new Long((-1L));
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayUtils.subarray((char[]) null, 0, 0);
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1185);
      shortArray0[1] = (short) (-3936);
      ArrayUtils.contains(shortArray0, (short) (-3936));
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short) (-3936));
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-3936);
      intArray0[2] = (int) (short) (-3936);
      intArray0[3] = 211;
      intArray0[4] = 0;
      ArrayUtils.indexOf(intArray0, 211);
      ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (short) (-1185));
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)5, (-1));
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, '(');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      ArrayUtils.removeElement(byteArray0, (byte)127);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)7;
      ArrayUtils.isSameLength(intArray0, intArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      ArrayUtils.clone(charArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)127;
      shortArray0[1] = (short) (byte)7;
      shortArray0[2] = (short) (byte)127;
      shortArray0[3] = (short) (byte)127;
      shortArray0[4] = (short) (byte)127;
      shortArray0[5] = (short) (byte)7;
      shortArray0[6] = (short) (-597);
      ArrayUtils.indexOf(shortArray0, (short) (byte)0, 2145653625);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-79);
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-93), (double) (byte)1);
      assertTrue(int1 == int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = (float) (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 553);
      assertEquals(1, int2);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = '!';
      charArray0[3] = '6';
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = ']';
      charArray0[2] = 'd';
      charArray0[3] = 'F';
      charArray0[4] = 'K';
      charArray0[5] = 'b';
      charArray0[6] = '1';
      charArray0[7] = 'P';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(8, characterArray0.length);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ']';
      intArray0[1] = (int) '1';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) 'b';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1485, 2255);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayUtils.removeElement((boolean[]) null, true);
      long[] longArray0 = new long[6];
      longArray0[0] = (-2470L);
      longArray0[1] = (-100L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1898L;
      longArray0[5] = 0L;
      ArrayUtils.lastIndexOf(longArray0, 35L, 968);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, object0);
      Object object1 = new Object();
      ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 0L);
      ArrayUtils.reverse((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2470L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      ArrayUtils.toObject(doubleArray0);
      ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, 1.0F, 968);
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '?';
      charArray0[2] = '}';
      charArray0[3] = 't';
      charArray0[4] = 'x';
      int int0 = ArrayUtils.indexOf(charArray0, 't');
      assertEquals(3, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 'x';
      int int1 = ArrayUtils.indexOf(floatArray0, 3231.51F);
      assertEquals((-1), int1);
      
      char[] charArray1 = new char[7];
      charArray1[0] = 'x';
      charArray1[1] = '}';
      charArray1[2] = '}';
      charArray1[3] = 'i';
      charArray1[4] = '?';
      charArray1[5] = 'i';
      charArray1[6] = '?';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'?', 'i', '?', 'i', '}', '}', 'x'}, charArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      byteArray0[0] = byte1;
      byte byte2 = (byte)15;
      Byte byte3 = new Byte((byte)15);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-122));
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)89);
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)15);
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte2);
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte2);
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte0);
      byteArray0[7] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)15, (byte) (-122), (byte)89, (byte)15, (byte)15, (byte)15, (byte)5}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object4, 1);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-2749);
      intArray0[2] = (-1);
      intArray0[3] = 893;
      intArray0[4] = 1;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {1, (-2749), (-1), 893, 1, 1, (-2749), (-1), 893, 1}, intArray1);
      
      ArrayUtils.reverse(longArray0);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = Boolean.TRUE;
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean(false);
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean("zp]q,7)%*c0'>-W0");
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      booleanArray0[3] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1889;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-746);
      shortArray0[4] = (short)2093;
      shortArray0[5] = (short)969;
      boolean boolean5 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayUtils.removeElement((boolean[]) null, true);
      long[] longArray0 = new long[6];
      longArray0[0] = (-2470L);
      longArray0[1] = (-100L);
      long long0 = 0L;
      longArray0[2] = 0L;
      long long1 = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1898L;
      longArray0[5] = 0L;
      int int0 = 968;
      ArrayUtils.lastIndexOf(longArray0, 35L, 968);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, object0);
      Object object1 = new Object();
      ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 0L);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, object1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 3508L;
      longArray0[2] = 1912L;
      longArray0[3] = 4368L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1912L;
      doubleArray0[1] = (double) 1912L;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 3508L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2210.8923), 1, (double) 1912L);
      int int1 = ArrayUtils.indexOf(longArray0, 0L, 1);
      int int2 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertTrue(int2 == int1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 4368L;
      floatArray0[5] = (float) 4368L;
      floatArray0[6] = (float) 1L;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 5;
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (-149.0F), 1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2088L;
      longArray0[1] = (-3027L);
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-3027L), (-2132));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3027L);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2088L, 0.0);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(1, int1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '6';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-586);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 671;
      intArray0[5] = (-2504);
      intArray0[6] = 2314;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 2314);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1562.152291411);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-5291.1);
      doubleArray0[4] = 519.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 519.0, 2897.578599);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, Integer.MAX_VALUE);
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'Y';
      charArray0[2] = '+';
      charArray0[3] = 'k';
      charArray0[4] = '9';
      charArray0[5] = '9';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '^');
      assertEquals((-1), int1);
      
      ArrayUtils.clone(booleanArray0);
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(3, booleanArray2.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) 'k';
      doubleArray0[2] = (double) '^';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'k';
      double[] doubleArray1 = ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {107.0, 89.0, 94.0, 107.0, 57.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 'G';
      objectArray0[2] = (Object) '+';
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) 'G';
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) 94.0;
      objectArray0[7] = (Object) false;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-2208);
      intArray0[3] = 0;
      intArray0[4] = 2664;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 2664;
      objectArray0[1] = (Object) 2664;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) (-2208);
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 2664;
      objectArray0[8] = (Object) 2664;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 956, 0);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 414;
      intArray0[1] = 1108;
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, 1108);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      int int1 = (-1787);
      Integer integer1 = new Integer((-1787));
      String string0 = "q}{a4@UFgiCQF%~";
      int int2 = (-204);
      Integer.compareUnsigned((-204), (-1));
      Integer.max(int0, int0);
      Integer.getInteger("q}{a4@UFgiCQF%~");
      integerArray0[1] = integer1;
      ArrayUtils.toPrimitive(integerArray0);
      long[] longArray0 = new long[0];
      int int3 = 1;
      ArrayUtils.lastIndexOf(longArray0, (long) (-1787), 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      try { 
        Integer.decode("ArrayUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ArrayUtils\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      ArrayUtils.lastIndexOf(doubleArray0, (-1679.7462352042), 0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {2.0, 2.0, (-1.0)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)25;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)22, (byte) (-9), (byte)0, (byte) (-54), (byte)0, (byte)1, (byte)25}, byteArray1);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)381);
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-9));
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-487));
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-54));
      assertArrayEquals(new short[] {(short)381, (short) (-9), (short) (-487)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 355.33F);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.subarray(longArray0, (-1), (-2878));
      boolean boolean1 = ArrayUtils.contains(byteArray1, (byte)120);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) integerArray0, (Object) "', has a length less than 2");
      assertNotNull(objectArray0);
      assertEquals(5, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals((-1), int1);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0L);
      doubleArray0[1] = double1;
      Double double2 = new Double(355.33F);
      doubleArray0[2] = double2;
      Double double3 = new Double(0L);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 355.3299865722656, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray0 = new Byte[8];
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.toObject(booleanArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      ArrayUtils.indexOf(longArray0, (-1L), 0);
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      byteArray0[5] = byte6;
      try { 
        Byte.valueOf("Wb96", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2701);
      intArray0[1] = 1304;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2 == boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (-2701);
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) null, objectArray0);
      assertNotNull(objectArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)163;
      shortArray0[3] = (short)2603;
      shortArray0[4] = (short) (-12);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2812, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (-45L);
      longArray0[2] = 3540L;
      longArray0[3] = 0L;
      longArray0[4] = 3762L;
      longArray0[5] = (-1L);
      longArray0[6] = 1L;
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertArrayEquals(new long[] {(-45L), 3540L, 0L, 3762L, (-1L), 1L, 0L}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1329;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-45L);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 3762L;
      floatArray0[4] = (float) 1L;
      int int0 = ArrayUtils.indexOf(floatArray0, 1773.868F, 0);
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.indexOf(intArray0, (-1737));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'r';
      charArray0[2] = '&';
      charArray0[3] = '!';
      charArray0[4] = '[';
      charArray0[5] = '2';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r', 1);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-107), (byte)53, (byte) (-79), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '`';
      charArray0[2] = '>';
      charArray0[3] = '^';
      charArray0[4] = ' ';
      charArray0[5] = '&';
      charArray0[6] = 'U';
      charArray0[7] = '(';
      charArray0[8] = 's';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 5);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 's';
      charArray0[2] = '/';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = '5';
      charArray0[6] = 'Z';
      charArray0[7] = 'w';
      charArray0[8] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'w');
      assertArrayEquals(new char[] {'&', 's', '/', '\'', '{', '5', 'Z', '4'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '#';
      charArray0[2] = '_';
      char char0 = 'J';
      charArray0[3] = 'J';
      charArray0[4] = '1';
      charArray0[5] = '`';
      int int0 = (-790);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-790));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -790, Length: 6
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.lastIndexOf(shortArray0, (short)0);
      Character[] characterArray0 = new Character[3];
      char char0 = 'Q';
      Character character0 = new Character('Q');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('Q');
      characterArray0[1] = character1;
      char char1 = '5';
      Character character2 = Character.valueOf('5');
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      ArrayUtils.lastIndexOf(shortArray0, (short)0, 4038);
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)0;
      // Undeclared exception!
      try { 
        Character.toChars((int) (short)0, charArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1077.6491698768166);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1396.2129657493292);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-1077.6491698768166), 0.0, 1.5, (-1.0), (-1396.2129657493292)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(4, objectArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 172.661;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 7868.692955;
      doubleArray0[7] = (-439.54948543);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 7868.692955);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      ArrayUtils.clone(byteArray0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true, true, true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)66;
      doubleArray0[1] = (double) (byte)83;
      doubleArray0[2] = (double) (byte)83;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)66;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {2.0, 1.0, 66.0, 1.0, 83.0, 83.0, 66.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2430;
      intArray0[2] = 2141;
      intArray0[3] = 0;
      intArray0[4] = 663;
      intArray0[5] = 1;
      intArray0[6] = (-2613);
      intArray0[7] = (-829);
      intArray0[8] = 0;
      ArrayUtils.indexOf(intArray0, 0);
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 213);
      assertEquals(8, int0);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 8;
      int int1 = ArrayUtils.indexOf(floatArray0, 8.0F, 213);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-109));
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)51}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (byte)51, (double) (byte)19);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 74.66F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      Object object0 = new Object();
      boolean boolean1 = ArrayUtils.contains((Object[]) null, object0);
      assertTrue(boolean1 == boolean0);
      
      Object object1 = new Object();
      ArrayUtils.indexOf((Object[]) null, object1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'C';
      charArray0[2] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-3464L);
      longArray0[3] = (-1323L);
      longArray0[4] = 0L;
      ArrayUtils.contains(longArray0, 0L);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-806));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -806, Length: 5
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1623.43047;
      doubleArray0[2] = 0.0;
      ArrayUtils.indexOf(doubleArray0, (-789.201023), 314);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'O';
      charArray0[2] = '@';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'n', 'O', '@'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'x';
      charArray0[4] = 'd';
      charArray0[5] = 'T';
      charArray0[6] = 'J';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', 'd', 'T', 'J', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'Y';
      charArray0[2] = '=';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertArrayEquals(new char[] {'Y', '='}, charArray1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-1750);
      intArray0[3] = 929;
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-646);
      shortArray0[1] = (short) (-453);
      shortArray0[2] = (short) (-3131);
      shortArray0[3] = (short)2482;
      shortArray0[4] = (short) (-2075);
      shortArray0[5] = (short) (-3664);
      shortArray0[6] = (short) (-2717);
      shortArray0[7] = (short) (-1474);
      shortArray0[8] = (short) (-1946);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-453), (int) (short) (-3664));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayUtils.toPrimitive((Double[]) null, 0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-4004);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 2376;
      int[] intArray1 = ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2376, (-1), 0, (-1), 2, (-4004)}, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertArrayEquals(new int[] {1}, intArray1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 0, (-698));
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object2, (-2101));
      assertEquals((-1), int0);
      
      ArrayUtils.addAll((double[]) null, (double[]) null);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = object4;
      objectArray2[1] = object3;
      objectArray2[2] = object6;
      objectArray2[3] = object4;
      objectArray2[4] = object3;
      Object[] objectArray3 = ArrayUtils.addAll(objectArray0, objectArray2);
      assertEquals(12, objectArray3.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2390.48698784);
      doubleArray0[4] = (-1178.61);
      doubleArray0[5] = (-1437.4260069697);
      doubleArray0[6] = 0.0;
      ArrayUtils.indexOf(doubleArray0, 1.0);
      ArrayUtils.toObject(doubleArray0);
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1));
      shortArray0[0] = short0;
      try { 
        Short.valueOf("", (int) (short) (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'M';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1167, 3566);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)0;
      ArrayUtils.add(shortArray0, (short)0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      ArrayUtils.lastIndexOf(floatArray0, 0.0F, (int) (short)0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)44;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)44);
      assertEquals(6, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '4';
      charArray0[2] = 'k';
      char[] charArray1 = ArrayUtils.add(charArray0, 'k');
      assertArrayEquals(new char[] {'\"', '4', 'k', 'k'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-114);
      longArray0[3] = (long) '4';
      longArray0[4] = (long) '4';
      longArray0[5] = (long) '\"';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte) (-1));
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(34L);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {34.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils.removeElement((double[]) null, 947.103205781);
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'P';
      charArray0[2] = 'l';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-718), 629);
      assertEquals(3, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexOf(doubleArray0, (double) (-718), (-718));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-3411);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      ArrayUtils.indexOf(intArray0, (-3411));
      ArrayUtils.clone((long[]) null);
      float[] floatArray0 = null;
      ArrayUtils.contains((float[]) null, 1.0F);
      ArrayUtils.indexOf(intArray0, 2);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 386);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 386, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = 452L;
      boolean boolean1 = ArrayUtils.contains(longArray0, 452L);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2578.657F;
      floatArray0[3] = 3552.5925F;
      floatArray0[4] = 166.2F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-1757));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayUtils.clone((byte[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2650.4531F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1398.3F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3594.1504F;
      floatArray0[5] = 3794.95F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1340.9952246199314;
      doubleArray0[4] = (-3900.7095432556116);
      doubleArray0[5] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 2, 0.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      byte byte1 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byte byte2 = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      ArrayUtils.clone(byteArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-128);
      doubleArray0[1] = (double) (byte)78;
      doubleArray0[2] = (double) (byte) (-128);
      doubleArray0[3] = (double) (byte) (-128);
      doubleArray0[4] = (double) (byte)78;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (byte) (-128));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -128, Length: 5
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2207.63);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2207.63), 0, (-17.0));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1093L), (-2298));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-5559);
      intArray0[1] = 1;
      intArray0[2] = 2029;
      intArray0[3] = (-1);
      intArray0[4] = 1;
      intArray0[5] = (-439);
      int[] intArray1 = new int[3];
      intArray1[0] = (-5559);
      intArray1[1] = (-1);
      intArray1[2] = 2029;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.isEmpty(floatArray0);
      ArrayUtils.toObject(floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2454.8);
      doubleArray0[1] = (-1428.01266);
      doubleArray0[2] = (-2700.66177);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4440.4301209551);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (-4440.4301209551));
      assertArrayEquals(new double[] {(-2454.8), (-1428.01266), (-2700.66177), 0.0, (-1.0)}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 4494L;
      longArray0[2] = (-1678L);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-491L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {0L, 4494L, (-1678L), 0L, 0L, (-491L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1598L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'U';
      charArray0[2] = ':';
      charArray0[3] = 'Y';
      charArray0[4] = 'C';
      charArray0[5] = 'R';
      charArray0[6] = 'y';
      charArray0[7] = '7';
      boolean boolean1 = ArrayUtils.contains(charArray0, '?');
      boolean boolean2 = ArrayUtils.contains(charArray0, '7');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(0.0F);
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      floatArray0[1] = float1;
      Float float2 = Float.valueOf((float) floatArray0[0]);
      floatArray0[2] = float2;
      Float float3 = new Float(3743.5285957096103);
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[2]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3743.5286F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) (float)floatArray0[0];
      doubleArray0[4] = (double) (float)floatArray0[3];
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-359));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 857L;
      longArray0[2] = (-1306L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      ArrayUtils.indexOf((byte[]) null, (byte) (-1), (int) (byte) (-1));
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-4374.542911005673), 0.0);
      float[] floatArray0 = new float[0];
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (-678.1F));
      assertTrue(int3 == int2);
      
      Float[] floatArray1 = new Float[6];
      Float float0 = new Float((double) 0);
      floatArray1[0] = float0;
      Float float1 = new Float(0.0);
      floatArray1[1] = float1;
      Float float2 = new Float(0.0F);
      floatArray1[2] = float2;
      Float float3 = new Float((double) (-1306L));
      floatArray1[3] = float3;
      Float float4 = new Float((-678.1F));
      floatArray1[4] = float4;
      Float float5 = new Float(1.0);
      floatArray1[5] = float5;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1306.0F), (-678.1F), 1.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertEquals(3, int0);
      
      ArrayUtils.clone(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1215);
      intArray0[1] = (-645);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      boolean boolean0 = ArrayUtils.contains(intArray1, 1065);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1215), (-645), 0, (-1215), (-645), 0}, intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-645);
      longArray0[1] = (long) (-1215);
      longArray0[2] = (long) 1065;
      longArray0[3] = (long) (-645);
      longArray0[4] = (long) (-645);
      longArray0[5] = (long) (-1215);
      longArray0[6] = (long) (-1215);
      longArray0[7] = (long) (-1215);
      longArray0[8] = (long) (-645);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1215));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int0);
      
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      ArrayUtils.clone(longArray1);
      ArrayUtils.isSameType("", "~ F(mLSt9X;L\u0001");
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-49);
      Byte byte1 = new Byte((byte) (-49));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-49));
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-49));
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte) (-49), (byte) (-49), (byte) (-49)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 650L;
      longArray0[1] = 149L;
      longArray0[2] = (-2711L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 4671L, 35);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(0.0F);
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0));
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      floatArray0[2] = float2;
      Float float3 = new Float(2514.8422);
      floatArray0[3] = float3;
      Float float4 = new Float((-2757.1F));
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[2]);
      floatArray0[5] = float5;
      Float float6 = Float.valueOf(452.3F);
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-270.53F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 2514.8423F, (-2757.1F), 0.0F, 452.3F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      long[] longArray1 = ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.addAll(longArray0, longArray0);
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-2));
      byteArray0[0] = byte0;
      byte byte1 = (byte)115;
      Byte byte2 = new Byte((byte)115);
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-12);
      Byte byte4 = new Byte((byte) (-12));
      byteArray0[2] = byte4;
      byte byte5 = (byte)45;
      Byte byte6 = new Byte((byte)45);
      byteArray0[3] = byte6;
      Byte byte7 = new Byte(byte1);
      byteArray0[4] = byte7;
      Byte byte8 = new Byte(byte3);
      byteArray0[5] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte5);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)115, (byte) (-12), (byte)45, (byte)115, (byte) (-12)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1335.6333403904);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1903.209803;
      doubleArray0[4] = 1952.726160831669;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1335.6333403904), (-3938));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-127);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-65), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((-3L));
      longArray0[0] = long0;
      Long long1 = new Long((-1449L));
      longArray0[1] = long1;
      Long long2 = new Long((-1449L));
      longArray0[2] = long2;
      long long3 = 0L;
      Long long4 = new Long(0L);
      longArray0[3] = long4;
      Long long5 = new Long((-111L));
      longArray0[4] = long5;
      Long long6 = new Long(long3);
      longArray0[5] = long6;
      Long.getLong("Uql1^%;vL/s%Dt");
      longArray0[6] = null;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-3L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3L), (-1449L), (-1449L), 0L, (-111L), 0L, (-3L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 838.110120828569;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1175.359658401;
      doubleArray0[3] = 2485.3014518;
      doubleArray0[4] = (-2880.79633);
      int int0 = ArrayUtils.indexOf(doubleArray0, 838.110120828569, 2243, (-3232.26));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      longArray0[1] = longArray0[0];
      Long long0 = new Long((-1449L));
      longArray0[2] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      longArray0[3] = long2;
      Long long3 = new Long((-111L));
      longArray0[4] = long3;
      Long long4 = new Long(long1);
      longArray0[5] = long4;
      Long.getLong("Uql1^%;vL/s%Dt");
      longArray0[6] = null;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-3L));
      assertArrayEquals(new long[] {(-3L), (-3L), (-1449L), 0L, (-111L), 0L, (-3L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 532L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      ArrayUtils.add(longArray0, (-1L));
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      byteArray0[0] = byte1;
      ArrayUtils.toPrimitive(byteArray0, byte0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = 'u';
      Character character0 = new Character('u');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('u');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      Character.isIdeographic(799);
      Character.isIdeographic(0);
      Character.lowSurrogate((-1724));
      Character.isSurrogate('L');
      characterArray0[2] = character2;
      Character.lowSurrogate(1);
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'f');
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) char0);
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\uDD44');
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'u', 'u', 'u'}, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, 1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray1));
      
      ArrayUtils.addAll((float[]) null, (float[]) null);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1130;
      shortArray0[1] = (short) (-2614);
      shortArray0[2] = (short) (-1145);
      shortArray0[3] = (short)1867;
      shortArray0[4] = (short)2042;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2958;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-449);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1130, (int) (short)2958);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      float[] floatArray0 = null;
      ArrayUtils.addAll((float[]) null, (float[]) null);
      Object object0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ArrayUtils.clone((boolean[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 560.5086F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-984.6F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1553.5776F);
      ArrayUtils.subarray(floatArray0, 1519, 0);
      ArrayUtils.isEmpty(floatArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 560.5086F;
      objectArray0[3] = (Object) 560.5086F;
      objectArray0[4] = (Object) (-1553.5776F);
      objectArray0[5] = (Object) 0.0F;
      objectArray0[6] = (Object) (-984.6F);
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) "g7K|%~@IC@7^");
      assertEquals(9, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1698.14816571;
      doubleArray0[1] = (-1133.3679);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-462.2);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2306.84169321163), 1.0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = 'W';
      charArray0[2] = 'm';
      charArray0[3] = 'a';
      charArray0[4] = '\'';
      charArray0[5] = '-';
      charArray0[6] = 'x';
      charArray0[7] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-656));
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1601.0876742845));
      assertArrayEquals(new double[] {(-1.0), (-1601.0876742845)}, doubleArray1, 0.01);
      
      ArrayUtils.subarray((char[]) null, 0, 0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2392);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-315);
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)0, (int) (short) (-315));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) booleanArray0, object0);
      assertNotNull(objectArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short)0);
      assertTrue(boolean0);
      assertEquals(14, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 1418, 1418);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1418;
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertArrayEquals(new double[] {(-1.0), 1418.0, (-1.0)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-87);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-20);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-20), 2);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray1));
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2966.287074688672);
      doubleArray0[0] = double0;
      Double double1 = new Double((-1142.44684151));
      doubleArray0[1] = double1;
      Double double2 = new Double(3204.1531932168);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double(2966.287074688672);
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2966.287074688672, (-1142.44684151), 3204.1531932168, 3204.1531932168, 2966.287074688672, 2966.287074688672}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3064.0323589;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2133.9);
      doubleArray0[3] = (-4640.1838545503);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-652.0);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.subarray(shortArray0, 0, (-1175));
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'U';
      charArray0[2] = 'k';
      charArray0[3] = 'Y';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1935), (-1688));
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)72);
      assertEquals(3, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)68;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte) (-121));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1934.9302962145);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      ArrayUtils.add(doubleArray0, (-652.714839));
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayUtils.subarray((char[]) null, 0, 0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1185);
      shortArray0[1] = (short) (-3936);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-3936));
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short) (-3936));
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-3936);
      intArray0[2] = (int) (short) (-3936);
      intArray0[3] = 620;
      intArray0[4] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 620);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1.0), (-1333));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-504);
      shortArray0[1] = (short) (-2859);
      shortArray0[2] = (short) (-2298);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-121);
      shortArray0[5] = (short)4;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2298));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1170;
      intArray0[1] = 3511;
      intArray0[2] = 2124638077;
      intArray0[3] = 1;
      intArray0[4] = 1;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-253));
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1866.755F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1866.755F), (-251));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte) (-111));
      assertEquals(1, int1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1559.9668F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1559.9668F);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1559.9668F;
      doubleArray0[1] = (double) 1559.9668F;
      doubleArray0[2] = (double) 1559.9668F;
      doubleArray0[3] = (double) 1559.9668F;
      doubleArray0[4] = (double) 1559.9668F;
      doubleArray0[5] = (double) 1559.9668F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray1.length);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-71), (int) (byte) (-71));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 1069);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1069, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1849;
      intArray0[1] = 617;
      intArray0[2] = (-3080);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-754L);
      longArray0[2] = 1349L;
      longArray0[3] = 1113L;
      long[] longArray1 = ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1113L, 1349L, (-754L), 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray1, booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(5, booleanArray3.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((-647.14111498));
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-647.14111498), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1163L;
      longArray0[1] = 73L;
      ArrayUtils.lastIndexOf(longArray0, 73L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {73L, 1163L}, longArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(false);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("zM3!CPsb2|hF,5N");
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-742.0F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-742.0F);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-742.0F);
      doubleArray0[3] = (double) (-742.0F);
      doubleArray0[4] = (double) (-742.0F);
      doubleArray0[5] = (double) (-742.0F);
      doubleArray0[6] = (double) (-742.0F);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(14, doubleArray1.length);
      
      float[] floatArray2 = ArrayUtils.remove(floatArray0, 0);
      assertEquals(0, floatArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1464));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1398.74F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertArrayEquals(new float[] {1398.74F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      ArrayUtils.reverse(intArray0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[1] = integer0;
      Integer.getInteger("", (Integer) int1);
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      ArrayUtils.toPrimitive(integerArray0, int0);
      long[] longArray0 = new long[0];
      Integer.remainderUnsigned(0, (-900));
      ArrayUtils.removeElement(longArray0, (long) int0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      Integer.sum(0, int0);
      // Undeclared exception!
      try { 
        Integer.divideUnsigned(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'X', 1231);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1231;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 1231;
      floatArray0[5] = (float) 'X';
      floatArray0[6] = (float) 1231;
      int int1 = ArrayUtils.indexOf(floatArray0, (-2105.557F));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)357;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2829;
      shortArray0[1] = (short)2249;
      shortArray0[2] = (short)1331;
      shortArray0[3] = (short) (-1374);
      shortArray0[4] = (short) (-4548);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-4067);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2829, (int) (short)1);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short) (-1374);
      objectArray0[2] = (Object) (short) (-1374);
      objectArray0[3] = (Object) (short)1;
      objectArray0[4] = (Object) (short) (-4548);
      Object object0 = new Object();
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, object0);
      assertEquals(5, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = '2';
      charArray0[3] = '@';
      charArray0[4] = 'A';
      charArray0[5] = 'K';
      charArray0[6] = '+';
      int int0 = ArrayUtils.indexOf(charArray0, '@', 0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1124);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-279);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-46);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-524);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)283;
      shortArray0[5] = (short)402;
      shortArray0[6] = (short) (-604);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1123, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true, true, false}, booleanArray1));
      assertEquals(10, booleanArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 1, 1);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = (-1720);
      ArrayUtils.indexOf((short[]) null, (short)0, (-1720));
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      ArrayUtils.removeElement(objectArray0, object6);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.toObject(booleanArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@3230c976', is neither of type Map.Entry nor an Array
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Integer integer0 = new Integer(0);
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) integer0);
      assertEquals(5, objectArray1.length);
      assertNotNull(objectArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2413.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 1156.575612;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ArrayUtils.contains((short[]) null, (short) (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.isEmpty(byteArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (byte)119;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = 0.0;
      ArrayUtils.lastIndexOf(doubleArray0, 119.0, 0);
      ArrayUtils.addAll((short[]) null, (short[]) null);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) byteArray1);
      assertNotNull(objectArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1)}, shortArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray1, (Object) "java.lang.Object");
      assertEquals(3, byteArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-1), (int) (short) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-322);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)59;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {']', 'T'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 623;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 557;
      intArray0[5] = (-1321);
      intArray0[6] = (-2411);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      int int0 = ArrayUtils.indexOf(intArray0, (-481), (-1321));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      Short short3 = new Short(short0);
      shortArray0[2] = short3;
      Short short4 = new Short((short)2);
      shortArray0[3] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.lastIndexOf(booleanArray0, false);
      int int0 = 891;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 891);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 891, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = (-2006L);
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1710;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 125;
      intArray0[5] = (-1);
      intArray0[6] = 1873;
      intArray0[7] = 1041;
      intArray0[8] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = (-2346);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-2346));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2346, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = 2;
      ArrayUtils.lastIndexOf((int[]) null, 2);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.contains(objectArray0, object0);
      float[] floatArray0 = new float[0];
      ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.isEmpty(objectArray0);
      ArrayUtils.add(objectArray0, (Object) "uNQ");
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      ArrayUtils.addAll(longArray0, longArray0);
      char[] charArray0 = new char[3];
      char char0 = 'M';
      charArray0[0] = 'M';
      charArray0[1] = 'z';
      charArray0[2] = ',';
      ArrayUtils.isEmpty(charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@4fa9712f', is neither of type Map.Entry nor an Array
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-59);
      intArray0[1] = 0;
      intArray0[2] = (-2190);
      intArray0[3] = 0;
      intArray0[4] = 1282;
      intArray0[5] = (-1961);
      intArray0[6] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@7749e271', is neither of type Map.Entry nor an Array
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      int int0 = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "vdr$2E'(D;7ko\"l", (-934));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)104;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)24);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)104;
      long[] longArray1 = ArrayUtils.add(longArray0, 838L);
      assertArrayEquals(new long[] {104L, 838L}, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)104;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-934);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (-2166);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(6, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-35.07970856659);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-35.07970856659), (-2199.2938204052));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1406L;
      longArray0[1] = (-1733L);
      longArray0[2] = 754L;
      longArray0[3] = (-653L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-1863L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte)52;
      ArrayUtils.addAll(byteArray0, byteArray1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte)52;
      doubleArray0[2] = 120.2669;
      doubleArray0[3] = (double) (byte)52;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 262.39252);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)52;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (int) (byte)52);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      Byte.compare((byte)0, (byte)0);
      Byte.toUnsignedInt((byte)80);
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)80;
      byteArray2[1] = byte0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = byte0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = byte0;
      byte[] byteArray3 = ArrayUtils.subarray(byteArray2, 0, 0);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(8, objectArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, characterArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)93;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)115, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2979);
      shortArray0[1] = (short)3137;
      shortArray0[2] = (short)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-2979);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-2979);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short) (-2979));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte)0;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1483;
      int[] intArray1 = ArrayUtils.add(intArray0, 2310);
      assertArrayEquals(new int[] {0, 1483, 2310}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F);
      ArrayUtils.reverse((byte[]) null);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll((short[]) null, shortArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, int1);
      
      ArrayUtils.indexOf((byte[]) null, (byte)114, 0);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      int int2 = ArrayUtils.indexOf(doubleArray1, (-341.09108524455627), 2);
      assertArrayEquals(new double[] {0.0, 2.0, 1.0}, doubleArray1, 0.01);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-116), (byte)0, (byte)0}, byteArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-116);
      longArray0[1] = (long) (byte) (-116);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 151L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.reverse(charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 6.9952F;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 6.9952F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)22);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, '8', (-417));
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)109;
      Byte byte1 = new Byte((byte)109);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)0);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      byteArray0[5] = byte6;
      try { 
        Byte.decode("CM{(Wh5'^}+8{z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"CM{(Wh5'^}+8{z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1624;
      shortArray0[1] = (short) (-695);
      shortArray0[2] = (short) (-627);
      ArrayUtils.indexOf(shortArray0, (short)0, (int) (short) (-695));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-695);
      doubleArray0[1] = (double) (short) (-695);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-695);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-916.820728428826);
      doubleArray0[8] = (double) (short) (-627);
      ArrayUtils.removeElement(doubleArray0, (double) (short) (-627));
      ArrayUtils.indexOf((byte[]) null, (byte) (-126), 1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1.0F));
      floatArray0[0] = float0;
      Float float1 = new Float((-474.12796F));
      floatArray0[1] = float1;
      Float float2 = new Float((-474.12796F));
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-474.12796F), (-474.12796F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = '~';
      charArray0[2] = 'j';
      charArray0[3] = 'x';
      charArray0[4] = 'H';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Z');
      assertArrayEquals(new char[] {']', '~', 'j', 'x', 'H', 'Z'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1378.697F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3770.1F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 378);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 860.69F;
      floatArray0[1] = 983.98914F;
      floatArray0[2] = (-20.0F);
      floatArray0[3] = 913.34753F;
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 142.28023F);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3171.7622F));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 's';
      charArray0[2] = '+';
      charArray0[3] = 'M';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'d', 's', '+', 'M', 'd', 's', '+', 'M'}, charArray1);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-68), (int) (byte) (-68));
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-265L));
      longArray0[0] = long0;
      Long long1 = new Long((-682L));
      longArray0[1] = long1;
      Long long2 = new Long((-265L));
      longArray0[2] = long2;
      Long long3 = new Long((-198L));
      longArray0[3] = long3;
      Long long4 = new Long(761L);
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-682L), (-265L), (-198L), 761L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)696;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-4129);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-4129));
      short[] shortArray2 = ArrayUtils.remove(shortArray1, (int) (short)1);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-24));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-24)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 869.2831F;
      floatArray0[1] = (-210.3312F);
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(2, int0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-100), 203);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2574);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      int int0 = ArrayUtils.indexOf(shortArray1, (short) (-915));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-2574);
      doubleArray0[1] = (double) (short) (-2574);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (short) (-915);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2574);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short) (-915);
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1));
      assertArrayEquals(new int[] {(-2574), (-1), (-1), (-915), (-1), (-1)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)259;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)259);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)259;
      longArray0[2] = (long) (short)259;
      longArray0[3] = (long) (short)259;
      longArray0[4] = 0L;
      longArray0[5] = (long) (short)259;
      longArray0[6] = (long) (short)259;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, (-845));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-394L);
      long[] longArray1 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2802);
      intArray0[1] = (-2775);
      intArray0[2] = (-2802);
      intArray0[3] = (-13);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {(-2802), (-2775), (-2802), (-13)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      ArrayUtils.add(byteArray0, (byte)87);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)98;
      floatArray0[1] = 858.4102F;
      floatArray0[2] = (-1897.8314F);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)98;
      ArrayUtils.contains(floatArray0, 98.0F);
      int[] intArray0 = new int[1];
      intArray0[0] = 1063;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1063, Length: 1
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1000.1;
      ArrayUtils.reverse(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2304);
      intArray0[3] = 0;
      intArray0[4] = 2260;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ArrayUtils.indexOf((byte[]) null, (byte) (-1));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.reverse(doubleArray0);
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = '\\';
      charArray0[2] = 'v';
      charArray0[3] = 'Y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'i');
      assertEquals(0, int0);
      
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray1, (-1), (-1));
      assertNotNull(doubleArray3);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'v');
      assertEquals(2, int1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'v';
      characterArray0[1] = (Character) 'i';
      characterArray0[2] = (Character) '\\';
      characterArray0[3] = (Character) 'v';
      characterArray0[4] = (Character) 'v';
      characterArray0[5] = (Character) 'Y';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'v', 'i', '\\', 'v', 'v', 'Y'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.removeElement(shortArray0, (short)1);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      Byte.toUnsignedLong((byte)1);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      byteArray0[2] = byte4;
      byte byte5 = (byte)0;
      byteArray0[3] = (Byte) byte3;
      try { 
        Byte.decode(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = 1811.7288F;
      floatArray0[7] = (float) (byte) (-1);
      floatArray0[8] = (float) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1100.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-22551);
      shortArray0[1] = (short)1991;
      shortArray0[2] = (short)1557;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-22551));
      assertArrayEquals(new short[] {(short) (-22551), (short)1991, (short)1557, (short) (-22551)}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 408, (-4614));
      assertNotNull(booleanArray1);
      
      Long long0 = new Long((-1L));
      Long long1 = new Long((short) (-22551));
      Long long2 = new Long((short) (-22551));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4614);
      doubleArray0[1] = (double) (short)1557;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-4614.0), 1557.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-2);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)23;
      shortArray0[2] = (short) (byte) (-2);
      shortArray0[3] = (short) (byte)23;
      shortArray0[4] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2499.677F);
      floatArray0[2] = 53.478F;
      floatArray0[3] = 1345.3292F;
      floatArray0[4] = 2676.5574F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2209.0842F));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-83));
      assertTrue(int1 == int0);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 53.478F;
      floatArray1[1] = (Float) 1345.3292F;
      floatArray1[2] = (Float) (-2499.677F);
      floatArray1[3] = (Float) 0.0F;
      floatArray1[4] = (Float) 1345.3292F;
      floatArray1[5] = (Float) 0.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertArrayEquals(new float[] {53.478F, 1345.3292F, (-2499.677F), 0.0F, 1345.3292F, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2984.6652160484;
      doubleArray0[1] = (-402.84769591);
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-402.84769591), 1, 1.0);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2580, 1276);
      assertNotNull(booleanArray1);
      
      ArrayUtils.toPrimitive((Byte[]) null, (byte)80);
      ArrayUtils.indexOf((byte[]) null, (byte)0, 0);
      ArrayUtils.isEmpty(doubleArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)80;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)80;
      shortArray0[6] = (short) (byte)80;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(14, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.indexOf(longArray0, 288L, 1);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      ArrayUtils.lastIndexOf(objectArray0, object4);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1653;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1197));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, 489);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 489, Length: 6
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer integer0 = new Integer((-450));
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-450);
      doubleArray0[1] = (double) (-450);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-450);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-450);
      doubleArray0[7] = (double) (-450);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-450.0));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-717.87);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 215.13889304394;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1587.0288943609155;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-32.1464592);
      doubleArray0[5] = (-262.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1311.5, (-1144), (-5111.92));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1144);
      floatArray0[1] = 527.3626F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-4596);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-4596), (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 739L);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '[';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      
      ArrayUtils.removeElement((byte[]) null, (byte)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1253.44901;
      doubleArray0[1] = (double) '[';
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) 'T';
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 739L;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 'T';
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'd';
      charArray0[2] = 'o';
      charArray0[3] = '$';
      ArrayUtils.clone(charArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) '$';
      intArray0[2] = (-1);
      intArray0[3] = (int) 'o';
      intArray0[4] = (int) '$';
      intArray0[5] = (int) 'o';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) '$';
      int int0 = ArrayUtils.indexOf(intArray0, (-1));
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '$', 100);
      assertEquals(3, int1);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (-210.26103F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 36;
      objectArray0[1] = (Object) 100;
      objectArray0[2] = (Object) '$';
      objectArray0[3] = (Object) 100;
      objectArray0[4] = (Object) 111;
      objectArray0[5] = (Object) 36;
      objectArray0[6] = (Object) 36;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, objectArray0[5]);
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1197.7892964);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 159.33;
      doubleArray0[4] = 1476.1943098539;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0, (-728.996F));
      ArrayUtils.contains((double[]) null, (double) (-728.996F));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) floatArray0, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '1';
      charArray0[2] = '~';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'w');
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1216);
      intArray0[3] = (int) '1';
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertArrayEquals(new int[] {0, (-1216), 49}, intArray1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '>');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ArrayUtils.isEmpty((double[]) null);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toObject((double[]) null);
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1));
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      ArrayUtils.isEmpty(shortArray0);
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short) (-1);
      shortArray1[3] = (short) (-1);
      shortArray1[4] = (short) (-1);
      shortArray1[5] = (short) (-1);
      shortArray1[6] = (short) (-1);
      ArrayUtils.reverse(shortArray1);
      ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-3712.3898771205645));
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-852.3709);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-971.5432);
      doubleArray0[7] = 230.651243283;
      doubleArray0[8] = 3499.10022115;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(4, int0);
      
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, object0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-852.3709);
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 3499.10022115;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (-1.0);
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 4);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "", 979);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Integer integer0 = new Integer((-334));
      Integer.toUnsignedLong(0);
      Object object0 = new Object();
      ArrayUtils.isSameType(integer0, object0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ArrayUtils.clone((char[]) null);
      Double[] doubleArray0 = new Double[7];
      double double0 = (-1998.62603642);
      Double double1 = new Double((-1998.62603642));
      doubleArray0[0] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double2;
      try { 
        Double.valueOf("', has a length less than 2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-267);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)4237;
      ArrayUtils.addAll(shortArray0, shortArray0);
      ArrayUtils.removeElement((long[]) null, (long) (short)4237);
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.indexOf(booleanArray0, false);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      ArrayUtils.removeElement((char[]) null, '\'');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'J';
      charArray0[2] = '#';
      charArray0[3] = '*';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'a');
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ArrayUtils.subarray((short[]) null, 0, (-2410));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)83;
      byte[] byteArray1 = ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte) (-59), (byte) (-70), (byte) (-41), (byte)79, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1772);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1772), 0);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1));
      doubleArray0[2] = double2;
      Double double3 = new Double(39.36176125913);
      Double.sum((-755.3597), 0.0);
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 39.36176125913}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ArrayUtils.lastIndexOf((int[]) null, 2);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.contains(objectArray0, object0);
      float[] floatArray0 = new float[0];
      ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.isEmpty(objectArray0);
      ArrayUtils.add(objectArray0, (Object) "uNQ");
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      ArrayUtils.addAll(longArray0, longArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'z';
      charArray0[2] = ',';
      ArrayUtils.isEmpty(charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@6f3620a1', is neither of type Map.Entry nor an Array
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) null);
      assertEquals(8, objectArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2143997473;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2143997473, 2143997473);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2152;
      shortArray0[2] = (short)857;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)550;
      shortArray0[5] = (short) (-493);
      shortArray0[6] = (short) (-990);
      shortArray0[7] = (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1349), (int) (short) (-1));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4883);
      shortArray0[1] = (short)334;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-175);
      shortArray0[6] = (short)2582;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short) (-4883), (short)334, (short)2, (short)0, (short) (-175), (short)2582, (short)0}, shortArray1);
      
      ArrayUtils.isEmpty(shortArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1046));
      Short[] shortArray2 = new Short[2];
      shortArray2[0] = (Short) (short)2;
      shortArray2[1] = (Short) (short)334;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertArrayEquals(new short[] {(short)2, (short)334}, shortArray3);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) shortArray2, (Object[]) shortArray2);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1046);
      intArray0[1] = (int) (short)2582;
      intArray0[2] = 0;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)34;
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-508.0));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-450.0));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)10;
      ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)60;
      ArrayUtils.lastIndexOf(longArray0, (long) (byte)60, (int) (byte)12);
      ArrayUtils.clone(longArray0);
      char[] charArray0 = new char[0];
      Double.isFinite((-508.0));
      ArrayUtils.removeElement(charArray0, 'C');
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      ArrayUtils.isSameLength(doubleArray2, doubleArray2);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, 196);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 196, Length: 1
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(2, charArray1.length);
      
      ArrayUtils.removeElement((long[]) null, 1L);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'W';
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) 'W';
      intArray0[4] = 1;
      intArray0[5] = 1736;
      intArray0[6] = (int) 'W';
      intArray0[7] = (int) 'W';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)667;
      shortArray0[1] = (short) (-3429);
      shortArray0[2] = (short) (-1869);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-21975);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 935, (-907));
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (short) (-3429));
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertArrayEquals(new float[] {(-3429.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short short0 = (short)2799;
      short short1 = (short) (-4074);
      short short2 = (short) (-1980);
      short short3 = (short) (-836);
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, (-2044), 70);
      long[] longArray0 = new long[9];
      longArray0[2] = 3560L;
      longArray0[3] = 1248L;
      longArray0[4] = (long) (short) (-990);
      long long0 = 1219L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (short) (-1980));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1980, Length: 0
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-935.2818269248044);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2295.15025971;
      doubleArray0[3] = (-450.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (-2146913569));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-402.84769591));
      Long[] longArray0 = new Long[1];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-935.2818269248044), 543.55449);
      assertFalse(boolean1 == boolean0);
      
      Long.compareUnsigned((-2146913569), long0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)810;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)810);
      assertEquals(0, int0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) longArray0, 0, (-2146913569));
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.indexOf(doubleArray0, (-389.569), (-2146913569));
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean2 = new Boolean(true);
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean("<?uuyp`1");
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean(false);
      booleanArray0[3] = boolean5;
      Boolean boolean6 = new Boolean(true);
      booleanArray0[4] = boolean6;
      Boolean boolean7 = Boolean.valueOf("LK1;1Kn<=.%~O'#O:1t");
      booleanArray0[5] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, true, true, false, false}, booleanArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '4';
      charArray0[2] = '?';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', 155);
      assertEquals(2, int0);
      
      ArrayUtils.addAll((short[]) null, (short[]) null);
      boolean boolean1 = ArrayUtils.contains(charArray0, '.');
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '?';
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) '4';
      floatArray0[4] = (float) '?';
      floatArray0[5] = (float) '.';
      floatArray0[6] = (float) 155;
      floatArray0[7] = (float) 155;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) '?';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) 155;
      longArray0[4] = (long) 2;
      longArray0[5] = 286L;
      longArray0[6] = (long) '4';
      longArray0[7] = (long) '?';
      longArray0[8] = (long) 2;
      int int1 = ArrayUtils.indexOf(longArray0, 2L, 2);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Boolean boolean0 = new Boolean(false);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true, false, false}, booleanArray1));
      assertEquals(10, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '4';
      charArray0[2] = '?';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', 155);
      assertEquals(2, int0);
      
      ArrayUtils.addAll((short[]) null, (short[]) null);
      boolean boolean1 = ArrayUtils.contains(charArray0, '.');
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '?';
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) '4';
      floatArray0[4] = (float) '?';
      floatArray0[5] = (float) '.';
      floatArray0[6] = (float) 155;
      floatArray0[7] = (float) 155;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) '?';
      longArray0[2] = (long) '?';
      floatArray0[0] = (float) 155;
      longArray0[4] = (long) 2;
      longArray0[5] = 286L;
      longArray0[6] = (long) '4';
      longArray0[7] = (long) '?';
      longArray0[8] = (long) 2;
      int int1 = ArrayUtils.indexOf(longArray0, 2L, 2);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-2443L);
      longArray0[2] = (-4289L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2443L);
      objectArray0[1] = (Object) (-4289L);
      Object object0 = new Object();
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.isSameType(object0, objectArray0[1]);
      Character[] characterArray0 = new Character[8];
      char char0 = 'W';
      Character character0 = new Character('W');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('W');
      characterArray0[1] = character1;
      Character character2 = new Character('y');
      characterArray0[2] = character2;
      char char1 = 'z';
      Character character3 = new Character('z');
      characterArray0[3] = character3;
      char char2 = 'w';
      Character character4 = new Character('w');
      characterArray0[4] = character4;
      Character character5 = new Character(char1);
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char2);
      characterArray0[6] = character6;
      characterArray0[7] = (Character) char0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'W', 'W', 'y', 'z', 'w', 'z', 'w', 'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1200.783F);
      floatArray0[2] = (-2376.4192F);
      floatArray0[3] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-2376.4192F), 1);
      char[] charArray0 = new char[1];
      int int1 = ArrayUtils.indexOf(charArray0, 'G', 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)73);
      assertTrue(int2 == int1);
      
      ArrayUtils.lastIndexOf(charArray0, '|');
      long[] longArray0 = new long[12];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = 1L;
      longArray0[3] = (long) (byte)2;
      longArray0[5] = (long) '|';
      longArray0[6] = (long) 1;
      int int3 = ArrayUtils.indexOf(longArray0, 1L, (-1));
      assertTrue(int3 == int0);
      
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(8, floatArray1.length);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)2;
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1654.4294F);
      floatArray0[1] = (-2655.4084F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      
      ArrayUtils.toPrimitive((Character[]) null);
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(0);
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      longArray0[2] = long2;
      Long long3 = new Long((-1L));
      longArray0[3] = long3;
      Long long4 = Long.getLong((String) null, (-550L));
      Long long5 = Long.getLong("java.lang.Object", long4);
      longArray0[4] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), (-550L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      ArrayUtils.reverse(charArray0);
      ArrayUtils.reverse((double[]) null);
      int int0 = ArrayUtils.indexOf((double[]) null, (-2385.5290956), (-10));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (-1), (-10), 1.0);
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (-2385.5290956), (int) '\u0000');
      assertTrue(int2 == int1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int3 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[1] = (double) '\u0000';
      doubleArray0[2] = (double) '\u0000';
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-10);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) (short) (-1);
      int int4 = ArrayUtils.lastIndexOf(doubleArray0, 1629.85, 0.0);
      assertTrue(int4 == int3);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = (Double) (-1.0);
      Double double0 = new Double((-652.0739714));
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) (-1.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), (-1.0), (-652.0739714), 0.0, (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[6] = (long) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)48, (int) (byte)0);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.0F;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) (-1L);
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) 1.0F;
      Object object1 = new Object();
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.toObject(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1388;
      ArrayUtils.lastIndexOf(intArray0, 0, (-2298));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 0);
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'g';
      ArrayUtils.toObject(charArray0);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte)0);
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)0);
      byteArray0[3] = byte3;
      Byte byte4 = new Byte(byte0);
      Byte byte5 = new Byte(byte0);
      byteArray0[5] = byte5;
      byteArray0[6] = (Byte) byte0;
      Byte byte6 = new Byte((byte) (-100));
      byteArray0[7] = byte6;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.indexOf(intArray0, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      ArrayUtils.lastIndexOf(booleanArray0, true, 996);
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 5;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 5);
      ArrayUtils.lastIndexOf(booleanArray1, true, 5);
      ArrayUtils.isSameLength(floatArray1, floatArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2899.90611082466;
      ArrayUtils.indexOf(doubleArray0, (double) (-1), (double) 4);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      ArrayUtils.clone(objectArray0);
      Float[] floatArray2 = new Float[4];
      floatArray2[0] = (Float) 5.0F;
      floatArray2[1] = (Float) 5.0F;
      floatArray2[2] = (Float) 5.0F;
      floatArray2[3] = (Float) 5.0F;
      ArrayUtils.toPrimitive(floatArray2, (float) 0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 5;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 4;
      longArray0[5] = 1L;
      longArray0[6] = (long) 5;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 9
         //
         verifyException("ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElement(longArray0, 1L);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)30;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)30);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte)73}, byteArray1);
      
      ArrayUtils.reverse(floatArray0);
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)73;
      byteArray2[1] = (Byte) (byte) (-84);
      byteArray2[2] = (Byte) (byte)30;
      byteArray2[3] = (Byte) (byte)30;
      byteArray2[4] = (Byte) (byte)0;
      byteArray2[5] = (Byte) (byte)0;
      byteArray2[6] = (Byte) (byte)73;
      byteArray2[7] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-84), (byte)30, (byte)30, (byte)0, (byte)0, (byte)73, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) byteArray2, (Object[]) byteArray2);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean(true);
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)0);
      shortArray0[0] = short0;
      Short short1 = new Short((short)1);
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-416));
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1, (short) (-416)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-79);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(2, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-93), (double) (byte)1);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = (float) (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 553);
      assertEquals(1, int2);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '!';
      charArray0[3] = '6';
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1515;
      intArray0[1] = 0;
      intArray0[2] = 1766;
      intArray0[3] = 387;
      intArray0[4] = (-780);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 2469;
      intArray0[8] = 1496;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1496, 2469, 1, 0, (-780), 387, 1766, 0, 1515}, intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
  }
}
